/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { TimerState } from "./components/chronometer/chronometer-timer-state";
import { SwiperOptions } from "swiper";
import { QueryViewerParameterChangedEvent } from "./components/query-viewer-parameter/query-viewer-parameter";
export namespace Components {
  interface GxActionSheet {
    /**
     * This attribute lets you specify the label for the close button. Important for accessibility.
     */
    closeButtonLabel: string;
    /**
     * This attribute lets you specify if the action sheet is opened or closed.
     */
    opened: boolean;
  }
  interface GxActionSheetItem {
    /**
     * This attribute lets you specify the type of action. `"cancel"` and `"destructive"` are styled differently
     */
    actionType: "default" | "destructive";
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, gxClick event).
     */
    disabled: false;
  }
  interface GxAudio {
    /**
     * This attribute lets you specify if the element is disabled.
     */
    disabled: false;
    /**
     * This attribute is for specifies the src of the audio.
     */
    src: string;
  }
  interface GxBootstrap {}
  interface GxButton {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event). If a disabled image has been specified, it will be shown, hiding the base image (if specified).
     */
    disabled: false;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify the relative location of the image to the text.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `above`  | The image is located above the text.                    | | `before` | The image is located before the text, in the same line. | | `after`  | The image is located after the text, in the same line.  | | `below`  | The image is located below the text.                    | | `behind` | The image is located behind the text.                   |
     */
    imagePosition: "above" | "before" | "after" | "below" | "behind";
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute lets you specify the size of the button.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `large`  | Large sized button.                                     | | `normal` | Standard sized button.                                  | | `small`  | Small sized button.                                     |
     */
    size: "large" | "normal" | "small";
  }
  interface GxCanvas {
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
  }
  interface GxCanvasCell {
    /**
     * Defines the horizontal aligmnent of the content of the cell.
     */
    align: "left" | "right" | "center";
    /**
     * This attribute defines how the control behaves when the content overflows.  | Value    | Details                                                     | | -------- | ----------------------------------------------------------- | | `scroll` | The overflowin content is hidden, but scrollbars are shown  | | `clip`   | The overflowing content is hidden, without scrollbars       |
     */
    overflowMode: "scroll" | "clip";
    /**
     * Defines the vertical aligmnent of the content of the cell.
     */
    valign: "top" | "bottom" | "medium";
  }
  interface GxCard {
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * True to show the card border. False to hide it.
     */
    showBorder: true;
    /**
     * True to show the card footer. False to hide it.
     */
    showFooter: true;
    /**
     * True to show the card header. False to hide it.
     */
    showHeader: true;
  }
  interface GxCheckbox {
    /**
     * Specifies the label of the checkbox.
     */
    caption: string;
    /**
     * Indicates that the control is selected by default.
     */
    checked: boolean;
    /**
     * The value when the checkbox is 'on'
     */
    checkedValue: string;
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<string>;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * The value when the checkbox is 'off'
     */
    unCheckedValue: string;
    /**
     * The value of the control.
     */
    value: string;
  }
  interface GxChronometer {
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<HTMLGxChronometerElement>;
    /**
     * Defines the interval that the function onTick will be called.
     */
    interval: 1;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * When the chronometer reaches this value, MaxValueText will be shown instead of the Chronometer value.
     */
    maxValue: 0;
    /**
     * Text to be displayed when chronometer value reaches maxValue.
     */
    maxValueText: string;
    /**
     * Stops and set to 0 the Chronometer.
     */
    reset: () => Promise<void>;
    /**
     * Starts the Chronometer
     */
    start: () => Promise<void>;
    /**
     * State of the Chronometer.
     */
    state: TimerState;
    /**
     * Stops the Chronometer
     */
    stop: () => Promise<void>;
    /**
     * Time unit: (s) seconds or (ms) milliseconds for every time control Property.
     */
    unit: "s" | "ms";
    /**
     * The value of the control.
     */
    value: number;
  }
  interface GxEdit {
    /**
     * Allows to specify the role of the element when inside a `gx-form-field` element
     */
    area: "field";
    /**
     * Specifies the auto-capitalization behavior. Same as [autocapitalize](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#//apple_ref/doc/uid/TP40008058-autocapitalize) attribute for `input` elements. Only supported by Safari and Chrome.
     */
    autocapitalize: string;
    /**
     * This attribute indicates whether the value of the control can be automatically completed by the browser. Same as [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete) attribute for `input` elements.
     */
    autocomplete: "on" | "off";
    /**
     * Used to control whether autocorrection should be enabled when the user is entering/editing the text value. Sames as [autocorrect](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocorrect) attribute for `input` elements.
     */
    autocorrect: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * Used to define the semantic of the element when readonly=true.  Font categories are mapped to semantic HTML elements when rendered:  * `"headline"`: `h1` * `"subheadline"`: `h2` * `"body"`: `p` * `"footnote"`: `footer` * `"caption1"`: `span` * `"caption2"`: `span`
     */
    fontCategory:
      | "headline"
      | "subheadline"
      | "body"
      | "footnote"
      | "caption1"
      | "caption2";
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<string>;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * True to cut text when it overflows, showing an ellipsis (only applies when readonly)
     */
    lineClamp: false;
    /**
     * Controls if the element accepts multiline text.
     */
    multiline: boolean;
    /**
     * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
     */
    placeholder: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly: boolean;
    /**
     * If true, a trigger button is shown next to the edit field. The button can be customized using `trigger-text` and `trigger-class` attributes, or adding a child element with `slot="trigger-content"` attribute to specify the content inside the trigger button.
     */
    showTrigger: boolean;
    /**
     * The text of the trigger button. If a text is specified and an image is specified (through an element with `slot="trigger-content"`), the content is ignored and the text is used instead.
     */
    triggerText: string;
    /**
     * The type of control to render. A subset of the types supported by the `input` element is supported:  * `"date"` * `"datetime-local"` * `"email"` * `"file"` * `"number"` * `"password"` * `"search"` * `"tel"` * `"text"` * `"url"`
     */
    type:
      | "date"
      | "datetime-local"
      | "email"
      | "file"
      | "number"
      | "password"
      | "search"
      | "tel"
      | "text"
      | "url";
    /**
     * The initial value of the control.
     */
    value: string;
  }
  interface GxFormField {
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * The text to set as the label of the field.
     */
    labelCaption: string;
    /**
     * The position where the label will be located, relative to the edit control. The supported values are:  * `"top"`: The label is located above the edit control. * `"right"`: The label is located at the right side of the edit control. * `"bottom"`: The label is located below the edit control. * `"left"`: The label is located at the left side of the edit control. * `"float"`: The label is shown as a placeholder when the edit control's value is empty. When the value is not empty, the label floats and locates above the edit control. * `"none"`: The label is rendered, but hidden.
     */
    labelPosition: "none" | "top" | "right" | "bottom" | "left" | "float";
  }
  interface GxGauge {
    /**
     * The maximum value of the gauge. This prop allows specify the maximum value that the gauge will handle. If there is no value specified it will be calculated by the sum of all gx-ranges values
     */
    maxValue: number;
    /**
     * The minimum value of the gauge 0 by Default
     */
    minValue: number;
    /**
     * Set `true` to display the minimum and maximum value. Default is `false`.
     */
    showMinMax: boolean;
    /**
     * Set `true` to display the current value. Default is `false`.
     */
    showValue: boolean;
    /**
     * Allows specify the width of the circumference _(When gauge is circle type)_ or the width of the bar _(When gauge is Line type)_ in % relative the component size.
     */
    thickness: number;
    /**
     * This property allows selecting the gauge type. The allowed values are `circle` or `line` (defautl).
     */
    type: "line" | "circle";
    /**
     * The current value of the gauge
     */
    value: number;
  }
  interface GxGaugeRange {
    /**
     * The range length.
     */
    amount: number;
    /**
     * Color property defines the color of range background. Color value can be any valid CSS color.
     */
    color: string;
    /**
     * The name of the range.
     */
    name: string;
  }
  interface GxGridEmptyIndicator {
    /**
     * Image url to be shown
     */
    image: "";
    /**
     * A CSS class to set as the inner `image` element class.
     */
    imageClass: "";
    /**
     * Text to be displayed
     */
    text: "";
    /**
     * A CSS class to set as the inner `text` element class.
     */
    textClass: "";
  }
  interface GxGridFlex {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow: false;
    complete: () => Promise<void>;
    /**
     * This establishes the main-axis, thus defining the direction flex items are placed in the flex container.  Flexbox is (aside from optional wrapping) a single-direction layout concept.  Think of flex items as primarily laying out either in horizontal rows or vertical columns.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `row` | The flex container's main-axis is defined to be the same as the text direction. The main-start and main-end points are the same as the content direction.                | | `column`   | The flex container's main-axis is the same as the block-axis. The main-start and main-end points are the same as the before and after points of the writing-mode. |
     */
    flexDirection: "row" | "column";
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Grid loading State. It's purpose is to know rather the Grid Loading animation or the Grid Empty placeholder should be shown.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState: "loading" | "loaded";
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders may not work correctly.
     */
    recordCount: number;
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold: string;
  }
  interface GxGridFs {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow: false;
    complete: () => Promise<void>;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Grid loading State. It's purpose is to know rather the Grid Loading animation or the Grid Empty placeholder should be shown.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState: "loading" | "loaded";
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders will not work correctly.
     */
    recordCount: number;
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold: string;
  }
  interface GxGridHorizontal {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow: boolean;
    /**
     * Number of items per column (items visible at the same time on slider's container).
     */
    columns: number | "auto";
    /**
     * 1-Indexed number of currently active page
     */
    currentPage: number;
    /**
     * Items layout direction: Could be 'horizontal' or 'vertical' (for vertical slider).
     */
    direction: "horizontal" | "vertical";
    /**
     * Get the index of the current active slide.
     */
    getActiveIndex: () => Promise<number>;
    /**
     * Get the index of the previous slide.
     */
    getPreviousIndex: () => Promise<number>;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Get whether or not the current slide is the last slide.
     */
    isLast: () => Promise<boolean>;
    /**
     * Get whether or not the current slide is the first slide.
     */
    isStart: () => Promise<boolean>;
    /**
     * Set numbers of items to define and enable group sliding. Useful to use with rowsPerPage > 1
     */
    itemsPerGroup: 1;
    /**
     * Get the total number of slides.
     */
    length: () => Promise<number>;
    /**
     * Grid loading state. It's purpose is to know whether the grid loading animation or the grid empty placeholder should be shown.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState: "loading" | "loaded";
    /**
     * Logging level. For troubleshooting component update and initialization.
     */
    logLevel: "debug" | "off";
    /**
     * Advanced options to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options
     */
    options: SwiperOptions;
    /**
     * If `true`, show the pagination buttons.
     */
    pager: true;
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders will not work correctly.
     */
    recordCount: number;
    /**
     * Number of items per column, for multirow layout.
     */
    rows: number;
    /**
     * If `true`, show the scrollbar.
     */
    scrollbar: false;
    /**
     * Transition to the next slide.
     * @param speed The transition duration (in ms).
     * @param runCallbacks If true, the transition will produce [Transition/SlideChange][Start/End] transition events.
     */
    slideNext: (speed?: number, runCallbacks?: boolean) => Promise<void>;
    /**
     * Transition to the previous slide.
     * @param speed The transition duration (in ms).
     * @param runCallbacks If true, the transition will produce the [Transition/SlideChange][Start/End] transition events.
     */
    slidePrev: (speed?: number, runCallbacks?: boolean) => Promise<void>;
    /**
     * Transition to the specified slide.
     * @param index The index of the slide to transition to.
     * @param speed The transition duration (in ms).
     * @param runCallbacks If true, the transition will produce [Transition/SlideChange][Start/End] transition events.
     */
    slideTo: (
      index: number,
      speed?: number,
      runCallbacks?: boolean
    ) => Promise<void>;
    /**
     * Set to false to enable slides in free mode position.
     */
    snapToGrid: true;
    /**
     * Start auto play.
     */
    startAutoplay: () => Promise<void>;
    /**
     * Stop auto play.
     */
    stopAutoplay: () => Promise<void>;
    /**
     * Lock or unlock the ability to slide to the next slide.
     * @param lock If `true`, disable swiping to the next slide.
     */
    toggleLockSwipeToNext: (lock: boolean) => Promise<void>;
    /**
     * Lock or unlock the ability to slide to the previous slide.
     * @param lock If `true`, disable swiping to the previous slide.
     */
    toggleLockSwipeToPrev: (lock: boolean) => Promise<void>;
    /**
     * Lock or unlock the ability to slide to the next or previous slide.
     * @param lock If `true`, disable swiping to the next and previous slide.
     */
    toggleLockSwipes: (lock: boolean) => Promise<void>;
    /**
     * Update the underlying slider implementation. Call this if you've added or removed child slides.
     */
    update: () => Promise<void>;
    /**
     * Force swiper to update its height (when autoHeight is enabled) for the duration equal to 'speed' parameter.
     * @param speed The transition duration (in ms).
     */
    updateAutoHeight: (speed?: number) => Promise<void>;
  }
  interface GxGridInfiniteScroll {
    /**
     * Call `complete()` within the `gxInfinite` output event handler when your async operation has completed. For example, the `loading` state is while the app is performing an asynchronous operation, such as receiving more data from an AJAX request to add more items to a data list. Once the data has been received and UI updated, you then call this method to signify that the loading has completed. This method will change the infinite scroll's state from `loading` to `enabled`.
     */
    complete: () => Promise<void>;
    /**
     * If `true`, the infinite scroll will be hidden and scroll event listeners will be removed.  Set this to true to disable the infinite scroll from actively trying to receive new data while scrolling. This is useful when it is known that there is no more data that can be added, and the infinite scroll is no longer needed.
     */
    disabled: boolean;
    /**
     * This property must be bounded to grid item count property. It's unique purpose is to trigger gxInfinite as many times as needed to fullfill the Container space when the intial batch does not overflow the main container
     */
    itemCount: number;
    /**
     * The position of the infinite scroll element. The value can be either `top` or `bottom`.
     */
    position: "top" | "bottom";
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold: string;
    /**
     * The View Port parent element selector where the infinite component would be attached to and listening to Scroll Events.
     */
    viewportSelector: string;
  }
  interface GxGridInfiniteScrollContent {}
  interface GxGridSmartCell {
    /**
     * Whether this row is even position or not. This is specially required in Virtual scroll scenarios where the position in the DOM is not the real position in the collection.
     */
    isRowEven: false;
  }
  interface GxGridSmartCss {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow: false;
    complete: () => Promise<void>;
    /**
     * Specifies the direction of the flexible items.
     */
    direction: "vertical" | "horizontal";
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Grid Item Layout Mode: Single, Multiple by quantity, multiple by size.
     */
    itemLayoutMode: "single" | "mbyq" | "mbys";
    /**
     * Grid loading State. It's purpose is to know rather the Grid Loading animation or the Grid Empty placeholder should be shown.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState: "loading" | "loaded";
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders may not work correctly.
     */
    recordCount: number;
    /**
     * Scroll snapping allows to lock the viewport to certain elements or locations after a user has finished scrolling
     */
    snapToGrid: false;
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold: string;
  }
  interface GxGroup {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow: boolean;
    /**
     * Attribute that provides the caption to the <legend> tag
     */
    caption: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
  }
  interface GxIcon {
    /**
     * The color of the icon.
     */
    color: string;
    /**
     * A label for the icon, for screen readers to use.
     */
    label: string;
    /**
     * If enabled, the icon will be loaded lazily when it's visible in the viewport.
     */
    lazy: boolean;
    /**
     * The type of icon. Possible values: the name each of the icons in /assets.
     */
    type: string;
  }
  interface GxImage {
    /**
     * This attribute lets you specify the alternative text.
     */
    alt: "";
    /**
     * If true, the component will be sized to match the image's intrinsic size when not constrained via CSS dimension properties (for example, height or width). If false, the component will never force its height to match the image's intrinsic size. The width, however, will match the intrinsic width. In GeneXus terms, it will auto grow horizontally, but not vertically.
     */
    autoGrow: true;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * This attribute lets you specify the height.
     */
    height: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * True to lazy load the image, when it enters the viewport.
     */
    lazyLoad: true;
    /**
     * This attribute lets you specify the low resolution image SRC.
     */
    lowResolutionSrc: "";
    /**
     * This attribute allows specifing how the image is sized according to its container. `contain`, `cover`, `fill` and `none` map directly to the values of the CSS `object-fit` property. The `tile` value repeats the image, both vertically and horizontally, creating a tile effect.
     */
    scaleType: "contain" | "cover" | "fill" | "none" | "tile";
    /**
     * This attribute lets you specify the SRC.
     */
    src: "";
    /**
     * This attribute lets you specify the width.
     */
    width: string;
  }
  interface GxInteractiveImage {
    /**
     * True/False. If this property is true, the user can zoom in/out on the image.
     */
    enableZoom: boolean;
    /**
     * Lets you specify the image URL. *Requiered*
     */
    src: "";
    /**
     * Indicates how much you can enlarge an image. (Percentage) _Note: 100% = Normal size_.
     */
    zoom: number;
  }
  interface GxLayout {
    /**
     * True to hide the bottom target
     */
    bottomHidden: false;
    /**
     * True to hide the left target
     */
    leftHidden: boolean;
    /**
     * True to hide the right target
     */
    rightHidden: boolean;
    /**
     * True to hide the top target
     */
    topHidden: false;
  }
  interface GxLoading {
    /**
     * Sets the caption text.
     */
    caption: string;
    /**
     * Sets the description text.
     */
    description: string;
    /**
     * Sets if the loading dialog is presented.
     */
    presented: false;
    /**
     * Sets the value.
     */
    type: "determinate" | "indeterminate";
    /**
     * Sets the value when type is determinate. Must be a value between 0 and 1.
     */
    value: 0;
  }
  interface GxLottie {
    /**
     * This attribute lets you specify a Lottie animation object
     */
    animationData: any;
    /**
     * This attribute lets you specify if the animation will start playing as soon as it is ready
     */
    autoPlay: boolean;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute lets you specify if the animation will loop
     */
    loop: boolean;
    /**
     * This attribute lets you specify  the relative path to the animation object. (`animationData` and `path` are mutually exclusive)
     */
    path: string;
    /**
     * Pause the animation
     */
    pause: () => Promise<void>;
    /**
     * Start playing the animation
     */
    play: (from?: number, to?: number) => Promise<void>;
    /**
     * Set the progress of the animation to any point
     * @param progress : Value from 0 to 1 indicating the percentage of progress where the animation will start.
     */
    setProgress: (progress: number) => Promise<void>;
    /**
     * Stop the animation
     */
    stop: () => Promise<void>;
  }
  interface GxMap {
    /**
     * The coord of initial center of the map.
     */
    center: string;
    /**
     * Enable the High Accuracy in user location. _Note: This property applies when ```watchPosition = true```._
     */
    highAccuracyLocator: boolean;
    /**
     * The map provider. _Note: Currently, this property is for setting a custom map provider using an URL._
     */
    mapProvider: string;
    /**
     * Map type to be used. _Note: If you set a map provider, the selected map type will be ignored._
     */
    mapType: "standard" | "satellite" | "hybrid";
    /**
     * The max zoom level available in the map. _Note: 20 is the best value to be used, only lower values are allowed. Is highly recommended to no change this value if you are not sure about the `maxZoom` supported by the map._
     */
    maxZoom: number;
    /**
     * Enables the possibility to navigate the map and select a location point using the map center.
     */
    selectionLayer: boolean;
    /**
     * Indicates if the current location of the device is displayed on the map.
     */
    watchPosition: boolean;
    /**
     * The initial zoom level in the map.
     */
    zoom: number;
  }
  interface GxMapLine {
    /**
     * The coordinates where the line/polyline will appear in the map.
     */
    coords: string;
  }
  interface GxMapMarker {
    /**
     * The coordinates where the marker will appear in the map.
     */
    coords: string;
    /**
     * The marker image height.
     */
    iconHeight: number;
    /**
     * The marker image width.
     */
    iconWidth: number;
    /**
     * The class that the marker will have.  Set the `background-image` property to use it as icon of the marker.
     */
    markerClass: string;
    /**
     * The tooltip caption of the marker.
     */
    tooltipCaption: string;
  }
  interface GxMessage {
    /**
     * Text for the close button.
     */
    closeButtonText: string;
    /**
     * The time in miliseconds before the message is automatically dismissed. If no duration is specified, the message will not be automatically dismissed.
     */
    duration: number;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Show a button for closing the meesage box
     */
    showCloseButton: boolean;
    /**
     * Type of the button: * `info`: Information message * `warning`: Warning Message * `error`: Error message
     */
    type: "info" | "warning" | "error";
  }
  interface GxModal {
    /**
     * This attribute lets you specify if the modal dialog is automatically closed when an action is clicked.
     */
    autoClose: boolean;
    /**
     * This attribute lets you specify the label for the close button. Important for accessibility.
     */
    closeButtonLabel: string;
    /**
     * This attribute lets you specify if the modal dialog is opened or closed.
     */
    opened: boolean;
    /**
     * This attribute lets you specify if a header is renderd on top of the modal dialog.
     */
    showHeader: boolean;
  }
  interface GxNavbar {
    /**
     * This attribute lets you specify the label for the low priority actions toggle button. Important for accessibility.
     */
    actionToggleButtonLabel: string;
    /**
     * This attribute lets you specify the label for the back button.
     */
    backButtonLabel: string;
    /**
     * This attribute lets you specify an optional title for the navigation bar
     */
    caption: string;
    /**
     * True to show the back button
     */
    showBackButton: false;
    /**
     * True to show the left target toggle button (a burger icon)
     */
    showToggleButton: false;
    /**
     * This attribute lets you specify if one or two lines will be used to render the navigation bar. Useful when there are links and also actions, to have links in the first line, and actions in the second
     */
    singleLine: true;
    /**
     * This attribute lets you specify the label for the left target toggle button. Important for accessibility.
     */
    toggleButtonLabel: string;
  }
  interface GxNavbarItem {
    /**
     * Indicates if the navbar item is the active one (for example, when the item represents the current page)
     */
    active: false;
    /**
     * This attribute lets you specify the URL of the navbar item.
     */
    href: "";
    /**
     * This attribute lets you specify the alternate text for the image specified in iconSrc.
     */
    iconAltText: "";
    /**
     * This attribute lets you specify the URL of an icon for the navbar item.
     */
    iconSrc: "";
  }
  interface GxPasswordEdit {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<any>;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
     */
    placeholder: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly: boolean;
    /**
     * Text of the reveal button to offer hiding the password.
     */
    revealButtonTextOff: string;
    /**
     * Text of the reveal button to offer revealing the password.
     */
    revealButtonTextOn: string;
    /**
     * Indicates if the value is revealed or masked.
     */
    revealed: boolean;
    /**
     * If true, a reveal password button is shown next to the password input. Pressing the reveal button toggles the password mask, allowing the user to view the password text.
     */
    showRevealButton: boolean;
    /**
     * The initial value of the control.
     */
    value: string;
  }
  interface GxProgressBar {
    /**
     * Sets the progress value.
     */
    value: number;
  }
  interface GxQueryViewer {
    /**
     * Allowing elements order to change
     */
    allowElementsOrderChange: boolean;
    /**
     * Allow selection
     */
    allowSelection: boolean;
    /**
     * Auto refresh group
     */
    autoRefreshGroup: string;
    /**
     * If type== PivotTable or Table, if true will shrink the table
     */
    autoResize: boolean;
    /**
     * If autoResize, in here select the type, Width, height, or both
     */
    autoResizeType: "Both" | "Vertical" | "Horizontal";
    /**
     * Base URL of the server
     */
    baseUrl: any;
    /**
     * If type == Chart, this is the chart type: Bar, Pie, Timeline, etc...
     */
    chartType:
      | "Column"
      | "Column3D"
      | "StackedColumn"
      | "StackedColumn3D"
      | "StackedColumn100"
      | "Bar"
      | "StackedBar"
      | "StackedBar100"
      | "Area"
      | "StackedArea"
      | "StackedArea100"
      | "SmoothArea"
      | "StepArea"
      | "Line"
      | "StackedLine"
      | "StackedLine100"
      | "SmoothLine"
      | "StepLine"
      | "Pie"
      | "Pie3D"
      | "Doughnut"
      | "Doughnut3D"
      | "LinearGauge"
      | "CircularGauge"
      | "Radar"
      | "FilledRadar"
      | "PolarArea"
      | "Funnel"
      | "Pyramid"
      | "ColumnLine"
      | "Column3DLine"
      | "Timeline"
      | "SmoothTimeline"
      | "StepTimeline"
      | "Sparkline";
    /**
     * Allowing or not Comlumn sort
     */
    disableColumnSort: boolean;
    /**
     * Environmet of the project: JAVA. .Net, NetCore
     */
    env: string;
    /**
     * If type== PivotTable or Table allow to export to HTML
     */
    exportToHTML: boolean;
    /**
     * If type== PivotTable or Table allow to export to PDF
     */
    exportToPDF: boolean;
    /**
     * If type== PivotTable or Table allow to export to XLS
     */
    exportToXLS: boolean;
    /**
     * If type== PivotTable or Table allow to export to XLSX
     */
    exportToXLSX: boolean;
    /**
     * If type== PivotTable or Table allow to export to XML
     */
    exportToXML: boolean;
    /**
     * Font Color
     */
    fontColor: string;
    /**
     * Type of font
     */
    fontFamily: string;
    /**
     * Font size
     */
    fontSize: number;
    /**
     * Include max and min
     */
    includeMaxMin: boolean;
    /**
     * Include spark line
     */
    includeSparkline: boolean;
    /**
     * If true includes trend on the graph
     */
    includeTrend: boolean;
    /**
     * True if it is external query
     */
    isExternalQuery: boolean;
    /**
     * Language of the QueryViewer
     */
    language: string;
    /**
     * Object of QueryViewer
     */
    object: string;
    /**
     * Name of the Query or Data provider assigned
     */
    objectName: string;
    /**
     * Object type -> Query or DataProvider
     */
    objectType: string;
    /**
     * Orientation of the graph
     */
    orientation: "Horizontal" | "Vertical";
    /**
     * If paging true, number of items for a single page
     */
    pageSize: number;
    /**
     * If type == PivotTable or Table, if true there is paging, else everything in one table
     */
    paging: boolean;
    /**
     * Timeline
     */
    plotSeries: "InTheSameChart" | "InSeparateCharts";
    /**
     * Title of the QueryViewer
     */
    queryTitle: string;
    /**
     * For timeline for remembering layout
     */
    rememberLayout: boolean;
    /**
     * Type of data to show
     */
    showDataAs: "Values" | "Percentages" | "ValuesAndPercentages";
    /**
     * Ax to show data labels
     */
    showDataLabelsIn: string;
    /**
     * if true show values on the graph
     */
    showValues: boolean;
    /**
     * Theme for showing the graph
     */
    theme: string;
    /**
     * If includeTrend, defines the period of the trend
     */
    trendPeriod:
      | "SinceTheBeginning"
      | "LastYear"
      | "LastSemester"
      | "LastQuarter"
      | "LastMonth"
      | "LastWeek"
      | "LastDay"
      | "LastHour"
      | "LastMinute"
      | "LastSecond";
    /**
     * Type of the QueryViewer: Table, PivotTable, Chart, Card
     */
    type: "Card" | "Chart" | "PivotTable" | "Table" | "Default";
    /**
     * if true the x Axes intersect at zero
     */
    xAxisIntersectionAtZero: boolean;
    /**
     * Labels for XAxis
     */
    xAxisLabels:
      | "Horizontally"
      | "Rotated30"
      | "Rotated45"
      | "Rotated60"
      | "Vertically";
    /**
     * X Axis title
     */
    xAxisTitle: string;
    /**
     * Y Axis title
     */
    yAxisTitle: string;
  }
  interface GxQueryViewerElement {
    /**
     * Aggregation fucntion
     */
    aggregation: "Sum" | "Average" | "Count" | "Max" | "Min";
    /**
     * Which axis, row or column
     */
    axis: "Rows" | "Columns" | "Pages";
    /**
     * Axis Order type
     */
    axisOrderType: "None" | "Ascending" | "Descending" | "Custom";
    /**
     * Axis order values comma separated
     */
    axisOrderValues: string;
    /**
     * Data field
     */
    dataField: string;
    /**
     * Title to show
     */
    elementTitle: string;
    /**
     * Expand collapse type
     */
    expandCollapseType:
      | "ExpandAllValues"
      | "CollapseAllValues"
      | "ExpandSomeValues";
    /**
     * Expand collapse values comma separated
     */
    expandCollapseValues: string;
    /**
     * Type of the filter
     */
    filterType: "ShowAllValues" | "HideAllValues" | "ShowSomeValues";
    /**
     * Filter values comma separated
     */
    filterValues: string;
    /**
     * Grouping by day of week title
     */
    groupingDayOfWeekTitle: string;
    /**
     * Grouping by day of week
     */
    groupingGroupByDayOfWeek: boolean;
    /**
     * Grouping by month
     */
    groupingGroupByMonth: boolean;
    /**
     * Grouping by Quarter
     */
    groupingGroupByQuarter: boolean;
    /**
     * Grouping by semester
     */
    groupingGroupBySemester: boolean;
    /**
     * Grouping by year
     */
    groupingGroupByYear: boolean;
    /**
     * Grouping hide vale
     */
    groupingHideValue: boolean;
    /**
     * Grouping by month title
     */
    groupingMonthTitle: string;
    /**
     * Grouping by Quarter title
     */
    groupingQuarterTitle: string;
    /**
     * Grouping by Semster title
     */
    groupingSemesterTitle: string;
    /**
     * Gouping by Year title
     */
    groupingYearTitle: string;
    /**
     * Name of the element
     */
    name: string;
    /**
     * Raise item click
     */
    raiseItemClick: boolean;
    /**
     * Type of the element
     */
    type: "Axis" | "Datum";
    /**
     * How to show it
     */
    visible: "Always" | "Yes" | "No" | "Never";
  }
  interface GxQueryViewerElementFormat {
    /**
     * If true cand drag to pages
     */
    canDragToPages: boolean;
    /**
     * Format style
     */
    formatStyle: string;
    /**
     * Max value
     */
    maximumValue: string;
    /**
     * Format on values
     */
    picture: string;
    /**
     * How to show subtotals
     */
    subtotals: "Yes" | "Hidden" | "No";
    /**
     * Target value
     */
    targetValue: string;
  }
  interface GxQueryViewerFormatStyle {
    /**
     * If Conditional true for applying to row or column
     */
    applyToRowOrColumn: boolean;
    /**
     * If Format the operator of the element
     */
    operator: "EQ" | "LT" | "GT" | "LE" | "GE" | "NE" | "IN";
    /**
     * Style or Css class
     */
    styleOrClass: string;
    /**
     * Type of the element Conditional or Format
     */
    type: "Values" | "Conditional";
    /**
     * If Conditional Value to format
     */
    value: string;
    /**
     * If format first value
     */
    value1: string;
    /**
     * If format second value
     */
    value2: string;
  }
  interface GxQueryViewerParameter {
    /**
     * Name of the parameter
     */
    Name: string;
    /**
     * Value of the parameter
     */
    Value: string;
  }
  interface GxRadioGroup {
    /**
     * Specifies how the child `gx-radio-option` will be layed out. It supports two values:  * `horizontal` * `vertical` (default)
     */
    direction: "horizontal" | "vertical";
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * The name that will be set to all the inner inputs of type radio
     */
    name: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly: boolean;
    /**
     * The initial value of the control. Setting the value automatically selects the corresponding radio option.
     */
    value: string;
  }
  interface GxRadioOption {
    /**
     * Specifies the label of the radio.
     */
    caption: string;
    /**
     * Indicates that the control is selected by default.
     */
    checked: boolean;
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * The name of the inner input of type radio
     */
    name: string;
    /**
     * The initial value of the control.
     */
    value: string;
  }
  interface GxRating {
    /**
     * This attribute allows you specify if the element is disabled. If disabled, it will not trigger any user interaction related event (for example, click event).
     */
    disabled: boolean;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<string>;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * This porpoerty is required if you want to display a score. >E.g: In a score of 4/5 stars the `maxValue` is `5` and the `value` is `4`
     */
    maxValue: number;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements. _Disable by default_
     */
    readonly: boolean;
    /**
     * The current value displayed by the component.
     */
    value: number;
  }
  interface GxSelect {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<string>;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Text that appears in the form control when it has no value set
     */
    placeholder: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly: boolean;
    /**
     * Render a text input showing a list of suggested elements.
     */
    suggest: boolean;
    /**
     * The initial value of the control. Setting the value automatically selects the corresponding option.
     */
    value: string;
  }
  interface GxSelectOption {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * Indicates that the control is selected by default.
     */
    selected: boolean;
    /**
     * The initial value of the control.
     */
    value: string;
  }
  interface GxSwitch {
    /**
     * Attribute that provides the caption to the control.
     */
    caption: string;
    /**
     * Indicates if switch control is checked by default.
     */
    checked: boolean;
    /**
     * This attribute allows you specify if the element is disabled. If disabled, it will not trigger any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<string>;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * The value of the control.
     */
    value: string;
  }
  interface GxTab {
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
  }
  interface GxTabCaption {
    /**
     * This attribute lets you specify if the tab page is disabled
     */
    disabled: boolean;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify the relative location of the image to the text.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `above`  | The image is located above the text.                    | | `before` | The image is located before the text, in the same line. | | `after`  | The image is located after the text, in the same line.  | | `below`  | The image is located below the text.                    | | `behind` | The image is located behind the text.                   |
     */
    imagePosition: "above" | "before" | "after" | "below" | "behind";
    /**
     * This attribute lets you specify if the tab page corresponding to this caption is selected
     */
    selected: boolean;
  }
  interface GxTabPage {}
  interface GxTable {
    /**
     * Like the `grid-templates-areas` CSS property, this attribute defines a grid template by referencing the names of the areas which are specified with the cells [area attribute](../table-cell/readme.md#area). Repeating the name of an area causes the content to span those cells. A period signifies an empty cell. The syntax itself provides a visualization of the structure of the grid.
     */
    areasTemplate: string;
    /**
     * Like the `grid-templates-columns` CSS property, this attribute defines the columns of the grid with a space-separated list of values. The values represent the width of column.
     */
    columnsTemplate: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Like the `grid-templates-rows` CSS property, this attribute defines the rows of the grid with a space-separated list of values. The values represent the height of each row.
     */
    rowsTemplate: string;
  }
  interface GxTableCell {
    /**
     * Defines the horizontal aligmnent of the content of the cell.
     */
    align: "left" | "right" | "center";
    /**
     * Like the `grid-area` CSS property, this attribute gives a name to the item, so it can be used from the [areas-template attributes](../table/readme.md#areas-template) of the gx-table element.
     */
    area: string;
    /**
     * This attribute defines the maximum height of the cell.
     */
    maxHeight: string;
    /**
     * This attribute defines the minimum height of the cell when its contents are visible. Ignored if its content has `invisible-mode` = `collapse` and is hidden.
     */
    minHeight: string;
    /**
     * This attribute defines how the control behaves when the content overflows.  | Value    | Details                                                     | | -------- | ----------------------------------------------------------- | | `scroll` | The overflowin content is hidden, but scrollbars are shown  | | `clip`   | The overflowing content is hidden, without scrollbars       |
     */
    overflowMode: "scroll" | "clip";
    /**
     * True to add a fading overlay on the right and bottom area of the cell to signify that the content is longer than the space allows.
     */
    showContentFade: false;
    /**
     * Defines the vertical aligmnent of the content of the cell.
     */
    valign: "top" | "bottom" | "medium";
  }
  interface GxTextblock {
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify an URL. If a URL is specified, the textblock acts as an anchor.
     */
    href: "";
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * True to cut text when it overflows, showing an ellipsis.
     */
    lineClamp: false;
  }
  interface GxVideo {
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute is for specifies the src of the video.
     */
    src: string;
  }
}
declare global {
  interface HTMLGxActionSheetElement
    extends Components.GxActionSheet,
      HTMLStencilElement {}
  var HTMLGxActionSheetElement: {
    prototype: HTMLGxActionSheetElement;
    new (): HTMLGxActionSheetElement;
  };
  interface HTMLGxActionSheetItemElement
    extends Components.GxActionSheetItem,
      HTMLStencilElement {}
  var HTMLGxActionSheetItemElement: {
    prototype: HTMLGxActionSheetItemElement;
    new (): HTMLGxActionSheetItemElement;
  };
  interface HTMLGxAudioElement extends Components.GxAudio, HTMLStencilElement {}
  var HTMLGxAudioElement: {
    prototype: HTMLGxAudioElement;
    new (): HTMLGxAudioElement;
  };
  interface HTMLGxBootstrapElement
    extends Components.GxBootstrap,
      HTMLStencilElement {}
  var HTMLGxBootstrapElement: {
    prototype: HTMLGxBootstrapElement;
    new (): HTMLGxBootstrapElement;
  };
  interface HTMLGxButtonElement
    extends Components.GxButton,
      HTMLStencilElement {}
  var HTMLGxButtonElement: {
    prototype: HTMLGxButtonElement;
    new (): HTMLGxButtonElement;
  };
  interface HTMLGxCanvasElement
    extends Components.GxCanvas,
      HTMLStencilElement {}
  var HTMLGxCanvasElement: {
    prototype: HTMLGxCanvasElement;
    new (): HTMLGxCanvasElement;
  };
  interface HTMLGxCanvasCellElement
    extends Components.GxCanvasCell,
      HTMLStencilElement {}
  var HTMLGxCanvasCellElement: {
    prototype: HTMLGxCanvasCellElement;
    new (): HTMLGxCanvasCellElement;
  };
  interface HTMLGxCardElement extends Components.GxCard, HTMLStencilElement {}
  var HTMLGxCardElement: {
    prototype: HTMLGxCardElement;
    new (): HTMLGxCardElement;
  };
  interface HTMLGxCheckboxElement
    extends Components.GxCheckbox,
      HTMLStencilElement {}
  var HTMLGxCheckboxElement: {
    prototype: HTMLGxCheckboxElement;
    new (): HTMLGxCheckboxElement;
  };
  interface HTMLGxChronometerElement
    extends Components.GxChronometer,
      HTMLStencilElement {}
  var HTMLGxChronometerElement: {
    prototype: HTMLGxChronometerElement;
    new (): HTMLGxChronometerElement;
  };
  interface HTMLGxEditElement extends Components.GxEdit, HTMLStencilElement {}
  var HTMLGxEditElement: {
    prototype: HTMLGxEditElement;
    new (): HTMLGxEditElement;
  };
  interface HTMLGxFormFieldElement
    extends Components.GxFormField,
      HTMLStencilElement {}
  var HTMLGxFormFieldElement: {
    prototype: HTMLGxFormFieldElement;
    new (): HTMLGxFormFieldElement;
  };
  interface HTMLGxGaugeElement extends Components.GxGauge, HTMLStencilElement {}
  var HTMLGxGaugeElement: {
    prototype: HTMLGxGaugeElement;
    new (): HTMLGxGaugeElement;
  };
  interface HTMLGxGaugeRangeElement
    extends Components.GxGaugeRange,
      HTMLStencilElement {}
  var HTMLGxGaugeRangeElement: {
    prototype: HTMLGxGaugeRangeElement;
    new (): HTMLGxGaugeRangeElement;
  };
  interface HTMLGxGridEmptyIndicatorElement
    extends Components.GxGridEmptyIndicator,
      HTMLStencilElement {}
  var HTMLGxGridEmptyIndicatorElement: {
    prototype: HTMLGxGridEmptyIndicatorElement;
    new (): HTMLGxGridEmptyIndicatorElement;
  };
  interface HTMLGxGridFlexElement
    extends Components.GxGridFlex,
      HTMLStencilElement {}
  var HTMLGxGridFlexElement: {
    prototype: HTMLGxGridFlexElement;
    new (): HTMLGxGridFlexElement;
  };
  interface HTMLGxGridFsElement
    extends Components.GxGridFs,
      HTMLStencilElement {}
  var HTMLGxGridFsElement: {
    prototype: HTMLGxGridFsElement;
    new (): HTMLGxGridFsElement;
  };
  interface HTMLGxGridHorizontalElement
    extends Components.GxGridHorizontal,
      HTMLStencilElement {}
  var HTMLGxGridHorizontalElement: {
    prototype: HTMLGxGridHorizontalElement;
    new (): HTMLGxGridHorizontalElement;
  };
  interface HTMLGxGridInfiniteScrollElement
    extends Components.GxGridInfiniteScroll,
      HTMLStencilElement {}
  var HTMLGxGridInfiniteScrollElement: {
    prototype: HTMLGxGridInfiniteScrollElement;
    new (): HTMLGxGridInfiniteScrollElement;
  };
  interface HTMLGxGridInfiniteScrollContentElement
    extends Components.GxGridInfiniteScrollContent,
      HTMLStencilElement {}
  var HTMLGxGridInfiniteScrollContentElement: {
    prototype: HTMLGxGridInfiniteScrollContentElement;
    new (): HTMLGxGridInfiniteScrollContentElement;
  };
  interface HTMLGxGridSmartCellElement
    extends Components.GxGridSmartCell,
      HTMLStencilElement {}
  var HTMLGxGridSmartCellElement: {
    prototype: HTMLGxGridSmartCellElement;
    new (): HTMLGxGridSmartCellElement;
  };
  interface HTMLGxGridSmartCssElement
    extends Components.GxGridSmartCss,
      HTMLStencilElement {}
  var HTMLGxGridSmartCssElement: {
    prototype: HTMLGxGridSmartCssElement;
    new (): HTMLGxGridSmartCssElement;
  };
  interface HTMLGxGroupElement extends Components.GxGroup, HTMLStencilElement {}
  var HTMLGxGroupElement: {
    prototype: HTMLGxGroupElement;
    new (): HTMLGxGroupElement;
  };
  interface HTMLGxIconElement extends Components.GxIcon, HTMLStencilElement {}
  var HTMLGxIconElement: {
    prototype: HTMLGxIconElement;
    new (): HTMLGxIconElement;
  };
  interface HTMLGxImageElement extends Components.GxImage, HTMLStencilElement {}
  var HTMLGxImageElement: {
    prototype: HTMLGxImageElement;
    new (): HTMLGxImageElement;
  };
  interface HTMLGxInteractiveImageElement
    extends Components.GxInteractiveImage,
      HTMLStencilElement {}
  var HTMLGxInteractiveImageElement: {
    prototype: HTMLGxInteractiveImageElement;
    new (): HTMLGxInteractiveImageElement;
  };
  interface HTMLGxLayoutElement
    extends Components.GxLayout,
      HTMLStencilElement {}
  var HTMLGxLayoutElement: {
    prototype: HTMLGxLayoutElement;
    new (): HTMLGxLayoutElement;
  };
  interface HTMLGxLoadingElement
    extends Components.GxLoading,
      HTMLStencilElement {}
  var HTMLGxLoadingElement: {
    prototype: HTMLGxLoadingElement;
    new (): HTMLGxLoadingElement;
  };
  interface HTMLGxLottieElement
    extends Components.GxLottie,
      HTMLStencilElement {}
  var HTMLGxLottieElement: {
    prototype: HTMLGxLottieElement;
    new (): HTMLGxLottieElement;
  };
  interface HTMLGxMapElement extends Components.GxMap, HTMLStencilElement {}
  var HTMLGxMapElement: {
    prototype: HTMLGxMapElement;
    new (): HTMLGxMapElement;
  };
  interface HTMLGxMapLineElement
    extends Components.GxMapLine,
      HTMLStencilElement {}
  var HTMLGxMapLineElement: {
    prototype: HTMLGxMapLineElement;
    new (): HTMLGxMapLineElement;
  };
  interface HTMLGxMapMarkerElement
    extends Components.GxMapMarker,
      HTMLStencilElement {}
  var HTMLGxMapMarkerElement: {
    prototype: HTMLGxMapMarkerElement;
    new (): HTMLGxMapMarkerElement;
  };
  interface HTMLGxMessageElement
    extends Components.GxMessage,
      HTMLStencilElement {}
  var HTMLGxMessageElement: {
    prototype: HTMLGxMessageElement;
    new (): HTMLGxMessageElement;
  };
  interface HTMLGxModalElement extends Components.GxModal, HTMLStencilElement {}
  var HTMLGxModalElement: {
    prototype: HTMLGxModalElement;
    new (): HTMLGxModalElement;
  };
  interface HTMLGxNavbarElement
    extends Components.GxNavbar,
      HTMLStencilElement {}
  var HTMLGxNavbarElement: {
    prototype: HTMLGxNavbarElement;
    new (): HTMLGxNavbarElement;
  };
  interface HTMLGxNavbarItemElement
    extends Components.GxNavbarItem,
      HTMLStencilElement {}
  var HTMLGxNavbarItemElement: {
    prototype: HTMLGxNavbarItemElement;
    new (): HTMLGxNavbarItemElement;
  };
  interface HTMLGxPasswordEditElement
    extends Components.GxPasswordEdit,
      HTMLStencilElement {}
  var HTMLGxPasswordEditElement: {
    prototype: HTMLGxPasswordEditElement;
    new (): HTMLGxPasswordEditElement;
  };
  interface HTMLGxProgressBarElement
    extends Components.GxProgressBar,
      HTMLStencilElement {}
  var HTMLGxProgressBarElement: {
    prototype: HTMLGxProgressBarElement;
    new (): HTMLGxProgressBarElement;
  };
  interface HTMLGxQueryViewerElement
    extends Components.GxQueryViewer,
      HTMLStencilElement {}
  var HTMLGxQueryViewerElement: {
    prototype: HTMLGxQueryViewerElement;
    new (): HTMLGxQueryViewerElement;
  };
  interface HTMLGxQueryViewerElementElement
    extends Components.GxQueryViewerElement,
      HTMLStencilElement {}
  var HTMLGxQueryViewerElementElement: {
    prototype: HTMLGxQueryViewerElementElement;
    new (): HTMLGxQueryViewerElementElement;
  };
  interface HTMLGxQueryViewerElementFormatElement
    extends Components.GxQueryViewerElementFormat,
      HTMLStencilElement {}
  var HTMLGxQueryViewerElementFormatElement: {
    prototype: HTMLGxQueryViewerElementFormatElement;
    new (): HTMLGxQueryViewerElementFormatElement;
  };
  interface HTMLGxQueryViewerFormatStyleElement
    extends Components.GxQueryViewerFormatStyle,
      HTMLStencilElement {}
  var HTMLGxQueryViewerFormatStyleElement: {
    prototype: HTMLGxQueryViewerFormatStyleElement;
    new (): HTMLGxQueryViewerFormatStyleElement;
  };
  interface HTMLGxQueryViewerParameterElement
    extends Components.GxQueryViewerParameter,
      HTMLStencilElement {}
  var HTMLGxQueryViewerParameterElement: {
    prototype: HTMLGxQueryViewerParameterElement;
    new (): HTMLGxQueryViewerParameterElement;
  };
  interface HTMLGxRadioGroupElement
    extends Components.GxRadioGroup,
      HTMLStencilElement {}
  var HTMLGxRadioGroupElement: {
    prototype: HTMLGxRadioGroupElement;
    new (): HTMLGxRadioGroupElement;
  };
  interface HTMLGxRadioOptionElement
    extends Components.GxRadioOption,
      HTMLStencilElement {}
  var HTMLGxRadioOptionElement: {
    prototype: HTMLGxRadioOptionElement;
    new (): HTMLGxRadioOptionElement;
  };
  interface HTMLGxRatingElement
    extends Components.GxRating,
      HTMLStencilElement {}
  var HTMLGxRatingElement: {
    prototype: HTMLGxRatingElement;
    new (): HTMLGxRatingElement;
  };
  interface HTMLGxSelectElement
    extends Components.GxSelect,
      HTMLStencilElement {}
  var HTMLGxSelectElement: {
    prototype: HTMLGxSelectElement;
    new (): HTMLGxSelectElement;
  };
  interface HTMLGxSelectOptionElement
    extends Components.GxSelectOption,
      HTMLStencilElement {}
  var HTMLGxSelectOptionElement: {
    prototype: HTMLGxSelectOptionElement;
    new (): HTMLGxSelectOptionElement;
  };
  interface HTMLGxSwitchElement
    extends Components.GxSwitch,
      HTMLStencilElement {}
  var HTMLGxSwitchElement: {
    prototype: HTMLGxSwitchElement;
    new (): HTMLGxSwitchElement;
  };
  interface HTMLGxTabElement extends Components.GxTab, HTMLStencilElement {}
  var HTMLGxTabElement: {
    prototype: HTMLGxTabElement;
    new (): HTMLGxTabElement;
  };
  interface HTMLGxTabCaptionElement
    extends Components.GxTabCaption,
      HTMLStencilElement {}
  var HTMLGxTabCaptionElement: {
    prototype: HTMLGxTabCaptionElement;
    new (): HTMLGxTabCaptionElement;
  };
  interface HTMLGxTabPageElement
    extends Components.GxTabPage,
      HTMLStencilElement {}
  var HTMLGxTabPageElement: {
    prototype: HTMLGxTabPageElement;
    new (): HTMLGxTabPageElement;
  };
  interface HTMLGxTableElement extends Components.GxTable, HTMLStencilElement {}
  var HTMLGxTableElement: {
    prototype: HTMLGxTableElement;
    new (): HTMLGxTableElement;
  };
  interface HTMLGxTableCellElement
    extends Components.GxTableCell,
      HTMLStencilElement {}
  var HTMLGxTableCellElement: {
    prototype: HTMLGxTableCellElement;
    new (): HTMLGxTableCellElement;
  };
  interface HTMLGxTextblockElement
    extends Components.GxTextblock,
      HTMLStencilElement {}
  var HTMLGxTextblockElement: {
    prototype: HTMLGxTextblockElement;
    new (): HTMLGxTextblockElement;
  };
  interface HTMLGxVideoElement extends Components.GxVideo, HTMLStencilElement {}
  var HTMLGxVideoElement: {
    prototype: HTMLGxVideoElement;
    new (): HTMLGxVideoElement;
  };
  interface HTMLElementTagNameMap {
    "gx-action-sheet": HTMLGxActionSheetElement;
    "gx-action-sheet-item": HTMLGxActionSheetItemElement;
    "gx-audio": HTMLGxAudioElement;
    "gx-bootstrap": HTMLGxBootstrapElement;
    "gx-button": HTMLGxButtonElement;
    "gx-canvas": HTMLGxCanvasElement;
    "gx-canvas-cell": HTMLGxCanvasCellElement;
    "gx-card": HTMLGxCardElement;
    "gx-checkbox": HTMLGxCheckboxElement;
    "gx-chronometer": HTMLGxChronometerElement;
    "gx-edit": HTMLGxEditElement;
    "gx-form-field": HTMLGxFormFieldElement;
    "gx-gauge": HTMLGxGaugeElement;
    "gx-gauge-range": HTMLGxGaugeRangeElement;
    "gx-grid-empty-indicator": HTMLGxGridEmptyIndicatorElement;
    "gx-grid-flex": HTMLGxGridFlexElement;
    "gx-grid-fs": HTMLGxGridFsElement;
    "gx-grid-horizontal": HTMLGxGridHorizontalElement;
    "gx-grid-infinite-scroll": HTMLGxGridInfiniteScrollElement;
    "gx-grid-infinite-scroll-content": HTMLGxGridInfiniteScrollContentElement;
    "gx-grid-smart-cell": HTMLGxGridSmartCellElement;
    "gx-grid-smart-css": HTMLGxGridSmartCssElement;
    "gx-group": HTMLGxGroupElement;
    "gx-icon": HTMLGxIconElement;
    "gx-image": HTMLGxImageElement;
    "gx-interactive-image": HTMLGxInteractiveImageElement;
    "gx-layout": HTMLGxLayoutElement;
    "gx-loading": HTMLGxLoadingElement;
    "gx-lottie": HTMLGxLottieElement;
    "gx-map": HTMLGxMapElement;
    "gx-map-line": HTMLGxMapLineElement;
    "gx-map-marker": HTMLGxMapMarkerElement;
    "gx-message": HTMLGxMessageElement;
    "gx-modal": HTMLGxModalElement;
    "gx-navbar": HTMLGxNavbarElement;
    "gx-navbar-item": HTMLGxNavbarItemElement;
    "gx-password-edit": HTMLGxPasswordEditElement;
    "gx-progress-bar": HTMLGxProgressBarElement;
    "gx-query-viewer": HTMLGxQueryViewerElement;
    "gx-query-viewer-element": HTMLGxQueryViewerElementElement;
    "gx-query-viewer-element-format": HTMLGxQueryViewerElementFormatElement;
    "gx-query-viewer-format-style": HTMLGxQueryViewerFormatStyleElement;
    "gx-query-viewer-parameter": HTMLGxQueryViewerParameterElement;
    "gx-radio-group": HTMLGxRadioGroupElement;
    "gx-radio-option": HTMLGxRadioOptionElement;
    "gx-rating": HTMLGxRatingElement;
    "gx-select": HTMLGxSelectElement;
    "gx-select-option": HTMLGxSelectOptionElement;
    "gx-switch": HTMLGxSwitchElement;
    "gx-tab": HTMLGxTabElement;
    "gx-tab-caption": HTMLGxTabCaptionElement;
    "gx-tab-page": HTMLGxTabPageElement;
    "gx-table": HTMLGxTableElement;
    "gx-table-cell": HTMLGxTableCellElement;
    "gx-textblock": HTMLGxTextblockElement;
    "gx-video": HTMLGxVideoElement;
  }
}
declare namespace LocalJSX {
  interface GxActionSheet {
    /**
     * This attribute lets you specify the label for the close button. Important for accessibility.
     */
    closeButtonLabel?: string;
    /**
     * Fired when the action sheet is closed
     */
    onClose?: (event: CustomEvent<any>) => void;
    /**
     * Fired when the action sheet is opened
     */
    onOpen?: (event: CustomEvent<any>) => void;
    /**
     * This attribute lets you specify if the action sheet is opened or closed.
     */
    opened?: boolean;
  }
  interface GxActionSheetItem {
    /**
     * This attribute lets you specify the type of action. `"cancel"` and `"destructive"` are styled differently
     */
    actionType?: "default" | "destructive";
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, gxClick event).
     */
    disabled?: false;
  }
  interface GxAudio {
    /**
     * This attribute lets you specify if the element is disabled.
     */
    disabled?: false;
    /**
     * This attribute is for specifies the src of the audio.
     */
    src?: string;
  }
  interface GxBootstrap {}
  interface GxButton {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event). If a disabled image has been specified, it will be shown, hiding the base image (if specified).
     */
    disabled?: false;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify the relative location of the image to the text.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `above`  | The image is located above the text.                    | | `before` | The image is located before the text, in the same line. | | `after`  | The image is located after the text, in the same line.  | | `below`  | The image is located below the text.                    | | `behind` | The image is located behind the text.                   |
     */
    imagePosition?: "above" | "before" | "after" | "below" | "behind";
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * This attribute lets you specify the size of the button.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `large`  | Large sized button.                                     | | `normal` | Standard sized button.                                  | | `small`  | Small sized button.                                     |
     */
    size?: "large" | "normal" | "small";
  }
  interface GxCanvas {
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Emitted when the element is clicked.
     */
    onGxClick?: (event: CustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped.
     */
    onSwipe?: (event: CustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped downward direction.
     */
    onSwipeDown?: (event: CustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped left direction..
     */
    onSwipeLeft?: (event: CustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped right direction.
     */
    onSwipeRight?: (event: CustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped in upward direction.
     */
    onSwipeUp?: (event: CustomEvent<any>) => void;
  }
  interface GxCanvasCell {
    /**
     * Defines the horizontal aligmnent of the content of the cell.
     */
    align?: "left" | "right" | "center";
    /**
     * This attribute defines how the control behaves when the content overflows.  | Value    | Details                                                     | | -------- | ----------------------------------------------------------- | | `scroll` | The overflowin content is hidden, but scrollbars are shown  | | `clip`   | The overflowing content is hidden, without scrollbars       |
     */
    overflowMode?: "scroll" | "clip";
    /**
     * Defines the vertical aligmnent of the content of the cell.
     */
    valign?: "top" | "bottom" | "medium";
  }
  interface GxCard {
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * True to show the card border. False to hide it.
     */
    showBorder?: true;
    /**
     * True to show the card footer. False to hide it.
     */
    showFooter?: true;
    /**
     * True to show the card header. False to hide it.
     */
    showHeader?: true;
  }
  interface GxCheckbox {
    /**
     * Specifies the label of the checkbox.
     */
    caption?: string;
    /**
     * Indicates that the control is selected by default.
     */
    checked?: boolean;
    /**
     * The value when the checkbox is 'on'
     */
    checkedValue?: string;
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The `input` event is emitted when a change to the element's value is committed by the user.
     */
    onInput?: (event: CustomEvent<any>) => void;
    /**
     * The value when the checkbox is 'off'
     */
    unCheckedValue?: string;
    /**
     * The value of the control.
     */
    value?: string;
  }
  interface GxChronometer {
    /**
     * Defines the interval that the function onTick will be called.
     */
    interval?: 1;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * When the chronometer reaches this value, MaxValueText will be shown instead of the Chronometer value.
     */
    maxValue?: 0;
    /**
     * Text to be displayed when chronometer value reaches maxValue.
     */
    maxValueText?: string;
    /**
     * The `change` event is emitted every time the chronometer changes
     */
    onChange?: (event: CustomEvent<any>) => void;
    /**
     * Event to emit after max time is consumed.
     */
    onEnd?: (event: CustomEvent<any>) => void;
    /**
     * The `input` event is emitted every time the chronometer changes (every 1 second)
     */
    onInput?: (event: CustomEvent<any>) => void;
    /**
     * Event to emit After elapsed time (tickInterval).
     */
    onTick?: (event: CustomEvent<any>) => void;
    /**
     * State of the Chronometer.
     */
    state?: TimerState;
    /**
     * Time unit: (s) seconds or (ms) milliseconds for every time control Property.
     */
    unit?: "s" | "ms";
    /**
     * The value of the control.
     */
    value?: number;
  }
  interface GxEdit {
    /**
     * Allows to specify the role of the element when inside a `gx-form-field` element
     */
    area?: "field";
    /**
     * Specifies the auto-capitalization behavior. Same as [autocapitalize](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#//apple_ref/doc/uid/TP40008058-autocapitalize) attribute for `input` elements. Only supported by Safari and Chrome.
     */
    autocapitalize?: string;
    /**
     * This attribute indicates whether the value of the control can be automatically completed by the browser. Same as [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete) attribute for `input` elements.
     */
    autocomplete?: "on" | "off";
    /**
     * Used to control whether autocorrection should be enabled when the user is entering/editing the text value. Sames as [autocorrect](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocorrect) attribute for `input` elements.
     */
    autocorrect?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * Used to define the semantic of the element when readonly=true.  Font categories are mapped to semantic HTML elements when rendered:  * `"headline"`: `h1` * `"subheadline"`: `h2` * `"body"`: `p` * `"footnote"`: `footer` * `"caption1"`: `span` * `"caption2"`: `span`
     */
    fontCategory?:
      | "headline"
      | "subheadline"
      | "body"
      | "footnote"
      | "caption1"
      | "caption2";
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * True to cut text when it overflows, showing an ellipsis (only applies when readonly)
     */
    lineClamp?: false;
    /**
     * Controls if the element accepts multiline text.
     */
    multiline?: boolean;
    /**
     * The `change` event is emitted when a change to the element's value is committed by the user. Unlike the `input` event, the `change` event is not necessarily fired for each change to an element's value but when the control loses focus.
     */
    onChange?: (event: CustomEvent<any>) => void;
    /**
     * The `gxTriggerClick` event is fired when the trigger button is clicked.
     */
    onGxTriggerClick?: (event: CustomEvent<any>) => void;
    /**
     * The `input` event is fired synchronously when the value is changed.
     */
    onInput?: (event: CustomEvent<any>) => void;
    /**
     * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
     */
    placeholder?: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly?: boolean;
    /**
     * If true, a trigger button is shown next to the edit field. The button can be customized using `trigger-text` and `trigger-class` attributes, or adding a child element with `slot="trigger-content"` attribute to specify the content inside the trigger button.
     */
    showTrigger?: boolean;
    /**
     * The text of the trigger button. If a text is specified and an image is specified (through an element with `slot="trigger-content"`), the content is ignored and the text is used instead.
     */
    triggerText?: string;
    /**
     * The type of control to render. A subset of the types supported by the `input` element is supported:  * `"date"` * `"datetime-local"` * `"email"` * `"file"` * `"number"` * `"password"` * `"search"` * `"tel"` * `"text"` * `"url"`
     */
    type?:
      | "date"
      | "datetime-local"
      | "email"
      | "file"
      | "number"
      | "password"
      | "search"
      | "tel"
      | "text"
      | "url";
    /**
     * The initial value of the control.
     */
    value?: string;
  }
  interface GxFormField {
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The text to set as the label of the field.
     */
    labelCaption?: string;
    /**
     * The position where the label will be located, relative to the edit control. The supported values are:  * `"top"`: The label is located above the edit control. * `"right"`: The label is located at the right side of the edit control. * `"bottom"`: The label is located below the edit control. * `"left"`: The label is located at the left side of the edit control. * `"float"`: The label is shown as a placeholder when the edit control's value is empty. When the value is not empty, the label floats and locates above the edit control. * `"none"`: The label is rendered, but hidden.
     */
    labelPosition?: "none" | "top" | "right" | "bottom" | "left" | "float";
  }
  interface GxGauge {
    /**
     * The maximum value of the gauge. This prop allows specify the maximum value that the gauge will handle. If there is no value specified it will be calculated by the sum of all gx-ranges values
     */
    maxValue?: number;
    /**
     * The minimum value of the gauge 0 by Default
     */
    minValue?: number;
    /**
     * The `gxGaugeDidLoad` event is triggered when the component has been rendered completely.
     */
    onGxGaugeDidLoad?: (event: CustomEvent<any>) => void;
    /**
     * Set `true` to display the minimum and maximum value. Default is `false`.
     */
    showMinMax?: boolean;
    /**
     * Set `true` to display the current value. Default is `false`.
     */
    showValue?: boolean;
    /**
     * Allows specify the width of the circumference _(When gauge is circle type)_ or the width of the bar _(When gauge is Line type)_ in % relative the component size.
     */
    thickness?: number;
    /**
     * This property allows selecting the gauge type. The allowed values are `circle` or `line` (defautl).
     */
    type?: "line" | "circle";
    /**
     * The current value of the gauge
     */
    value?: number;
  }
  interface GxGaugeRange {
    /**
     * The range length.
     */
    amount?: number;
    /**
     * Color property defines the color of range background. Color value can be any valid CSS color.
     */
    color?: string;
    /**
     * The name of the range.
     */
    name?: string;
    /**
     * The gxGaugeRangeDidLoad is triggered when the component has been added and its render completely ran.
     */
    onGxGaugeRangeDidLoad?: (event: CustomEvent<any>) => void;
    /**
     * The gxGaugeRangeDidUnload is triggered when the component has been deleted
     */
    onGxGaugeRangeDidUnload?: (event: CustomEvent<any>) => void;
    /**
     * The gxGaugeRangeDidUpdate is triggered when a property of the component has been changed.
     */
    onGxGaugeRangeDidUpdate?: (event: CustomEvent<any>) => void;
  }
  interface GxGridEmptyIndicator {
    /**
     * Image url to be shown
     */
    image?: "";
    /**
     * A CSS class to set as the inner `image` element class.
     */
    imageClass?: "";
    /**
     * Text to be displayed
     */
    text?: "";
    /**
     * A CSS class to set as the inner `text` element class.
     */
    textClass?: "";
  }
  interface GxGridFlex {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow?: false;
    /**
     * This establishes the main-axis, thus defining the direction flex items are placed in the flex container.  Flexbox is (aside from optional wrapping) a single-direction layout concept.  Think of flex items as primarily laying out either in horizontal rows or vertical columns.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `row` | The flex container's main-axis is defined to be the same as the text direction. The main-start and main-end points are the same as the content direction.                | | `column`   | The flex container's main-axis is the same as the block-axis. The main-start and main-end points are the same as the before and after points of the writing-mode. |
     */
    flexDirection?: "row" | "column";
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Grid loading State. It's purpose is to know rather the Grid Loading animation or the Grid Empty placeholder should be shown.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState?: "loading" | "loaded";
    /**
     * This Handler will be called every time grid threshold is reached. Needed for infinite scrolling grids.
     */
    onGxInfiniteThresholdReached?: (event: CustomEvent<void>) => void;
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders may not work correctly.
     */
    recordCount?: number;
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold?: string;
  }
  interface GxGridFs {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow?: false;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Grid loading State. It's purpose is to know rather the Grid Loading animation or the Grid Empty placeholder should be shown.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState?: "loading" | "loaded";
    /**
     * This Handler will be called every time grid threshold is reached. Needed for infinite scrolling grids.
     */
    onGxInfiniteThresholdReached?: (event: CustomEvent<void>) => void;
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders will not work correctly.
     */
    recordCount?: number;
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold?: string;
  }
  interface GxGridHorizontal {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow?: boolean;
    /**
     * Number of items per column (items visible at the same time on slider's container).
     */
    columns?: number | "auto";
    /**
     * 1-Indexed number of currently active page
     */
    currentPage?: number;
    /**
     * Items layout direction: Could be 'horizontal' or 'vertical' (for vertical slider).
     */
    direction?: "horizontal" | "vertical";
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Set numbers of items to define and enable group sliding. Useful to use with rowsPerPage > 1
     */
    itemsPerGroup?: 1;
    /**
     * Grid loading state. It's purpose is to know whether the grid loading animation or the grid empty placeholder should be shown.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState?: "loading" | "loaded";
    /**
     * Logging level. For troubleshooting component update and initialization.
     */
    logLevel?: "debug" | "off";
    /**
     * Emitted when the user taps/clicks on the slide's container.
     */
    onGxGridClick?: (event: CustomEvent<void>) => void;
    /**
     * Emitted after the active slide has changed.
     */
    onGxGridDidChange?: (event: CustomEvent<number>) => void;
    /**
     * Emitted after Swiper initialization
     */
    onGxGridDidLoad?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the user double taps on the slide's container.
     */
    onGxGridDoubleClick?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the slider is actively being moved.
     */
    onGxGridDrag?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the next slide has ended.
     */
    onGxGridNextEnd?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the next slide has started.
     */
    onGxGridNextStart?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the previous slide has ended.
     */
    onGxGridPrevEnd?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the previous slide has started.
     */
    onGxGridPrevStart?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the slider is at the last slide.
     */
    onGxGridReachEnd?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the slider is at its initial position.
     */
    onGxGridReachStart?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the user releases the touch.
     */
    onGxGridTouchEnd?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the user first touches the slider.
     */
    onGxGridTouchStart?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the slide transition has ended.
     */
    onGxGridTransitionEnd?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the slide transition has started.
     */
    onGxGridTransitionStart?: (event: CustomEvent<void>) => void;
    /**
     * Emitted before the active slide has changed.
     */
    onGxGridWillChange?: (event: CustomEvent<void>) => void;
    /**
     * This Handler will be called every time grid threshold is reached. Needed for infinite scrolling grids.
     */
    onGxInfiniteThresholdReached?: (event: CustomEvent<void>) => void;
    /**
     * Advanced options to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options
     */
    options?: SwiperOptions;
    /**
     * If `true`, show the pagination buttons.
     */
    pager?: true;
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders will not work correctly.
     */
    recordCount?: number;
    /**
     * Number of items per column, for multirow layout.
     */
    rows?: number;
    /**
     * If `true`, show the scrollbar.
     */
    scrollbar?: false;
    /**
     * Set to false to enable slides in free mode position.
     */
    snapToGrid?: true;
  }
  interface GxGridInfiniteScroll {
    /**
     * If `true`, the infinite scroll will be hidden and scroll event listeners will be removed.  Set this to true to disable the infinite scroll from actively trying to receive new data while scrolling. This is useful when it is known that there is no more data that can be added, and the infinite scroll is no longer needed.
     */
    disabled?: boolean;
    /**
     * This property must be bounded to grid item count property. It's unique purpose is to trigger gxInfinite as many times as needed to fullfill the Container space when the intial batch does not overflow the main container
     */
    itemCount?: number;
    /**
     * Emitted when the scroll reaches the threshold distance. From within your infinite handler, you must call the infinite scroll's `complete()` method when your async operation has completed.
     */
    onGxInfinite?: (event: CustomEvent<void>) => void;
    /**
     * The position of the infinite scroll element. The value can be either `top` or `bottom`.
     */
    position?: "top" | "bottom";
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold?: string;
    /**
     * The View Port parent element selector where the infinite component would be attached to and listening to Scroll Events.
     */
    viewportSelector?: string;
  }
  interface GxGridInfiniteScrollContent {}
  interface GxGridSmartCell {
    /**
     * Whether this row is even position or not. This is specially required in Virtual scroll scenarios where the position in the DOM is not the real position in the collection.
     */
    isRowEven?: false;
  }
  interface GxGridSmartCss {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow?: false;
    /**
     * Specifies the direction of the flexible items.
     */
    direction?: "vertical" | "horizontal";
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Grid Item Layout Mode: Single, Multiple by quantity, multiple by size.
     */
    itemLayoutMode?: "single" | "mbyq" | "mbys";
    /**
     * Grid loading State. It's purpose is to know rather the Grid Loading animation or the Grid Empty placeholder should be shown.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState?: "loading" | "loaded";
    /**
     * This Handler will be called every time grid threshold is reached. Needed for infinite scrolling grids.
     */
    onGxInfiniteThresholdReached?: (event: CustomEvent<void>) => void;
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders may not work correctly.
     */
    recordCount?: number;
    /**
     * Scroll snapping allows to lock the viewport to certain elements or locations after a user has finished scrolling
     */
    snapToGrid?: false;
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold?: string;
  }
  interface GxGroup {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow?: boolean;
    /**
     * Attribute that provides the caption to the <legend> tag
     */
    caption?: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
  }
  interface GxIcon {
    /**
     * The color of the icon.
     */
    color?: string;
    /**
     * A label for the icon, for screen readers to use.
     */
    label?: string;
    /**
     * If enabled, the icon will be loaded lazily when it's visible in the viewport.
     */
    lazy?: boolean;
    /**
     * The type of icon. Possible values: the name each of the icons in /assets.
     */
    type?: string;
  }
  interface GxImage {
    /**
     * This attribute lets you specify the alternative text.
     */
    alt?: "";
    /**
     * If true, the component will be sized to match the image's intrinsic size when not constrained via CSS dimension properties (for example, height or width). If false, the component will never force its height to match the image's intrinsic size. The width, however, will match the intrinsic width. In GeneXus terms, it will auto grow horizontally, but not vertically.
     */
    autoGrow?: true;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * This attribute lets you specify the height.
     */
    height?: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * True to lazy load the image, when it enters the viewport.
     */
    lazyLoad?: true;
    /**
     * This attribute lets you specify the low resolution image SRC.
     */
    lowResolutionSrc?: "";
    /**
     * This attribute allows specifing how the image is sized according to its container. `contain`, `cover`, `fill` and `none` map directly to the values of the CSS `object-fit` property. The `tile` value repeats the image, both vertically and horizontally, creating a tile effect.
     */
    scaleType?: "contain" | "cover" | "fill" | "none" | "tile";
    /**
     * This attribute lets you specify the SRC.
     */
    src?: "";
    /**
     * This attribute lets you specify the width.
     */
    width?: string;
  }
  interface GxInteractiveImage {
    /**
     * True/False. If this property is true, the user can zoom in/out on the image.
     */
    enableZoom?: boolean;
    /**
     * Lets you specify the image URL. *Requiered*
     */
    src?: "";
    /**
     * Indicates how much you can enlarge an image. (Percentage) _Note: 100% = Normal size_.
     */
    zoom?: number;
  }
  interface GxLayout {
    /**
     * True to hide the bottom target
     */
    bottomHidden?: false;
    /**
     * True to hide the left target
     */
    leftHidden?: boolean;
    /**
     * Fired when the leftHidden property is changed
     */
    onLeftHiddenChange?: (event: CustomEvent<any>) => void;
    /**
     * Fired when the rightHidden property is changed
     */
    onRightHiddenChange?: (event: CustomEvent<any>) => void;
    /**
     * Fired when the viewport size is less than the vertical targets breakpoint.
     */
    onVerticalTargetsBreakpointMatchChange?: (event: CustomEvent<any>) => void;
    /**
     * True to hide the right target
     */
    rightHidden?: boolean;
    /**
     * True to hide the top target
     */
    topHidden?: false;
  }
  interface GxLoading {
    /**
     * Sets the caption text.
     */
    caption?: string;
    /**
     * Sets the description text.
     */
    description?: string;
    /**
     * Sets if the loading dialog is presented.
     */
    presented?: false;
    /**
     * Sets the value.
     */
    type?: "determinate" | "indeterminate";
    /**
     * Sets the value when type is determinate. Must be a value between 0 and 1.
     */
    value?: 0;
  }
  interface GxLottie {
    /**
     * This attribute lets you specify a Lottie animation object
     */
    animationData?: any;
    /**
     * This attribute lets you specify if the animation will start playing as soon as it is ready
     */
    autoPlay?: boolean;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * This attribute lets you specify if the animation will loop
     */
    loop?: boolean;
    /**
     * Emitted when the animation is loaded in the DOM.
     */
    onAnimationLoad?: (event: CustomEvent<any>) => void;
    /**
     * Emitted when the element is clicked.
     */
    onGxClick?: (event: CustomEvent<any>) => void;
    /**
     * This attribute lets you specify  the relative path to the animation object. (`animationData` and `path` are mutually exclusive)
     */
    path?: string;
  }
  interface GxMap {
    /**
     * The coord of initial center of the map.
     */
    center?: string;
    /**
     * Enable the High Accuracy in user location. _Note: This property applies when ```watchPosition = true```._
     */
    highAccuracyLocator?: boolean;
    /**
     * The map provider. _Note: Currently, this property is for setting a custom map provider using an URL._
     */
    mapProvider?: string;
    /**
     * Map type to be used. _Note: If you set a map provider, the selected map type will be ignored._
     */
    mapType?: "standard" | "satellite" | "hybrid";
    /**
     * The max zoom level available in the map. _Note: 20 is the best value to be used, only lower values are allowed. Is highly recommended to no change this value if you are not sure about the `maxZoom` supported by the map._
     */
    maxZoom?: number;
    /**
     * Emmited when the map is loaded.
     */
    onGxMapDidLoad?: (event: CustomEvent<any>) => void;
    /**
     * Emmited when the map is clicked and return click coords.
     */
    onMapClick?: (event: CustomEvent<any>) => void;
    /**
     * Emmited when the map stops from being moved, if selection layer is active.
     */
    onSelectionChange?: (event: CustomEvent<any>) => void;
    /**
     * Emmited when the map is being moved, if selection layer is active.
     */
    onSelectionInput?: (event: CustomEvent<any>) => void;
    /**
     * Emmited when the user location coords change.
     */
    onUserLocationChange?: (event: CustomEvent<any>) => void;
    /**
     * Enables the possibility to navigate the map and select a location point using the map center.
     */
    selectionLayer?: boolean;
    /**
     * Indicates if the current location of the device is displayed on the map.
     */
    watchPosition?: boolean;
    /**
     * The initial zoom level in the map.
     */
    zoom?: number;
  }
  interface GxMapLine {
    /**
     * The coordinates where the line/polyline will appear in the map.
     */
    coords?: string;
    /**
     * Emmits when the element is deleted from a `<gx-map>`.
     */
    onGxMapLineDeleted?: (event: CustomEvent<any>) => void;
    /**
     * Emmits when the element is added to a `<gx-map>`.
     */
    onGxMapLineDidLoad?: (event: CustomEvent<any>) => void;
  }
  interface GxMapMarker {
    /**
     * The coordinates where the marker will appear in the map.
     */
    coords?: string;
    /**
     * The marker image height.
     */
    iconHeight?: number;
    /**
     * The marker image width.
     */
    iconWidth?: number;
    /**
     * The class that the marker will have.  Set the `background-image` property to use it as icon of the marker.
     */
    markerClass?: string;
    /**
     * Emmits when the element is deleted from a `<gx-map>`.
     */
    onGxMapMarkerDeleted?: (event: CustomEvent<any>) => void;
    /**
     * Emmits when the element is added to a `<gx-map>`.
     */
    onGxMapMarkerDidLoad?: (event: CustomEvent<any>) => void;
    /**
     * Emmits when the element update its data.
     */
    onGxMapMarkerUpdate?: (event: CustomEvent<any>) => void;
    /**
     * The tooltip caption of the marker.
     */
    tooltipCaption?: string;
  }
  interface GxMessage {
    /**
     * Text for the close button.
     */
    closeButtonText?: string;
    /**
     * The time in miliseconds before the message is automatically dismissed. If no duration is specified, the message will not be automatically dismissed.
     */
    duration?: number;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Show a button for closing the meesage box
     */
    showCloseButton?: boolean;
    /**
     * Type of the button: * `info`: Information message * `warning`: Warning Message * `error`: Error message
     */
    type?: "info" | "warning" | "error";
  }
  interface GxModal {
    /**
     * This attribute lets you specify if the modal dialog is automatically closed when an action is clicked.
     */
    autoClose?: boolean;
    /**
     * This attribute lets you specify the label for the close button. Important for accessibility.
     */
    closeButtonLabel?: string;
    /**
     * Fired when the modal dialog is closed
     */
    onClose?: (event: CustomEvent<any>) => void;
    /**
     * Fired when the modal dialog is opened
     */
    onOpen?: (event: CustomEvent<any>) => void;
    /**
     * This attribute lets you specify if the modal dialog is opened or closed.
     */
    opened?: boolean;
    /**
     * This attribute lets you specify if a header is renderd on top of the modal dialog.
     */
    showHeader?: boolean;
  }
  interface GxNavbar {
    /**
     * This attribute lets you specify the label for the low priority actions toggle button. Important for accessibility.
     */
    actionToggleButtonLabel?: string;
    /**
     * This attribute lets you specify the label for the back button.
     */
    backButtonLabel?: string;
    /**
     * This attribute lets you specify an optional title for the navigation bar
     */
    caption?: string;
    /**
     * Fired when the back button is clicked
     */
    onBackButtonClick?: (event: CustomEvent<any>) => void;
    /**
     * Fired when the toggle button is clicked
     */
    onToggleButtonClick?: (event: CustomEvent<any>) => void;
    /**
     * True to show the back button
     */
    showBackButton?: false;
    /**
     * True to show the left target toggle button (a burger icon)
     */
    showToggleButton?: false;
    /**
     * This attribute lets you specify if one or two lines will be used to render the navigation bar. Useful when there are links and also actions, to have links in the first line, and actions in the second
     */
    singleLine?: true;
    /**
     * This attribute lets you specify the label for the left target toggle button. Important for accessibility.
     */
    toggleButtonLabel?: string;
  }
  interface GxNavbarItem {
    /**
     * Indicates if the navbar item is the active one (for example, when the item represents the current page)
     */
    active?: false;
    /**
     * This attribute lets you specify the URL of the navbar item.
     */
    href?: "";
    /**
     * This attribute lets you specify the alternate text for the image specified in iconSrc.
     */
    iconAltText?: "";
    /**
     * This attribute lets you specify the URL of an icon for the navbar item.
     */
    iconSrc?: "";
  }
  interface GxPasswordEdit {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The `change` event is emitted when a change to the element's value is committed by the user. Unlike the `input` event, the `change` event is not necessarily fired for each change to an element's value but when the control loses focus.
     */
    onChange?: (event: CustomEvent<any>) => void;
    /**
     * The `input` event is fired synchronously when the value is changed.
     */
    onInput?: (event: CustomEvent<any>) => void;
    /**
     * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
     */
    placeholder?: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly?: boolean;
    /**
     * Text of the reveal button to offer hiding the password.
     */
    revealButtonTextOff?: string;
    /**
     * Text of the reveal button to offer revealing the password.
     */
    revealButtonTextOn?: string;
    /**
     * Indicates if the value is revealed or masked.
     */
    revealed?: boolean;
    /**
     * If true, a reveal password button is shown next to the password input. Pressing the reveal button toggles the password mask, allowing the user to view the password text.
     */
    showRevealButton?: boolean;
    /**
     * The initial value of the control.
     */
    value?: string;
  }
  interface GxProgressBar {
    /**
     * Sets the progress value.
     */
    value?: number;
  }
  interface GxQueryViewer {
    /**
     * Allowing elements order to change
     */
    allowElementsOrderChange?: boolean;
    /**
     * Allow selection
     */
    allowSelection?: boolean;
    /**
     * Auto refresh group
     */
    autoRefreshGroup?: string;
    /**
     * If type== PivotTable or Table, if true will shrink the table
     */
    autoResize?: boolean;
    /**
     * If autoResize, in here select the type, Width, height, or both
     */
    autoResizeType?: "Both" | "Vertical" | "Horizontal";
    /**
     * Base URL of the server
     */
    baseUrl?: any;
    /**
     * If type == Chart, this is the chart type: Bar, Pie, Timeline, etc...
     */
    chartType?:
      | "Column"
      | "Column3D"
      | "StackedColumn"
      | "StackedColumn3D"
      | "StackedColumn100"
      | "Bar"
      | "StackedBar"
      | "StackedBar100"
      | "Area"
      | "StackedArea"
      | "StackedArea100"
      | "SmoothArea"
      | "StepArea"
      | "Line"
      | "StackedLine"
      | "StackedLine100"
      | "SmoothLine"
      | "StepLine"
      | "Pie"
      | "Pie3D"
      | "Doughnut"
      | "Doughnut3D"
      | "LinearGauge"
      | "CircularGauge"
      | "Radar"
      | "FilledRadar"
      | "PolarArea"
      | "Funnel"
      | "Pyramid"
      | "ColumnLine"
      | "Column3DLine"
      | "Timeline"
      | "SmoothTimeline"
      | "StepTimeline"
      | "Sparkline";
    /**
     * Allowing or not Comlumn sort
     */
    disableColumnSort?: boolean;
    /**
     * Environmet of the project: JAVA. .Net, NetCore
     */
    env?: string;
    /**
     * If type== PivotTable or Table allow to export to HTML
     */
    exportToHTML?: boolean;
    /**
     * If type== PivotTable or Table allow to export to PDF
     */
    exportToPDF?: boolean;
    /**
     * If type== PivotTable or Table allow to export to XLS
     */
    exportToXLS?: boolean;
    /**
     * If type== PivotTable or Table allow to export to XLSX
     */
    exportToXLSX?: boolean;
    /**
     * If type== PivotTable or Table allow to export to XML
     */
    exportToXML?: boolean;
    /**
     * Font Color
     */
    fontColor?: string;
    /**
     * Type of font
     */
    fontFamily?: string;
    /**
     * Font size
     */
    fontSize?: number;
    /**
     * Include max and min
     */
    includeMaxMin?: boolean;
    /**
     * Include spark line
     */
    includeSparkline?: boolean;
    /**
     * If true includes trend on the graph
     */
    includeTrend?: boolean;
    /**
     * True if it is external query
     */
    isExternalQuery?: boolean;
    /**
     * Language of the QueryViewer
     */
    language?: string;
    /**
     * Object of QueryViewer
     */
    object?: string;
    /**
     * Name of the Query or Data provider assigned
     */
    objectName?: string;
    /**
     * Object type -> Query or DataProvider
     */
    objectType?: string;
    /**
     * Orientation of the graph
     */
    orientation?: "Horizontal" | "Vertical";
    /**
     * If paging true, number of items for a single page
     */
    pageSize?: number;
    /**
     * If type == PivotTable or Table, if true there is paging, else everything in one table
     */
    paging?: boolean;
    /**
     * Timeline
     */
    plotSeries?: "InTheSameChart" | "InSeparateCharts";
    /**
     * Title of the QueryViewer
     */
    queryTitle?: string;
    /**
     * For timeline for remembering layout
     */
    rememberLayout?: boolean;
    /**
     * Type of data to show
     */
    showDataAs?: "Values" | "Percentages" | "ValuesAndPercentages";
    /**
     * Ax to show data labels
     */
    showDataLabelsIn?: string;
    /**
     * if true show values on the graph
     */
    showValues?: boolean;
    /**
     * Theme for showing the graph
     */
    theme?: string;
    /**
     * If includeTrend, defines the period of the trend
     */
    trendPeriod?:
      | "SinceTheBeginning"
      | "LastYear"
      | "LastSemester"
      | "LastQuarter"
      | "LastMonth"
      | "LastWeek"
      | "LastDay"
      | "LastHour"
      | "LastMinute"
      | "LastSecond";
    /**
     * Type of the QueryViewer: Table, PivotTable, Chart, Card
     */
    type?: "Card" | "Chart" | "PivotTable" | "Table" | "Default";
    /**
     * if true the x Axes intersect at zero
     */
    xAxisIntersectionAtZero?: boolean;
    /**
     * Labels for XAxis
     */
    xAxisLabels?:
      | "Horizontally"
      | "Rotated30"
      | "Rotated45"
      | "Rotated60"
      | "Vertically";
    /**
     * X Axis title
     */
    xAxisTitle?: string;
    /**
     * Y Axis title
     */
    yAxisTitle?: string;
  }
  interface GxQueryViewerElement {
    /**
     * Aggregation fucntion
     */
    aggregation?: "Sum" | "Average" | "Count" | "Max" | "Min";
    /**
     * Which axis, row or column
     */
    axis?: "Rows" | "Columns" | "Pages";
    /**
     * Axis Order type
     */
    axisOrderType?: "None" | "Ascending" | "Descending" | "Custom";
    /**
     * Axis order values comma separated
     */
    axisOrderValues?: string;
    /**
     * Data field
     */
    dataField?: string;
    /**
     * Title to show
     */
    elementTitle?: string;
    /**
     * Expand collapse type
     */
    expandCollapseType?:
      | "ExpandAllValues"
      | "CollapseAllValues"
      | "ExpandSomeValues";
    /**
     * Expand collapse values comma separated
     */
    expandCollapseValues?: string;
    /**
     * Type of the filter
     */
    filterType?: "ShowAllValues" | "HideAllValues" | "ShowSomeValues";
    /**
     * Filter values comma separated
     */
    filterValues?: string;
    /**
     * Grouping by day of week title
     */
    groupingDayOfWeekTitle?: string;
    /**
     * Grouping by day of week
     */
    groupingGroupByDayOfWeek?: boolean;
    /**
     * Grouping by month
     */
    groupingGroupByMonth?: boolean;
    /**
     * Grouping by Quarter
     */
    groupingGroupByQuarter?: boolean;
    /**
     * Grouping by semester
     */
    groupingGroupBySemester?: boolean;
    /**
     * Grouping by year
     */
    groupingGroupByYear?: boolean;
    /**
     * Grouping hide vale
     */
    groupingHideValue?: boolean;
    /**
     * Grouping by month title
     */
    groupingMonthTitle?: string;
    /**
     * Grouping by Quarter title
     */
    groupingQuarterTitle?: string;
    /**
     * Grouping by Semster title
     */
    groupingSemesterTitle?: string;
    /**
     * Gouping by Year title
     */
    groupingYearTitle?: string;
    /**
     * Name of the element
     */
    name?: string;
    onElementChanged?: (event: CustomEvent<any>) => void;
    /**
     * Raise item click
     */
    raiseItemClick?: boolean;
    /**
     * Type of the element
     */
    type?: "Axis" | "Datum";
    /**
     * How to show it
     */
    visible?: "Always" | "Yes" | "No" | "Never";
  }
  interface GxQueryViewerElementFormat {
    /**
     * If true cand drag to pages
     */
    canDragToPages?: boolean;
    /**
     * Format style
     */
    formatStyle?: string;
    /**
     * Max value
     */
    maximumValue?: string;
    onElementChanged?: (event: CustomEvent<any>) => void;
    /**
     * Format on values
     */
    picture?: string;
    /**
     * How to show subtotals
     */
    subtotals?: "Yes" | "Hidden" | "No";
    /**
     * Target value
     */
    targetValue?: string;
  }
  interface GxQueryViewerFormatStyle {
    /**
     * If Conditional true for applying to row or column
     */
    applyToRowOrColumn?: boolean;
    onElementChanged?: (event: CustomEvent<any>) => void;
    /**
     * If Format the operator of the element
     */
    operator?: "EQ" | "LT" | "GT" | "LE" | "GE" | "NE" | "IN";
    /**
     * Style or Css class
     */
    styleOrClass?: string;
    /**
     * Type of the element Conditional or Format
     */
    type?: "Values" | "Conditional";
    /**
     * If Conditional Value to format
     */
    value?: string;
    /**
     * If format first value
     */
    value1?: string;
    /**
     * If format second value
     */
    value2?: string;
  }
  interface GxQueryViewerParameter {
    /**
     * Name of the parameter
     */
    Name?: string;
    /**
     * Value of the parameter
     */
    Value?: string;
    onParameterValueChanged?: (
      event: CustomEvent<QueryViewerParameterChangedEvent>
    ) => void;
  }
  interface GxRadioGroup {
    /**
     * Specifies how the child `gx-radio-option` will be layed out. It supports two values:  * `horizontal` * `vertical` (default)
     */
    direction?: "horizontal" | "vertical";
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The name that will be set to all the inner inputs of type radio
     */
    name?: string;
    /**
     * The `change` event is emitted when a change to the element's value is committed by the user.
     */
    onChange?: (event: CustomEvent<any>) => void;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly?: boolean;
    /**
     * The initial value of the control. Setting the value automatically selects the corresponding radio option.
     */
    value?: string;
  }
  interface GxRadioOption {
    /**
     * Specifies the label of the radio.
     */
    caption?: string;
    /**
     * Indicates that the control is selected by default.
     */
    checked?: boolean;
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The name of the inner input of type radio
     */
    name?: string;
    /**
     * The `change` event is emitted when a change to the element's value is committed by the user.
     */
    onChange?: (event: CustomEvent<any>) => void;
    /**
     * Emitted when the radio loads.
     */
    onGxRadioDidLoad?: (event: CustomEvent<any>) => void;
    /**
     * Emitted when the radio unloads.
     */
    onGxRadioDidUnload?: (event: CustomEvent<any>) => void;
    /**
     * Emitted when the radio button is selected.
     */
    onGxSelect?: (event: CustomEvent<any>) => void;
    /**
     * The initial value of the control.
     */
    value?: string;
  }
  interface GxRating {
    /**
     * This attribute allows you specify if the element is disabled. If disabled, it will not trigger any user interaction related event (for example, click event).
     */
    disabled?: boolean;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * This porpoerty is required if you want to display a score. >E.g: In a score of 4/5 stars the `maxValue` is `5` and the `value` is `4`
     */
    maxValue?: number;
    /**
     * The 'input' event is emitted when a change to the element's value is committed by the user.
     */
    onInput?: (event: CustomEvent<any>) => void;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements. _Disable by default_
     */
    readonly?: boolean;
    /**
     * The current value displayed by the component.
     */
    value?: number;
  }
  interface GxSelect {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The `input` event is emitted when a change to the element's value is committed by the user.
     */
    onInput?: (event: CustomEvent<any>) => void;
    /**
     * Text that appears in the form control when it has no value set
     */
    placeholder?: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly?: boolean;
    /**
     * Render a text input showing a list of suggested elements.
     */
    suggest?: boolean;
    /**
     * The initial value of the control. Setting the value automatically selects the corresponding option.
     */
    value?: string;
  }
  interface GxSelectOption {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * The `change` event is emitted when a change to the element's value is committed by the user.
     */
    onChange?: (event: CustomEvent<any>) => void;
    /**
     * Emitted when the option is disabled.
     */
    onGxDisable?: (event: CustomEvent<any>) => void;
    /**
     * Emitted when the option is selected.
     */
    onGxSelect?: (event: CustomEvent<any>) => void;
    /**
     * Emitted when the option loads.
     */
    onGxSelectDidLoad?: (event: CustomEvent<any>) => void;
    /**
     * Emitted when the option unloads.
     */
    onGxSelectDidUnload?: (event: CustomEvent<any>) => void;
    /**
     * Indicates that the control is selected by default.
     */
    selected?: boolean;
    /**
     * The initial value of the control.
     */
    value?: string;
  }
  interface GxSwitch {
    /**
     * Attribute that provides the caption to the control.
     */
    caption?: string;
    /**
     * Indicates if switch control is checked by default.
     */
    checked?: boolean;
    /**
     * This attribute allows you specify if the element is disabled. If disabled, it will not trigger any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The 'input' event is emitted when a change to the element's value is committed by the user.
     */
    onInput?: (event: CustomEvent<any>) => void;
    /**
     * The value of the control.
     */
    value?: string;
  }
  interface GxTab {
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Fired when the active tab is changed
     */
    onTabChange?: (event: CustomEvent<any>) => void;
  }
  interface GxTabCaption {
    /**
     * This attribute lets you specify if the tab page is disabled
     */
    disabled?: boolean;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify the relative location of the image to the text.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `above`  | The image is located above the text.                    | | `before` | The image is located before the text, in the same line. | | `after`  | The image is located after the text, in the same line.  | | `below`  | The image is located below the text.                    | | `behind` | The image is located behind the text.                   |
     */
    imagePosition?: "above" | "before" | "after" | "below" | "behind";
    /**
     * Fired when the tab caption is selected
     */
    onTabSelect?: (event: CustomEvent<any>) => void;
    /**
     * This attribute lets you specify if the tab page corresponding to this caption is selected
     */
    selected?: boolean;
  }
  interface GxTabPage {}
  interface GxTable {
    /**
     * Like the `grid-templates-areas` CSS property, this attribute defines a grid template by referencing the names of the areas which are specified with the cells [area attribute](../table-cell/readme.md#area). Repeating the name of an area causes the content to span those cells. A period signifies an empty cell. The syntax itself provides a visualization of the structure of the grid.
     */
    areasTemplate?: string;
    /**
     * Like the `grid-templates-columns` CSS property, this attribute defines the columns of the grid with a space-separated list of values. The values represent the width of column.
     */
    columnsTemplate?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Emitted when the element is swiped.
     */
    onSwipe?: (event: CustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped downward direction.
     */
    onSwipeDown?: (event: CustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped left direction..
     */
    onSwipeLeft?: (event: CustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped right direction.
     */
    onSwipeRight?: (event: CustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped in upward direction.
     */
    onSwipeUp?: (event: CustomEvent<any>) => void;
    /**
     * Like the `grid-templates-rows` CSS property, this attribute defines the rows of the grid with a space-separated list of values. The values represent the height of each row.
     */
    rowsTemplate?: string;
  }
  interface GxTableCell {
    /**
     * Defines the horizontal aligmnent of the content of the cell.
     */
    align?: "left" | "right" | "center";
    /**
     * Like the `grid-area` CSS property, this attribute gives a name to the item, so it can be used from the [areas-template attributes](../table/readme.md#areas-template) of the gx-table element.
     */
    area?: string;
    /**
     * This attribute defines the maximum height of the cell.
     */
    maxHeight?: string;
    /**
     * This attribute defines the minimum height of the cell when its contents are visible. Ignored if its content has `invisible-mode` = `collapse` and is hidden.
     */
    minHeight?: string;
    /**
     * This attribute defines how the control behaves when the content overflows.  | Value    | Details                                                     | | -------- | ----------------------------------------------------------- | | `scroll` | The overflowin content is hidden, but scrollbars are shown  | | `clip`   | The overflowing content is hidden, without scrollbars       |
     */
    overflowMode?: "scroll" | "clip";
    /**
     * True to add a fading overlay on the right and bottom area of the cell to signify that the content is longer than the space allows.
     */
    showContentFade?: false;
    /**
     * Defines the vertical aligmnent of the content of the cell.
     */
    valign?: "top" | "bottom" | "medium";
  }
  interface GxTextblock {
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify an URL. If a URL is specified, the textblock acts as an anchor.
     */
    href?: "";
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * True to cut text when it overflows, showing an ellipsis.
     */
    lineClamp?: false;
  }
  interface GxVideo {
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Emitted when the element is clicked.
     */
    onGxClick?: (event: CustomEvent<any>) => void;
    /**
     * This attribute is for specifies the src of the video.
     */
    src?: string;
  }
  interface IntrinsicElements {
    "gx-action-sheet": GxActionSheet;
    "gx-action-sheet-item": GxActionSheetItem;
    "gx-audio": GxAudio;
    "gx-bootstrap": GxBootstrap;
    "gx-button": GxButton;
    "gx-canvas": GxCanvas;
    "gx-canvas-cell": GxCanvasCell;
    "gx-card": GxCard;
    "gx-checkbox": GxCheckbox;
    "gx-chronometer": GxChronometer;
    "gx-edit": GxEdit;
    "gx-form-field": GxFormField;
    "gx-gauge": GxGauge;
    "gx-gauge-range": GxGaugeRange;
    "gx-grid-empty-indicator": GxGridEmptyIndicator;
    "gx-grid-flex": GxGridFlex;
    "gx-grid-fs": GxGridFs;
    "gx-grid-horizontal": GxGridHorizontal;
    "gx-grid-infinite-scroll": GxGridInfiniteScroll;
    "gx-grid-infinite-scroll-content": GxGridInfiniteScrollContent;
    "gx-grid-smart-cell": GxGridSmartCell;
    "gx-grid-smart-css": GxGridSmartCss;
    "gx-group": GxGroup;
    "gx-icon": GxIcon;
    "gx-image": GxImage;
    "gx-interactive-image": GxInteractiveImage;
    "gx-layout": GxLayout;
    "gx-loading": GxLoading;
    "gx-lottie": GxLottie;
    "gx-map": GxMap;
    "gx-map-line": GxMapLine;
    "gx-map-marker": GxMapMarker;
    "gx-message": GxMessage;
    "gx-modal": GxModal;
    "gx-navbar": GxNavbar;
    "gx-navbar-item": GxNavbarItem;
    "gx-password-edit": GxPasswordEdit;
    "gx-progress-bar": GxProgressBar;
    "gx-query-viewer": GxQueryViewer;
    "gx-query-viewer-element": GxQueryViewerElement;
    "gx-query-viewer-element-format": GxQueryViewerElementFormat;
    "gx-query-viewer-format-style": GxQueryViewerFormatStyle;
    "gx-query-viewer-parameter": GxQueryViewerParameter;
    "gx-radio-group": GxRadioGroup;
    "gx-radio-option": GxRadioOption;
    "gx-rating": GxRating;
    "gx-select": GxSelect;
    "gx-select-option": GxSelectOption;
    "gx-switch": GxSwitch;
    "gx-tab": GxTab;
    "gx-tab-caption": GxTabCaption;
    "gx-tab-page": GxTabPage;
    "gx-table": GxTable;
    "gx-table-cell": GxTableCell;
    "gx-textblock": GxTextblock;
    "gx-video": GxVideo;
  }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      "gx-action-sheet": LocalJSX.GxActionSheet &
        JSXBase.HTMLAttributes<HTMLGxActionSheetElement>;
      "gx-action-sheet-item": LocalJSX.GxActionSheetItem &
        JSXBase.HTMLAttributes<HTMLGxActionSheetItemElement>;
      "gx-audio": LocalJSX.GxAudio & JSXBase.HTMLAttributes<HTMLGxAudioElement>;
      "gx-bootstrap": LocalJSX.GxBootstrap &
        JSXBase.HTMLAttributes<HTMLGxBootstrapElement>;
      "gx-button": LocalJSX.GxButton &
        JSXBase.HTMLAttributes<HTMLGxButtonElement>;
      "gx-canvas": LocalJSX.GxCanvas &
        JSXBase.HTMLAttributes<HTMLGxCanvasElement>;
      "gx-canvas-cell": LocalJSX.GxCanvasCell &
        JSXBase.HTMLAttributes<HTMLGxCanvasCellElement>;
      "gx-card": LocalJSX.GxCard & JSXBase.HTMLAttributes<HTMLGxCardElement>;
      "gx-checkbox": LocalJSX.GxCheckbox &
        JSXBase.HTMLAttributes<HTMLGxCheckboxElement>;
      "gx-chronometer": LocalJSX.GxChronometer &
        JSXBase.HTMLAttributes<HTMLGxChronometerElement>;
      "gx-edit": LocalJSX.GxEdit & JSXBase.HTMLAttributes<HTMLGxEditElement>;
      "gx-form-field": LocalJSX.GxFormField &
        JSXBase.HTMLAttributes<HTMLGxFormFieldElement>;
      "gx-gauge": LocalJSX.GxGauge & JSXBase.HTMLAttributes<HTMLGxGaugeElement>;
      "gx-gauge-range": LocalJSX.GxGaugeRange &
        JSXBase.HTMLAttributes<HTMLGxGaugeRangeElement>;
      "gx-grid-empty-indicator": LocalJSX.GxGridEmptyIndicator &
        JSXBase.HTMLAttributes<HTMLGxGridEmptyIndicatorElement>;
      "gx-grid-flex": LocalJSX.GxGridFlex &
        JSXBase.HTMLAttributes<HTMLGxGridFlexElement>;
      "gx-grid-fs": LocalJSX.GxGridFs &
        JSXBase.HTMLAttributes<HTMLGxGridFsElement>;
      "gx-grid-horizontal": LocalJSX.GxGridHorizontal &
        JSXBase.HTMLAttributes<HTMLGxGridHorizontalElement>;
      "gx-grid-infinite-scroll": LocalJSX.GxGridInfiniteScroll &
        JSXBase.HTMLAttributes<HTMLGxGridInfiniteScrollElement>;
      "gx-grid-infinite-scroll-content": LocalJSX.GxGridInfiniteScrollContent &
        JSXBase.HTMLAttributes<HTMLGxGridInfiniteScrollContentElement>;
      "gx-grid-smart-cell": LocalJSX.GxGridSmartCell &
        JSXBase.HTMLAttributes<HTMLGxGridSmartCellElement>;
      "gx-grid-smart-css": LocalJSX.GxGridSmartCss &
        JSXBase.HTMLAttributes<HTMLGxGridSmartCssElement>;
      "gx-group": LocalJSX.GxGroup & JSXBase.HTMLAttributes<HTMLGxGroupElement>;
      "gx-icon": LocalJSX.GxIcon & JSXBase.HTMLAttributes<HTMLGxIconElement>;
      "gx-image": LocalJSX.GxImage & JSXBase.HTMLAttributes<HTMLGxImageElement>;
      "gx-interactive-image": LocalJSX.GxInteractiveImage &
        JSXBase.HTMLAttributes<HTMLGxInteractiveImageElement>;
      "gx-layout": LocalJSX.GxLayout &
        JSXBase.HTMLAttributes<HTMLGxLayoutElement>;
      "gx-loading": LocalJSX.GxLoading &
        JSXBase.HTMLAttributes<HTMLGxLoadingElement>;
      "gx-lottie": LocalJSX.GxLottie &
        JSXBase.HTMLAttributes<HTMLGxLottieElement>;
      "gx-map": LocalJSX.GxMap & JSXBase.HTMLAttributes<HTMLGxMapElement>;
      "gx-map-line": LocalJSX.GxMapLine &
        JSXBase.HTMLAttributes<HTMLGxMapLineElement>;
      "gx-map-marker": LocalJSX.GxMapMarker &
        JSXBase.HTMLAttributes<HTMLGxMapMarkerElement>;
      "gx-message": LocalJSX.GxMessage &
        JSXBase.HTMLAttributes<HTMLGxMessageElement>;
      "gx-modal": LocalJSX.GxModal & JSXBase.HTMLAttributes<HTMLGxModalElement>;
      "gx-navbar": LocalJSX.GxNavbar &
        JSXBase.HTMLAttributes<HTMLGxNavbarElement>;
      "gx-navbar-item": LocalJSX.GxNavbarItem &
        JSXBase.HTMLAttributes<HTMLGxNavbarItemElement>;
      "gx-password-edit": LocalJSX.GxPasswordEdit &
        JSXBase.HTMLAttributes<HTMLGxPasswordEditElement>;
      "gx-progress-bar": LocalJSX.GxProgressBar &
        JSXBase.HTMLAttributes<HTMLGxProgressBarElement>;
      "gx-query-viewer": LocalJSX.GxQueryViewer &
        JSXBase.HTMLAttributes<HTMLGxQueryViewerElement>;
      "gx-query-viewer-element": LocalJSX.GxQueryViewerElement &
        JSXBase.HTMLAttributes<HTMLGxQueryViewerElementElement>;
      "gx-query-viewer-element-format": LocalJSX.GxQueryViewerElementFormat &
        JSXBase.HTMLAttributes<HTMLGxQueryViewerElementFormatElement>;
      "gx-query-viewer-format-style": LocalJSX.GxQueryViewerFormatStyle &
        JSXBase.HTMLAttributes<HTMLGxQueryViewerFormatStyleElement>;
      "gx-query-viewer-parameter": LocalJSX.GxQueryViewerParameter &
        JSXBase.HTMLAttributes<HTMLGxQueryViewerParameterElement>;
      "gx-radio-group": LocalJSX.GxRadioGroup &
        JSXBase.HTMLAttributes<HTMLGxRadioGroupElement>;
      "gx-radio-option": LocalJSX.GxRadioOption &
        JSXBase.HTMLAttributes<HTMLGxRadioOptionElement>;
      "gx-rating": LocalJSX.GxRating &
        JSXBase.HTMLAttributes<HTMLGxRatingElement>;
      "gx-select": LocalJSX.GxSelect &
        JSXBase.HTMLAttributes<HTMLGxSelectElement>;
      "gx-select-option": LocalJSX.GxSelectOption &
        JSXBase.HTMLAttributes<HTMLGxSelectOptionElement>;
      "gx-switch": LocalJSX.GxSwitch &
        JSXBase.HTMLAttributes<HTMLGxSwitchElement>;
      "gx-tab": LocalJSX.GxTab & JSXBase.HTMLAttributes<HTMLGxTabElement>;
      "gx-tab-caption": LocalJSX.GxTabCaption &
        JSXBase.HTMLAttributes<HTMLGxTabCaptionElement>;
      "gx-tab-page": LocalJSX.GxTabPage &
        JSXBase.HTMLAttributes<HTMLGxTabPageElement>;
      "gx-table": LocalJSX.GxTable & JSXBase.HTMLAttributes<HTMLGxTableElement>;
      "gx-table-cell": LocalJSX.GxTableCell &
        JSXBase.HTMLAttributes<HTMLGxTableCellElement>;
      "gx-textblock": LocalJSX.GxTextblock &
        JSXBase.HTMLAttributes<HTMLGxTextblockElement>;
      "gx-video": LocalJSX.GxVideo & JSXBase.HTMLAttributes<HTMLGxVideoElement>;
    }
  }
}
