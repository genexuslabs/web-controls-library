/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import "@stencil/core";

import { TimerState } from "./components/chronometer/chronometer-timer-state";
import { SwiperOptions } from "swiper";

export namespace Components {
  interface GxButton {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event). If a disabled image has been specified, it will be shown, hiding the base image (if specified).
     */
    disabled: boolean;
    /**
     * This attribute lets you specify the relative location of the image to the text.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `above`  | The image is located above the text.                    | | `before` | The image is located before the text, in the same line. | | `after`  | The image is located after the text, in the same line.  | | `below`  | The image is located below the text.                    | | `behind` | The image is located behind the text.                   |
     */
    imagePosition: "above" | "before" | "after" | "below" | "behind";
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute lets you specify the size of the button.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `large`  | Large sized button.                                     | | `normal` | Standard sized button.                                  | | `small`  | Small sized button.                                     |
     */
    size: "large" | "normal" | "small";
  }
  interface GxButtonAttributes extends StencilHTMLAttributes {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event). If a disabled image has been specified, it will be shown, hiding the base image (if specified).
     */
    disabled?: boolean;
    /**
     * This attribute lets you specify the relative location of the image to the text.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `above`  | The image is located above the text.                    | | `before` | The image is located before the text, in the same line. | | `after`  | The image is located after the text, in the same line.  | | `below`  | The image is located below the text.                    | | `behind` | The image is located behind the text.                   |
     */
    imagePosition?: "above" | "before" | "after" | "below" | "behind";
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Emitted when the element is clicked.
     */
    onOnClick?: (event: CustomEvent) => void;
    /**
     * This attribute lets you specify the size of the button.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `large`  | Large sized button.                                     | | `normal` | Standard sized button.                                  | | `small`  | Small sized button.                                     |
     */
    size?: "large" | "normal" | "small";
  }

  interface GxCanvasCell {
    /**
     * Defines the horizontal aligmnent of the content of the cell.
     */
    align: "left" | "right" | "center";
    /**
     * This attribute defines how the control behaves when the content overflows.  | Value    | Details                                                     | | -------- | ----------------------------------------------------------- | | `scroll` | The overflowin content is hidden, but scrollbars are shown  | | `clip`   | The overflowing content is hidden, without scrollbars       |
     */
    overflowMode: "scroll" | "clip";
    /**
     * Defines the vertical aligmnent of the content of the cell.
     */
    valign: "top" | "bottom" | "medium";
  }
  interface GxCanvasCellAttributes extends StencilHTMLAttributes {
    /**
     * Defines the horizontal aligmnent of the content of the cell.
     */
    align?: "left" | "right" | "center";
    /**
     * This attribute defines how the control behaves when the content overflows.  | Value    | Details                                                     | | -------- | ----------------------------------------------------------- | | `scroll` | The overflowin content is hidden, but scrollbars are shown  | | `clip`   | The overflowing content is hidden, without scrollbars       |
     */
    overflowMode?: "scroll" | "clip";
    /**
     * Defines the vertical aligmnent of the content of the cell.
     */
    valign?: "top" | "bottom" | "medium";
  }

  interface GxCanvas {
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: boolean;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
  }
  interface GxCanvasAttributes extends StencilHTMLAttributes {
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: boolean;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Emitted when the element is clicked.
     */
    onOnClick?: (event: CustomEvent) => void;
  }

  interface GxCard {
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * True to show the card border. False to hide it.
     */
    showBorder: boolean;
    /**
     * True to show the card footer. False to hide it.
     */
    showFooter: boolean;
    /**
     * True to show the card header. False to hide it.
     */
    showHeader: boolean;
  }
  interface GxCardAttributes extends StencilHTMLAttributes {
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * True to show the card border. False to hide it.
     */
    showBorder?: boolean;
    /**
     * True to show the card footer. False to hide it.
     */
    showFooter?: boolean;
    /**
     * True to show the card header. False to hide it.
     */
    showHeader?: boolean;
  }

  interface GxCheckbox {
    /**
     * Specifies the label of the checkbox.
     */
    caption: string;
    /**
     * Indicates that the control is selected by default.
     */
    checked: boolean;
    /**
     * The value when the checkbox is 'on'
     */
    checkedValue: string;
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: boolean;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<string>;
    /**
     * The identifier of the control. Must be unique.
     */
    id: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * The value when the checkbox is 'off'
     */
    unCheckedValue: string;
    /**
     * The value of the control.
     */
    value: string;
  }
  interface GxCheckboxAttributes extends StencilHTMLAttributes {
    /**
     * Specifies the label of the checkbox.
     */
    caption?: string;
    /**
     * Indicates that the control is selected by default.
     */
    checked?: boolean;
    /**
     * The value when the checkbox is 'on'
     */
    checkedValue?: string;
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: boolean;
    /**
     * The identifier of the control. Must be unique.
     */
    id?: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The `input` event is emitted when a change to the element's value is committed by the user.
     */
    onInput?: (event: CustomEvent) => void;
    /**
     * The value when the checkbox is 'off'
     */
    unCheckedValue?: string;
    /**
     * The value of the control.
     */
    value?: string;
  }

  interface GxChronometer {
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<any>;
    /**
     * The identifier of the control. Must be unique.
     */
    id: string;
    /**
     * Defines the interval that the function onTick will be called.
     */
    interval: number;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * When the chronometer reaches this value, MaxValueText will be shown instead of the Chronometer value.
     */
    maxValue: number;
    /**
     * Text to be displayed when chronometer value reaches maxValue.
     */
    maxValueText: string;
    /**
     * Stops and set to 0 the Chronometer.
     */
    reset: () => void;
    /**
     * Starts the Chronometer
     */
    start: () => void;
    /**
     * State of the Chronometer.
     */
    state: TimerState;
    /**
     * Stops the Chronometer
     */
    stop: () => void;
    /**
     * Time unit: (s) seconds or (ms) milliseconds for every time control Property.
     */
    unit: "s" | "ms";
    /**
     * The value of the control.
     */
    value: number;
  }
  interface GxChronometerAttributes extends StencilHTMLAttributes {
    /**
     * The identifier of the control. Must be unique.
     */
    id?: string;
    /**
     * Defines the interval that the function onTick will be called.
     */
    interval?: number;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * When the chronometer reaches this value, MaxValueText will be shown instead of the Chronometer value.
     */
    maxValue?: number;
    /**
     * Text to be displayed when chronometer value reaches maxValue.
     */
    maxValueText?: string;
    /**
     * The `change` event is emitted every time the chronometer changes
     */
    onChange?: (event: CustomEvent) => void;
    /**
     * Event to emit after max time is consumed.
     */
    onEnd?: (event: CustomEvent) => void;
    /**
     * The `input` event is emitted every time the chronometer changes (every 1 second)
     */
    onInput?: (event: CustomEvent) => void;
    /**
     * Event to emit After elapsed time (tickInterval).
     */
    onTick?: (event: CustomEvent) => void;
    /**
     * State of the Chronometer.
     */
    state?: TimerState;
    /**
     * Time unit: (s) seconds or (ms) milliseconds for every time control Property.
     */
    unit?: "s" | "ms";
    /**
     * The value of the control.
     */
    value?: number;
  }

  interface GxEdit {
    area: string;
    /**
     * Specifies the auto-capitalization behavior. Same as [autocapitalize](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#//apple_ref/doc/uid/TP40008058-autocapitalize) attribute for `input` elements. Only supported by Safari and Chrome.
     */
    autocapitalize: string;
    /**
     * This attribute indicates whether the value of the control can be automatically completed by the browser. Same as [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete) attribute for `input` elements.
     */
    autocomplete: "on" | "off";
    /**
     * Used to control whether autocorrection should be enabled when the user is entering/editing the text value. Sames as [autocorrect](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocorrect) attribute for `input` elements.
     */
    autocorrect: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: boolean;
    /**
     * Used to define the semantic of the element when readonly=true.  Font categories are mapped to semantic HTML elements when rendered:  * `"headline"`: `h1` * `"subheadline"`: `h2` * `"body"`: `p` * `"footnote"`: `footer` * `"caption1"`: `span` * `"caption2"`: `span`
     */
    fontCategory:
      | "headline"
      | "subheadline"
      | "body"
      | "footnote"
      | "caption1"
      | "caption2";
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<string>;
    /**
     * The identifier of the control. Must be unique.
     */
    id: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Controls if the element accepts multiline text.
     */
    multiline: boolean;
    /**
     * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
     */
    placeholder: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly: boolean;
    /**
     * If true, a trigger button is shown next to the edit field. The button can be customized using `trigger-text` and `trigger-class` attributes, or adding a child element with `slot="trigger-content"` attribute to specify the content inside the trigger button.
     */
    showTrigger: boolean;
    /**
     * The text of the trigger button. If a text is specified and an image is specified (through an element with `slot="trigger-content"`), the content is ignored and the text is used instead.
     */
    triggerText: string;
    /**
     * The type of control to render. A subset of the types supported by the `input` element is supported:  * `"date"` * `"datetime-local"` * `"email"` * `"file"` * `"number"` * `"password"` * `"search"` * `"tel"` * `"text"` * `"url"`
     */
    type:
      | "date"
      | "datetime-local"
      | "email"
      | "file"
      | "number"
      | "password"
      | "search"
      | "tel"
      | "text"
      | "url";
    /**
     * The initial value of the control.
     */
    value: string;
  }
  interface GxEditAttributes extends StencilHTMLAttributes {
    area?: string;
    /**
     * Specifies the auto-capitalization behavior. Same as [autocapitalize](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#//apple_ref/doc/uid/TP40008058-autocapitalize) attribute for `input` elements. Only supported by Safari and Chrome.
     */
    autocapitalize?: string;
    /**
     * This attribute indicates whether the value of the control can be automatically completed by the browser. Same as [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete) attribute for `input` elements.
     */
    autocomplete?: "on" | "off";
    /**
     * Used to control whether autocorrection should be enabled when the user is entering/editing the text value. Sames as [autocorrect](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocorrect) attribute for `input` elements.
     */
    autocorrect?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: boolean;
    /**
     * Used to define the semantic of the element when readonly=true.  Font categories are mapped to semantic HTML elements when rendered:  * `"headline"`: `h1` * `"subheadline"`: `h2` * `"body"`: `p` * `"footnote"`: `footer` * `"caption1"`: `span` * `"caption2"`: `span`
     */
    fontCategory?:
      | "headline"
      | "subheadline"
      | "body"
      | "footnote"
      | "caption1"
      | "caption2";
    /**
     * The identifier of the control. Must be unique.
     */
    id?: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Controls if the element accepts multiline text.
     */
    multiline?: boolean;
    /**
     * The `change` event is emitted when a change to the element's value is committed by the user. Unlike the `input` event, the `change` event is not necessarily fired for each change to an element's value but when the control loses focus.
     */
    onChange?: (event: CustomEvent) => void;
    /**
     * The `gxTriggerClick` event is fired when the trigger button is clicked.
     */
    onGxTriggerClick?: (event: CustomEvent) => void;
    /**
     * The `input` event is fired synchronously when the value is changed.
     */
    onInput?: (event: CustomEvent) => void;
    /**
     * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
     */
    placeholder?: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly?: boolean;
    /**
     * If true, a trigger button is shown next to the edit field. The button can be customized using `trigger-text` and `trigger-class` attributes, or adding a child element with `slot="trigger-content"` attribute to specify the content inside the trigger button.
     */
    showTrigger?: boolean;
    /**
     * The text of the trigger button. If a text is specified and an image is specified (through an element with `slot="trigger-content"`), the content is ignored and the text is used instead.
     */
    triggerText?: string;
    /**
     * The type of control to render. A subset of the types supported by the `input` element is supported:  * `"date"` * `"datetime-local"` * `"email"` * `"file"` * `"number"` * `"password"` * `"search"` * `"tel"` * `"text"` * `"url"`
     */
    type?:
      | "date"
      | "datetime-local"
      | "email"
      | "file"
      | "number"
      | "password"
      | "search"
      | "tel"
      | "text"
      | "url";
    /**
     * The initial value of the control.
     */
    value?: string;
  }

  interface GxFormField {
    /**
     * The identifier of the control. Must be unique.
     */
    id: string;
    /**
     * The text to set as the label of the field.
     */
    labelCaption: string;
    /**
     * The position where the label will be located, relative to the edit control. The supported values are:  * `"top"`: The label is located above the edit control. * `"right"`: The label is located at the right side of the edit control. * `"bottom"`: The label is located below the edit control. * `"left"`: The label is located at the left side of the edit control. * `"float"`: The label is shown as a placeholder when the edit control's value is empty. When the value is not empty, the label floats and locates above the edit control. * `"none"`: The label is rendered, but hidden.
     */
    labelPosition: "none" | "top" | "right" | "bottom" | "left" | "float";
  }
  interface GxFormFieldAttributes extends StencilHTMLAttributes {
    /**
     * The identifier of the control. Must be unique.
     */
    id?: string;
    /**
     * The text to set as the label of the field.
     */
    labelCaption?: string;
    /**
     * The position where the label will be located, relative to the edit control. The supported values are:  * `"top"`: The label is located above the edit control. * `"right"`: The label is located at the right side of the edit control. * `"bottom"`: The label is located below the edit control. * `"left"`: The label is located at the left side of the edit control. * `"float"`: The label is shown as a placeholder when the edit control's value is empty. When the value is not empty, the label floats and locates above the edit control. * `"none"`: The label is rendered, but hidden.
     */
    labelPosition?: "none" | "top" | "right" | "bottom" | "left" | "float";
  }

  interface GxGridFs {
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Grid loading State. It's purpose is to know rather the Grid Loading animation or the Grid Empty placeholder should be shown.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState: "loading" | "loaded";
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders will not work correctly.
     */
    recordCount: number;
  }
  interface GxGridFsAttributes extends StencilHTMLAttributes {
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Grid loading State. It's purpose is to know rather the Grid Loading animation or the Grid Empty placeholder should be shown.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState?: "loading" | "loaded";
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders will not work correctly.
     */
    recordCount?: number;
  }

  interface GxGridInfiniteScrollContent {}
  interface GxGridInfiniteScrollContentAttributes
    extends StencilHTMLAttributes {}

  interface GxGridInfiniteScroll {
    /**
     * Call `complete()` within the `gxInfinite` output event handler when your async operation has completed. For example, the `loading` state is while the app is performing an asynchronous operation, such as receiving more data from an AJAX request to add more items to a data list. Once the data has been received and UI updated, you then call this method to signify that the loading has completed. This method will change the infinite scroll's state from `loading` to `enabled`.
     */
    complete: () => void;
    /**
     * If `true`, the infinite scroll will be hidden and scroll event listeners will be removed.  Set this to true to disable the infinite scroll from actively trying to receive new data while scrolling. This is useful when it is known that there is no more data that can be added, and the infinite scroll is no longer needed.
     */
    disabled: boolean;
    /**
     * Query selector where the infinitie scroll would be listening to scroll events.
     */
    infiniteScrollContainer: string;
    /**
     * This property must be bounded to grid item count property. It's unique purpose is to trigger gxInfinite as many times as needed to fullfill the Container space when the intial batch does not overflow the main container
     */
    itemCount: number;
    /**
     * The position of the infinite scroll element. The value can be either `top` or `bottom`.
     */
    position: "top" | "bottom";
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold: string;
  }
  interface GxGridInfiniteScrollAttributes extends StencilHTMLAttributes {
    /**
     * If `true`, the infinite scroll will be hidden and scroll event listeners will be removed.  Set this to true to disable the infinite scroll from actively trying to receive new data while scrolling. This is useful when it is known that there is no more data that can be added, and the infinite scroll is no longer needed.
     */
    disabled?: boolean;
    /**
     * Query selector where the infinitie scroll would be listening to scroll events.
     */
    infiniteScrollContainer?: string;
    /**
     * This property must be bounded to grid item count property. It's unique purpose is to trigger gxInfinite as many times as needed to fullfill the Container space when the intial batch does not overflow the main container
     */
    itemCount?: number;
    /**
     * Emitted when the scroll reaches the threshold distance. From within your infinite handler, you must call the infinite scroll's `complete()` method when your async operation has completed.
     */
    onGxInfinite?: (event: CustomEvent<void>) => void;
    /**
     * The position of the infinite scroll element. The value can be either `top` or `bottom`.
     */
    position?: "top" | "bottom";
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold?: string;
  }

  interface GxGridSmart {
    /**
     * Number of items per column (items visible at the same time on slider's container).
     */
    columns: number | "auto";
    /**
     * 0-Indexed number of currently active page
     */
    currentPage: number;
    /**
     * Items layout direction: Could be 'horizontal' or 'vertical' (for vertical slider).
     */
    direction: "horizontal" | "vertical";
    /**
     * Get the index of the current active slide.
     */
    getActiveIndex: () => Promise<number>;
    /**
     * Get the index of the previous slide.
     */
    getPreviousIndex: () => Promise<number>;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Get whether or not the current slide is the last slide.
     */
    isLast: () => Promise<boolean>;
    /**
     * Get whether or not the current slide is the first slide.
     */
    isStart: () => Promise<boolean>;
    /**
     * Set numbers of items to define and enable group sliding. Useful to use with rowsPerPage > 1
     */
    itemsPerGroup: number;
    /**
     * Get the total number of slides.
     */
    length: () => Promise<number>;
    /**
     * Grid loading state. It's purpose is to know whether the grid loading animation or the grid empty placeholder should be shown.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState: "loading" | "loaded";
    /**
     * Advanced options to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options
     */
    options: SwiperOptions;
    /**
     * If `true`, show the pagination buttons.
     */
    pager: boolean;
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders will not work correctly.
     */
    recordCount: number;
    /**
     * Number of items per column, for multirow layout.
     */
    rows: number;
    /**
     * If `true`, show the scrollbar.
     */
    scrollbar: boolean;
    /**
     * Transition to the next slide.
     */
    slideNext: (speed?: number, runCallbacks?: boolean) => Promise<void>;
    /**
     * Transition to the previous slide.
     */
    slidePrev: (speed?: number, runCallbacks?: boolean) => Promise<void>;
    /**
     * Transition to the specified slide.
     */
    slideTo: (
      index: number,
      speed?: number,
      runCallbacks?: boolean
    ) => Promise<void>;
    /**
     * Start auto play.
     */
    startAutoplay: () => Promise<void>;
    /**
     * Stop auto play.
     */
    stopAutoplay: () => Promise<void>;
    /**
     * Lock or unlock the ability to slide to the next slide.
     */
    toggleLockSwipeToNext: (lock: boolean) => Promise<void>;
    /**
     * Lock or unlock the ability to slide to the previous slide.
     */
    toggleLockSwipeToPrev: (lock: boolean) => Promise<void>;
    /**
     * Lock or unlock the ability to slide to the next or previous slide.
     */
    toggleLockSwipes: (lock: boolean) => Promise<void>;
    /**
     * Update the underlying slider implementation. Call this if you've added or removed child slides.
     */
    update: () => Promise<void>;
    /**
     * Force swiper to update its height (when autoHeight is enabled) for the duration equal to 'speed' parameter.
     */
    updateAutoHeight: (speed?: number) => Promise<void>;
  }
  interface GxGridSmartAttributes extends StencilHTMLAttributes {
    /**
     * Number of items per column (items visible at the same time on slider's container).
     */
    columns?: number | "auto";
    /**
     * 0-Indexed number of currently active page
     */
    currentPage?: number;
    /**
     * Items layout direction: Could be 'horizontal' or 'vertical' (for vertical slider).
     */
    direction?: "horizontal" | "vertical";
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Set numbers of items to define and enable group sliding. Useful to use with rowsPerPage > 1
     */
    itemsPerGroup?: number;
    /**
     * Grid loading state. It's purpose is to know whether the grid loading animation or the grid empty placeholder should be shown.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState?: "loading" | "loaded";
    /**
     * Emitted when the user taps/clicks on the slide's container.
     */
    onGxGridClick?: (event: CustomEvent<void>) => void;
    /**
     * Emitted after the active slide has changed.
     */
    onGxGridDidChange?: (event: CustomEvent<number>) => void;
    /**
     * Emitted after Swiper initialization
     */
    onGxGridDidLoad?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the user double taps on the slide's container.
     */
    onGxGridDoubleClick?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the slider is actively being moved.
     */
    onGxGridDrag?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the next slide has ended.
     */
    onGxGridNextEnd?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the next slide has started.
     */
    onGxGridNextStart?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the previous slide has ended.
     */
    onGxGridPrevEnd?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the previous slide has started.
     */
    onGxGridPrevStart?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the slider is at the last slide.
     */
    onGxGridReachEnd?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the slider is at its initial position.
     */
    onGxGridReachStart?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the user releases the touch.
     */
    onGxGridTouchEnd?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the user first touches the slider.
     */
    onGxGridTouchStart?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the slide transition has ended.
     */
    onGxGridTransitionEnd?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the slide transition has started.
     */
    onGxGridTransitionStart?: (event: CustomEvent<void>) => void;
    /**
     * Emitted before the active slide has changed.
     */
    onGxGridWillChange?: (event: CustomEvent<void>) => void;
    /**
     * Advanced options to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options
     */
    options?: SwiperOptions;
    /**
     * If `true`, show the pagination buttons.
     */
    pager?: boolean;
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders will not work correctly.
     */
    recordCount?: number;
    /**
     * Number of items per column, for multirow layout.
     */
    rows?: number;
    /**
     * If `true`, show the scrollbar.
     */
    scrollbar?: boolean;
  }

  interface GxGroup {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow: boolean;
    /**
     * Attribute that provides the caption to the <legend> tag
     */
    caption: string;
  }
  interface GxGroupAttributes extends StencilHTMLAttributes {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow?: boolean;
    /**
     * Attribute that provides the caption to the <legend> tag
     */
    caption?: string;
  }

  interface GxImage {
    /**
     * This attribute lets you specify the alternative text.
     */
    alt: string;
    /**
     * A CSS class to set as the inner element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: boolean;
    /**
     * This attribute lets you specify the height.
     */
    height: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * True to lazy load the image, when it enters the viewport.
     */
    lazyLoad: boolean;
    /**
     * This attribute lets you specify the low resolution image SRC.
     */
    lowResolutionSrc: string;
    /**
     * This attribute allows specifing how the image is sized according to its container. `contain`, `cover`, `fill` and `none` map directly to the values of the CSS `object-fit` property. The `tile` value repeats the image, both vertically and horizontally, creating a tile effect.
     */
    scaleType: "contain" | "cover" | "fill" | "none" | "tile";
    /**
     * This attribute lets you specify the SRC.
     */
    src: string;
    /**
     * This attribute lets you specify the width.
     */
    width: string;
  }
  interface GxImageAttributes extends StencilHTMLAttributes {
    /**
     * This attribute lets you specify the alternative text.
     */
    alt?: string;
    /**
     * A CSS class to set as the inner element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: boolean;
    /**
     * This attribute lets you specify the height.
     */
    height?: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * True to lazy load the image, when it enters the viewport.
     */
    lazyLoad?: boolean;
    /**
     * This attribute lets you specify the low resolution image SRC.
     */
    lowResolutionSrc?: string;
    /**
     * Emitted when the element is clicked.
     */
    onOnClick?: (event: CustomEvent) => void;
    /**
     * This attribute allows specifing how the image is sized according to its container. `contain`, `cover`, `fill` and `none` map directly to the values of the CSS `object-fit` property. The `tile` value repeats the image, both vertically and horizontally, creating a tile effect.
     */
    scaleType?: "contain" | "cover" | "fill" | "none" | "tile";
    /**
     * This attribute lets you specify the SRC.
     */
    src?: string;
    /**
     * This attribute lets you specify the width.
     */
    width?: string;
  }

  interface GxLoading {
    /**
     * Sets the caption text.
     */
    caption: string;
    /**
     * Sets the description text.
     */
    description: string;
    /**
     * Sets if the loading dialog is presented.
     */
    presented: boolean;
    /**
     * Sets the value.
     */
    type: "determinate" | "indeterminate";
    /**
     * Sets the value when type is determinate. Must be a value between 0 and 1.
     */
    value: number;
  }
  interface GxLoadingAttributes extends StencilHTMLAttributes {
    /**
     * Sets the caption text.
     */
    caption?: string;
    /**
     * Sets the description text.
     */
    description?: string;
    /**
     * Sets if the loading dialog is presented.
     */
    presented?: boolean;
    /**
     * Sets the value.
     */
    type?: "determinate" | "indeterminate";
    /**
     * Sets the value when type is determinate. Must be a value between 0 and 1.
     */
    value?: number;
  }

  interface GxLottie {
    /**
     * This attribute lets you specify a Lottie animation object
     */
    animationData: any;
    /**
     * This attribute lets you specify if the animation will start playing as soon as it is ready
     */
    autoPlay: boolean;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: boolean;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute lets you specify if the animation will loop
     */
    loop: boolean;
    /**
     * This attribute lets you specify  the relative path to the animation object. (`animationData` and `path` are mutually exclusive)
     */
    path: string;
    /**
     * Pause the animation
     */
    pause: () => Promise<void>;
    /**
     * Start playing the animation
     */
    play: (from?: number, to?: number) => Promise<void>;
    /**
     * Set the progress of the animation to any point
     */
    setProgress: (progress: number) => Promise<void>;
    /**
     * Stop the animation
     */
    stop: () => Promise<void>;
  }
  interface GxLottieAttributes extends StencilHTMLAttributes {
    /**
     * This attribute lets you specify a Lottie animation object
     */
    animationData?: any;
    /**
     * This attribute lets you specify if the animation will start playing as soon as it is ready
     */
    autoPlay?: boolean;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: boolean;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * This attribute lets you specify if the animation will loop
     */
    loop?: boolean;
    /**
     * Emitted when the animation is loaded in the DOM.
     */
    onAnimationLoad?: (event: CustomEvent) => void;
    /**
     * Emitted when the element is clicked.
     */
    onOnClick?: (event: CustomEvent) => void;
    /**
     * This attribute lets you specify  the relative path to the animation object. (`animationData` and `path` are mutually exclusive)
     */
    path?: string;
  }

  interface GxMapMarker {
    /**
     * The coordinates where the marker will appear in the map.
     */
    coords: string;
    /**
     * The URL of the marker image.  *Note: The image size must be 25 x 41*
     */
    iconSrc: string;
    /**
     * The tooltip caption of the marker.
     */
    tooltipCaption: string;
  }
  interface GxMapMarkerAttributes extends StencilHTMLAttributes {
    /**
     * The coordinates where the marker will appear in the map.
     */
    coords?: string;
    /**
     * The URL of the marker image.  *Note: The image size must be 25 x 41*
     */
    iconSrc?: string;
    /**
     * Emmits when the element is deleted from a `<gx-map>`.
     */
    onGxMapMarkerDeleted?: (event: CustomEvent) => void;
    /**
     * Emmits when the element is added to a `<gx-map>`.
     */
    onGxMapMarkerDidLoad?: (event: CustomEvent) => void;
    /**
     * Emmits when the element update its data.
     */
    onGxMapMarkerUpdate?: (event: CustomEvent) => void;
    /**
     * The tooltip caption of the marker.
     */
    tooltipCaption?: string;
  }

  interface GxMap {
    /**
     * The coord of initial center of the map.
     */
    center: string;
    /**
     * The max zoom level available in the map.
     */
    maxZoom: number;
    /**
     * The initial zoom level in the map.
     */
    zoom: number;
  }
  interface GxMapAttributes extends StencilHTMLAttributes {
    /**
     * The coord of initial center of the map.
     */
    center?: string;
    /**
     * The max zoom level available in the map.
     */
    maxZoom?: number;
    /**
     * Emmits when the map is loaded.
     */
    onGxMapDidLoad?: (event: CustomEvent) => void;
    /**
     * The initial zoom level in the map.
     */
    zoom?: number;
  }

  interface GxMessage {
    /**
     * Text for the close button.
     */
    closeButtonText: string;
    /**
     * The time in miliseconds before the message is automatically dismissed. If no duration is specified, the message will not be automatically dismissed.
     */
    duration: number;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Show a button for closing the meesage box
     */
    showCloseButton: boolean;
    /**
     * Type of the button: * `info`: Information message * `warning`: Warning Message * `error`: Error message
     */
    type: "info" | "warning" | "error";
  }
  interface GxMessageAttributes extends StencilHTMLAttributes {
    /**
     * Text for the close button.
     */
    closeButtonText?: string;
    /**
     * The time in miliseconds before the message is automatically dismissed. If no duration is specified, the message will not be automatically dismissed.
     */
    duration?: number;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Show a button for closing the meesage box
     */
    showCloseButton?: boolean;
    /**
     * Type of the button: * `info`: Information message * `warning`: Warning Message * `error`: Error message
     */
    type?: "info" | "warning" | "error";
  }

  interface GxModal {
    /**
     * This attribute lets you specify if the modal dialog is automatically closed when an action is clicked.
     */
    autoClose: boolean;
    /**
     * This attribute lets you specify the label for the close button. Important for accessibility.
     */
    closeButtonLabel: string;
    /**
     * The identifier of the control. Must be unique.
     */
    id: string;
    /**
     * This attribute lets you specify if the modal dialog is opened or closed.
     */
    opened: boolean;
  }
  interface GxModalAttributes extends StencilHTMLAttributes {
    /**
     * This attribute lets you specify if the modal dialog is automatically closed when an action is clicked.
     */
    autoClose?: boolean;
    /**
     * This attribute lets you specify the label for the close button. Important for accessibility.
     */
    closeButtonLabel?: string;
    /**
     * The identifier of the control. Must be unique.
     */
    id?: string;
    /**
     * Fired when the modal dialog is closed
     */
    onOnClose?: (event: CustomEvent) => void;
    /**
     * Fired when the modal dialog is opened
     */
    onOnOpen?: (event: CustomEvent) => void;
    /**
     * This attribute lets you specify if the modal dialog is opened or closed.
     */
    opened?: boolean;
  }

  interface GxNavbarLink {
    /**
     * Indicates if the navbar item is the active one (for example, when the item represents the current page)
     */
    active: boolean;
    /**
     * A CSS class to set as the inner element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the navbar item is disabled.
     */
    disabled: boolean;
    /**
     * This attribute lets you specify the URL of the navbar item.
     */
    href: string;
    /**
     * This attribute lets you specify the URL of an icon for the navbar item.
     */
    iconSrc: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
  }
  interface GxNavbarLinkAttributes extends StencilHTMLAttributes {
    /**
     * Indicates if the navbar item is the active one (for example, when the item represents the current page)
     */
    active?: boolean;
    /**
     * A CSS class to set as the inner element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the navbar item is disabled.
     */
    disabled?: boolean;
    /**
     * This attribute lets you specify the URL of the navbar item.
     */
    href?: string;
    /**
     * This attribute lets you specify the URL of an icon for the navbar item.
     */
    iconSrc?: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Emitted when the element is clicked.
     */
    onOnClick?: (event: CustomEvent) => void;
  }

  interface GxNavbar {
    /**
     * This attribute lets you specify an optional title for the navigation bar  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    caption: string;
    /**
     * A CSS class to set as the inner element class.
     */
    cssClass: string;
    /**
     * The identifier of the control. Must be unique.
     */
    id: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute lets you specify the label for the toggle button. Important for accessibility.
     */
    toggleButtonLabel: string;
  }
  interface GxNavbarAttributes extends StencilHTMLAttributes {
    /**
     * This attribute lets you specify an optional title for the navigation bar  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    caption?: string;
    /**
     * A CSS class to set as the inner element class.
     */
    cssClass?: string;
    /**
     * The identifier of the control. Must be unique.
     */
    id?: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * This attribute lets you specify the label for the toggle button. Important for accessibility.
     */
    toggleButtonLabel?: string;
  }

  interface GxPasswordEdit {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: boolean;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<any>;
    /**
     * The identifier of the control. Must be unique.
     */
    id: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
     */
    placeholder: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly: boolean;
    /**
     * Text of the reveal button to offer hiding the password.
     */
    revealButtonTextOff: string;
    /**
     * Text of the reveal button to offer revealing the password.
     */
    revealButtonTextOn: string;
    /**
     * Indicates if the value is revealed or masked.
     */
    revealed: boolean;
    /**
     * If true, a reveal password button is shown next to the password input. Pressing the reveal button toggles the password mask, allowing the user to view the password text.
     */
    showRevealButton: boolean;
    /**
     * The initial value of the control.
     */
    value: string;
  }
  interface GxPasswordEditAttributes extends StencilHTMLAttributes {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: boolean;
    /**
     * The identifier of the control. Must be unique.
     */
    id?: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The `change` event is emitted when a change to the element's value is committed by the user. Unlike the `input` event, the `change` event is not necessarily fired for each change to an element's value but when the control loses focus.
     */
    onChange?: (event: CustomEvent) => void;
    /**
     * The `input` event is fired synchronously when the value is changed.
     */
    onInput?: (event: CustomEvent) => void;
    /**
     * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
     */
    placeholder?: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly?: boolean;
    /**
     * Text of the reveal button to offer hiding the password.
     */
    revealButtonTextOff?: string;
    /**
     * Text of the reveal button to offer revealing the password.
     */
    revealButtonTextOn?: string;
    /**
     * Indicates if the value is revealed or masked.
     */
    revealed?: boolean;
    /**
     * If true, a reveal password button is shown next to the password input. Pressing the reveal button toggles the password mask, allowing the user to view the password text.
     */
    showRevealButton?: boolean;
    /**
     * The initial value of the control.
     */
    value?: string;
  }

  interface GxProgressBar {
    /**
     * Sets the progress value.
     */
    value: number;
  }
  interface GxProgressBarAttributes extends StencilHTMLAttributes {
    /**
     * Sets the progress value.
     */
    value?: number;
  }

  interface GxRadioGroup {
    /**
     * Specifies how the child `gx-radio-option` will be layed out. It supports two values:  * `horizontal` * `vertical` (default)
     */
    direction: "horizontal" | "vertical";
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: boolean;
    /**
     * The identifier of the control. Must be unique.
     */
    id: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * The name that will be set to all the inner inputs of type radio
     */
    name: string;
    /**
     * The initial value of the control. Setting the value automatically selects the corresponding radio option.
     */
    value: string;
  }
  interface GxRadioGroupAttributes extends StencilHTMLAttributes {
    /**
     * Specifies how the child `gx-radio-option` will be layed out. It supports two values:  * `horizontal` * `vertical` (default)
     */
    direction?: "horizontal" | "vertical";
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: boolean;
    /**
     * The identifier of the control. Must be unique.
     */
    id?: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The name that will be set to all the inner inputs of type radio
     */
    name?: string;
    /**
     * The `change` event is emitted when a change to the element's value is committed by the user.
     */
    onChange?: (event: CustomEvent) => void;
    /**
     * The initial value of the control. Setting the value automatically selects the corresponding radio option.
     */
    value?: string;
  }

  interface GxRadioOption {
    /**
     * Specifies the label of the radio.
     */
    caption: string;
    /**
     * Indicates that the control is selected by default.
     */
    checked: boolean;
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: boolean;
    /**
     * The identifier of the control. Must be unique.
     */
    id: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * The name of the inner input of type radio
     */
    name: string;
    /**
     * The initial value of the control.
     */
    value: string;
  }
  interface GxRadioOptionAttributes extends StencilHTMLAttributes {
    /**
     * Specifies the label of the radio.
     */
    caption?: string;
    /**
     * Indicates that the control is selected by default.
     */
    checked?: boolean;
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: boolean;
    /**
     * The identifier of the control. Must be unique.
     */
    id?: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The name of the inner input of type radio
     */
    name?: string;
    /**
     * The `change` event is emitted when a change to the element's value is committed by the user.
     */
    onChange?: (event: CustomEvent) => void;
    /**
     * Emitted when the radio loads.
     */
    onGxRadioDidLoad?: (event: CustomEvent) => void;
    /**
     * Emitted when the radio unloads.
     */
    onGxRadioDidUnload?: (event: CustomEvent) => void;
    /**
     * Emitted when the radio button is selected.
     */
    onGxSelect?: (event: CustomEvent) => void;
    /**
     * The initial value of the control.
     */
    value?: string;
  }

  interface GxRating {
    /**
     * This attribute allows you specify if the element is disabled. If disabled, it will not trigger any user interaction related event (for example, click event).
     */
    disabled: boolean;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<string>;
    /**
     * The control id. Must be unique per control!
     */
    id: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * This porpoerty is required if you want to display a score. >E.g: In a score of 4/5 stars the `maxValue` is `5` and the `value` is `4`
     */
    maxValue: number;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements. _Disable by default_
     */
    readonly: boolean;
    /**
     * The current value displayed by the component.
     */
    value: number;
  }
  interface GxRatingAttributes extends StencilHTMLAttributes {
    /**
     * This attribute allows you specify if the element is disabled. If disabled, it will not trigger any user interaction related event (for example, click event).
     */
    disabled?: boolean;
    /**
     * The control id. Must be unique per control!
     */
    id?: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * This porpoerty is required if you want to display a score. >E.g: In a score of 4/5 stars the `maxValue` is `5` and the `value` is `4`
     */
    maxValue?: number;
    /**
     * The 'input' event is emitted when a change to the element's value is committed by the user.
     */
    onInput?: (event: CustomEvent) => void;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements. _Disable by default_
     */
    readonly?: boolean;
    /**
     * The current value displayed by the component.
     */
    value?: number;
  }

  interface GxBootstrap {}
  interface GxBootstrapAttributes extends StencilHTMLAttributes {}

  interface GxSelectOption {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: boolean;
    /**
     * Indicates that the control is selected by default.
     */
    selected: boolean;
    /**
     * The initial value of the control.
     */
    value: string;
  }
  interface GxSelectOptionAttributes extends StencilHTMLAttributes {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: boolean;
    /**
     * The `change` event is emitted when a change to the element's value is committed by the user.
     */
    onChange?: (event: CustomEvent) => void;
    /**
     * Emitted when the option is disabled.
     */
    onGxDisable?: (event: CustomEvent) => void;
    /**
     * Emitted when the option is selected.
     */
    onGxSelect?: (event: CustomEvent) => void;
    /**
     * Emitted when the option loads.
     */
    onGxSelectDidLoad?: (event: CustomEvent) => void;
    /**
     * Emitted when the option unloads.
     */
    onGxSelectDidUnload?: (event: CustomEvent) => void;
    /**
     * Indicates that the control is selected by default.
     */
    selected?: boolean;
    /**
     * The initial value of the control.
     */
    value?: string;
  }

  interface GxSelect {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: boolean;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<string>;
    /**
     * The identifier of the control. Must be unique.
     */
    id: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly: boolean;
    /**
     * The initial value of the control. Setting the value automatically selects the corresponding option.
     */
    value: string;
  }
  interface GxSelectAttributes extends StencilHTMLAttributes {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: boolean;
    /**
     * The identifier of the control. Must be unique.
     */
    id?: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The `input` event is emitted when a change to the element's value is committed by the user.
     */
    onInput?: (event: CustomEvent) => void;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly?: boolean;
    /**
     * The initial value of the control. Setting the value automatically selects the corresponding option.
     */
    value?: string;
  }

  interface GxSwitch {
    /**
     * Attribute that provides the caption to the control.
     */
    caption: string;
    /**
     * Indicates if switch control is checked by default.
     */
    checked: boolean;
    /**
     * This attribute allows you specify if the element is disabled. If disabled, it will not trigger any user interaction related event (for example, click event).
     */
    disabled: boolean;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<string>;
    /**
     * The control id. Must be unique per control!
     */
    id: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    value: string;
  }
  interface GxSwitchAttributes extends StencilHTMLAttributes {
    /**
     * Attribute that provides the caption to the control.
     */
    caption?: string;
    /**
     * Indicates if switch control is checked by default.
     */
    checked?: boolean;
    /**
     * This attribute allows you specify if the element is disabled. If disabled, it will not trigger any user interaction related event (for example, click event).
     */
    disabled?: boolean;
    /**
     * The control id. Must be unique per control!
     */
    id?: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The 'input' event is emitted when a change to the element's value is committed by the user.
     */
    onInput?: (event: CustomEvent) => void;
    value?: string;
  }

  interface GxTabCaption {
    /**
     * This attribute lets you specify if the tab page is disabled
     */
    disabled: false;
    /**
     * This attribute lets you specify if the tab page corresponding to this caption is selected
     */
    selected: false;
  }
  interface GxTabCaptionAttributes extends StencilHTMLAttributes {
    /**
     * This attribute lets you specify if the tab page is disabled
     */
    disabled?: false;
    /**
     * Fired when the tab caption is selected
     */
    onOnTabSelect?: (event: CustomEvent) => void;
    /**
     * This attribute lets you specify if the tab page corresponding to this caption is selected
     */
    selected?: false;
  }

  interface GxTabPage {}
  interface GxTabPageAttributes extends StencilHTMLAttributes {}

  interface GxTab {
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
  }
  interface GxTabAttributes extends StencilHTMLAttributes {
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Fired when the active tab is changed
     */
    onOnTabChange?: (event: CustomEvent) => void;
  }

  interface GxTableCell {
    /**
     * Defines the horizontal aligmnent of the content of the cell.
     */
    align: "left" | "right" | "center";
    /**
     * Like the `grid-area` CSS property, this attribute gives a name to the item, so it can be used from the [areas-template attributes](../table/readme.md#areas-template) of the gx-table element.
     */
    area: string;
    /**
     * This attribute defines how the control behaves when the content overflows.  | Value    | Details                                                     | | -------- | ----------------------------------------------------------- | | `scroll` | The overflowin content is hidden, but scrollbars are shown  | | `clip`   | The overflowing content is hidden, without scrollbars       |
     */
    overflowMode: "scroll" | "clip";
    /**
     * Defines the vertical aligmnent of the content of the cell.
     */
    valign: "top" | "bottom" | "medium";
  }
  interface GxTableCellAttributes extends StencilHTMLAttributes {
    /**
     * Defines the horizontal aligmnent of the content of the cell.
     */
    align?: "left" | "right" | "center";
    /**
     * Like the `grid-area` CSS property, this attribute gives a name to the item, so it can be used from the [areas-template attributes](../table/readme.md#areas-template) of the gx-table element.
     */
    area?: string;
    /**
     * This attribute defines how the control behaves when the content overflows.  | Value    | Details                                                     | | -------- | ----------------------------------------------------------- | | `scroll` | The overflowin content is hidden, but scrollbars are shown  | | `clip`   | The overflowing content is hidden, without scrollbars       |
     */
    overflowMode?: "scroll" | "clip";
    /**
     * Defines the vertical aligmnent of the content of the cell.
     */
    valign?: "top" | "bottom" | "medium";
  }

  interface GxTable {
    /**
     * Like the `grid-templates-areas` CSS property, this attribute defines a grid template by referencing the names of the areas which are specified with the cells [area attribute](../table-cell/readme.md#area). Repeating the name of an area causes the content to span those cells. A period signifies an empty cell. The syntax itself provides a visualization of the structure of the grid.
     */
    areasTemplate: string;
    /**
     * Like the `grid-templates-columns` CSS property, this attribute defines the columns of the grid with a space-separated list of values. The values represent the width of column.
     */
    columnsTemplate: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: boolean;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Like the `grid-templates-rows` CSS property, this attribute defines the rows of the grid with a space-separated list of values. The values represent the height of each row.
     */
    rowsTemplate: string;
  }
  interface GxTableAttributes extends StencilHTMLAttributes {
    /**
     * Like the `grid-templates-areas` CSS property, this attribute defines a grid template by referencing the names of the areas which are specified with the cells [area attribute](../table-cell/readme.md#area). Repeating the name of an area causes the content to span those cells. A period signifies an empty cell. The syntax itself provides a visualization of the structure of the grid.
     */
    areasTemplate?: string;
    /**
     * Like the `grid-templates-columns` CSS property, this attribute defines the columns of the grid with a space-separated list of values. The values represent the width of column.
     */
    columnsTemplate?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: boolean;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Emitted when the element is clicked.
     */
    onOnClick?: (event: CustomEvent) => void;
    /**
     * Like the `grid-templates-rows` CSS property, this attribute defines the rows of the grid with a space-separated list of values. The values represent the height of each row.
     */
    rowsTemplate?: string;
  }

  interface GxTextblock {
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: boolean;
    /**
     * This attribute lets you specify an URL. If a URL is specified, the textblock acts as an anchor.
     */
    href: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
  }
  interface GxTextblockAttributes extends StencilHTMLAttributes {
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: boolean;
    /**
     * This attribute lets you specify an URL. If a URL is specified, the textblock acts as an anchor.
     */
    href?: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Emitted when the element is clicked.
     */
    onOnClick?: (event: CustomEvent) => void;
  }
}

declare global {
  interface StencilElementInterfaces {
    GxButton: Components.GxButton;
    GxCanvasCell: Components.GxCanvasCell;
    GxCanvas: Components.GxCanvas;
    GxCard: Components.GxCard;
    GxCheckbox: Components.GxCheckbox;
    GxChronometer: Components.GxChronometer;
    GxEdit: Components.GxEdit;
    GxFormField: Components.GxFormField;
    GxGridFs: Components.GxGridFs;
    GxGridInfiniteScrollContent: Components.GxGridInfiniteScrollContent;
    GxGridInfiniteScroll: Components.GxGridInfiniteScroll;
    GxGridSmart: Components.GxGridSmart;
    GxGroup: Components.GxGroup;
    GxImage: Components.GxImage;
    GxLoading: Components.GxLoading;
    GxLottie: Components.GxLottie;
    GxMapMarker: Components.GxMapMarker;
    GxMap: Components.GxMap;
    GxMessage: Components.GxMessage;
    GxModal: Components.GxModal;
    GxNavbarLink: Components.GxNavbarLink;
    GxNavbar: Components.GxNavbar;
    GxPasswordEdit: Components.GxPasswordEdit;
    GxProgressBar: Components.GxProgressBar;
    GxRadioGroup: Components.GxRadioGroup;
    GxRadioOption: Components.GxRadioOption;
    GxRating: Components.GxRating;
    GxBootstrap: Components.GxBootstrap;
    GxSelectOption: Components.GxSelectOption;
    GxSelect: Components.GxSelect;
    GxSwitch: Components.GxSwitch;
    GxTabCaption: Components.GxTabCaption;
    GxTabPage: Components.GxTabPage;
    GxTab: Components.GxTab;
    GxTableCell: Components.GxTableCell;
    GxTable: Components.GxTable;
    GxTextblock: Components.GxTextblock;
  }

  interface StencilIntrinsicElements {
    "gx-button": Components.GxButtonAttributes;
    "gx-canvas-cell": Components.GxCanvasCellAttributes;
    "gx-canvas": Components.GxCanvasAttributes;
    "gx-card": Components.GxCardAttributes;
    "gx-checkbox": Components.GxCheckboxAttributes;
    "gx-chronometer": Components.GxChronometerAttributes;
    "gx-edit": Components.GxEditAttributes;
    "gx-form-field": Components.GxFormFieldAttributes;
    "gx-grid-fs": Components.GxGridFsAttributes;
    "gx-grid-infinite-scroll-content": Components.GxGridInfiniteScrollContentAttributes;
    "gx-grid-infinite-scroll": Components.GxGridInfiniteScrollAttributes;
    "gx-grid-smart": Components.GxGridSmartAttributes;
    "gx-group": Components.GxGroupAttributes;
    "gx-image": Components.GxImageAttributes;
    "gx-loading": Components.GxLoadingAttributes;
    "gx-lottie": Components.GxLottieAttributes;
    "gx-map-marker": Components.GxMapMarkerAttributes;
    "gx-map": Components.GxMapAttributes;
    "gx-message": Components.GxMessageAttributes;
    "gx-modal": Components.GxModalAttributes;
    "gx-navbar-link": Components.GxNavbarLinkAttributes;
    "gx-navbar": Components.GxNavbarAttributes;
    "gx-password-edit": Components.GxPasswordEditAttributes;
    "gx-progress-bar": Components.GxProgressBarAttributes;
    "gx-radio-group": Components.GxRadioGroupAttributes;
    "gx-radio-option": Components.GxRadioOptionAttributes;
    "gx-rating": Components.GxRatingAttributes;
    "gx-bootstrap": Components.GxBootstrapAttributes;
    "gx-select-option": Components.GxSelectOptionAttributes;
    "gx-select": Components.GxSelectAttributes;
    "gx-switch": Components.GxSwitchAttributes;
    "gx-tab-caption": Components.GxTabCaptionAttributes;
    "gx-tab-page": Components.GxTabPageAttributes;
    "gx-tab": Components.GxTabAttributes;
    "gx-table-cell": Components.GxTableCellAttributes;
    "gx-table": Components.GxTableAttributes;
    "gx-textblock": Components.GxTextblockAttributes;
  }

  interface HTMLGxButtonElement
    extends Components.GxButton,
      HTMLStencilElement {}
  var HTMLGxButtonElement: {
    prototype: HTMLGxButtonElement;
    new (): HTMLGxButtonElement;
  };

  interface HTMLGxCanvasCellElement
    extends Components.GxCanvasCell,
      HTMLStencilElement {}
  var HTMLGxCanvasCellElement: {
    prototype: HTMLGxCanvasCellElement;
    new (): HTMLGxCanvasCellElement;
  };

  interface HTMLGxCanvasElement
    extends Components.GxCanvas,
      HTMLStencilElement {}
  var HTMLGxCanvasElement: {
    prototype: HTMLGxCanvasElement;
    new (): HTMLGxCanvasElement;
  };

  interface HTMLGxCardElement extends Components.GxCard, HTMLStencilElement {}
  var HTMLGxCardElement: {
    prototype: HTMLGxCardElement;
    new (): HTMLGxCardElement;
  };

  interface HTMLGxCheckboxElement
    extends Components.GxCheckbox,
      HTMLStencilElement {}
  var HTMLGxCheckboxElement: {
    prototype: HTMLGxCheckboxElement;
    new (): HTMLGxCheckboxElement;
  };

  interface HTMLGxChronometerElement
    extends Components.GxChronometer,
      HTMLStencilElement {}
  var HTMLGxChronometerElement: {
    prototype: HTMLGxChronometerElement;
    new (): HTMLGxChronometerElement;
  };

  interface HTMLGxEditElement extends Components.GxEdit, HTMLStencilElement {}
  var HTMLGxEditElement: {
    prototype: HTMLGxEditElement;
    new (): HTMLGxEditElement;
  };

  interface HTMLGxFormFieldElement
    extends Components.GxFormField,
      HTMLStencilElement {}
  var HTMLGxFormFieldElement: {
    prototype: HTMLGxFormFieldElement;
    new (): HTMLGxFormFieldElement;
  };

  interface HTMLGxGridFsElement
    extends Components.GxGridFs,
      HTMLStencilElement {}
  var HTMLGxGridFsElement: {
    prototype: HTMLGxGridFsElement;
    new (): HTMLGxGridFsElement;
  };

  interface HTMLGxGridInfiniteScrollContentElement
    extends Components.GxGridInfiniteScrollContent,
      HTMLStencilElement {}
  var HTMLGxGridInfiniteScrollContentElement: {
    prototype: HTMLGxGridInfiniteScrollContentElement;
    new (): HTMLGxGridInfiniteScrollContentElement;
  };

  interface HTMLGxGridInfiniteScrollElement
    extends Components.GxGridInfiniteScroll,
      HTMLStencilElement {}
  var HTMLGxGridInfiniteScrollElement: {
    prototype: HTMLGxGridInfiniteScrollElement;
    new (): HTMLGxGridInfiniteScrollElement;
  };

  interface HTMLGxGridSmartElement
    extends Components.GxGridSmart,
      HTMLStencilElement {}
  var HTMLGxGridSmartElement: {
    prototype: HTMLGxGridSmartElement;
    new (): HTMLGxGridSmartElement;
  };

  interface HTMLGxGroupElement extends Components.GxGroup, HTMLStencilElement {}
  var HTMLGxGroupElement: {
    prototype: HTMLGxGroupElement;
    new (): HTMLGxGroupElement;
  };

  interface HTMLGxImageElement extends Components.GxImage, HTMLStencilElement {}
  var HTMLGxImageElement: {
    prototype: HTMLGxImageElement;
    new (): HTMLGxImageElement;
  };

  interface HTMLGxLoadingElement
    extends Components.GxLoading,
      HTMLStencilElement {}
  var HTMLGxLoadingElement: {
    prototype: HTMLGxLoadingElement;
    new (): HTMLGxLoadingElement;
  };

  interface HTMLGxLottieElement
    extends Components.GxLottie,
      HTMLStencilElement {}
  var HTMLGxLottieElement: {
    prototype: HTMLGxLottieElement;
    new (): HTMLGxLottieElement;
  };

  interface HTMLGxMapMarkerElement
    extends Components.GxMapMarker,
      HTMLStencilElement {}
  var HTMLGxMapMarkerElement: {
    prototype: HTMLGxMapMarkerElement;
    new (): HTMLGxMapMarkerElement;
  };

  interface HTMLGxMapElement extends Components.GxMap, HTMLStencilElement {}
  var HTMLGxMapElement: {
    prototype: HTMLGxMapElement;
    new (): HTMLGxMapElement;
  };

  interface HTMLGxMessageElement
    extends Components.GxMessage,
      HTMLStencilElement {}
  var HTMLGxMessageElement: {
    prototype: HTMLGxMessageElement;
    new (): HTMLGxMessageElement;
  };

  interface HTMLGxModalElement extends Components.GxModal, HTMLStencilElement {}
  var HTMLGxModalElement: {
    prototype: HTMLGxModalElement;
    new (): HTMLGxModalElement;
  };

  interface HTMLGxNavbarLinkElement
    extends Components.GxNavbarLink,
      HTMLStencilElement {}
  var HTMLGxNavbarLinkElement: {
    prototype: HTMLGxNavbarLinkElement;
    new (): HTMLGxNavbarLinkElement;
  };

  interface HTMLGxNavbarElement
    extends Components.GxNavbar,
      HTMLStencilElement {}
  var HTMLGxNavbarElement: {
    prototype: HTMLGxNavbarElement;
    new (): HTMLGxNavbarElement;
  };

  interface HTMLGxPasswordEditElement
    extends Components.GxPasswordEdit,
      HTMLStencilElement {}
  var HTMLGxPasswordEditElement: {
    prototype: HTMLGxPasswordEditElement;
    new (): HTMLGxPasswordEditElement;
  };

  interface HTMLGxProgressBarElement
    extends Components.GxProgressBar,
      HTMLStencilElement {}
  var HTMLGxProgressBarElement: {
    prototype: HTMLGxProgressBarElement;
    new (): HTMLGxProgressBarElement;
  };

  interface HTMLGxRadioGroupElement
    extends Components.GxRadioGroup,
      HTMLStencilElement {}
  var HTMLGxRadioGroupElement: {
    prototype: HTMLGxRadioGroupElement;
    new (): HTMLGxRadioGroupElement;
  };

  interface HTMLGxRadioOptionElement
    extends Components.GxRadioOption,
      HTMLStencilElement {}
  var HTMLGxRadioOptionElement: {
    prototype: HTMLGxRadioOptionElement;
    new (): HTMLGxRadioOptionElement;
  };

  interface HTMLGxRatingElement
    extends Components.GxRating,
      HTMLStencilElement {}
  var HTMLGxRatingElement: {
    prototype: HTMLGxRatingElement;
    new (): HTMLGxRatingElement;
  };

  interface HTMLGxBootstrapElement
    extends Components.GxBootstrap,
      HTMLStencilElement {}
  var HTMLGxBootstrapElement: {
    prototype: HTMLGxBootstrapElement;
    new (): HTMLGxBootstrapElement;
  };

  interface HTMLGxSelectOptionElement
    extends Components.GxSelectOption,
      HTMLStencilElement {}
  var HTMLGxSelectOptionElement: {
    prototype: HTMLGxSelectOptionElement;
    new (): HTMLGxSelectOptionElement;
  };

  interface HTMLGxSelectElement
    extends Components.GxSelect,
      HTMLStencilElement {}
  var HTMLGxSelectElement: {
    prototype: HTMLGxSelectElement;
    new (): HTMLGxSelectElement;
  };

  interface HTMLGxSwitchElement
    extends Components.GxSwitch,
      HTMLStencilElement {}
  var HTMLGxSwitchElement: {
    prototype: HTMLGxSwitchElement;
    new (): HTMLGxSwitchElement;
  };

  interface HTMLGxTabCaptionElement
    extends Components.GxTabCaption,
      HTMLStencilElement {}
  var HTMLGxTabCaptionElement: {
    prototype: HTMLGxTabCaptionElement;
    new (): HTMLGxTabCaptionElement;
  };

  interface HTMLGxTabPageElement
    extends Components.GxTabPage,
      HTMLStencilElement {}
  var HTMLGxTabPageElement: {
    prototype: HTMLGxTabPageElement;
    new (): HTMLGxTabPageElement;
  };

  interface HTMLGxTabElement extends Components.GxTab, HTMLStencilElement {}
  var HTMLGxTabElement: {
    prototype: HTMLGxTabElement;
    new (): HTMLGxTabElement;
  };

  interface HTMLGxTableCellElement
    extends Components.GxTableCell,
      HTMLStencilElement {}
  var HTMLGxTableCellElement: {
    prototype: HTMLGxTableCellElement;
    new (): HTMLGxTableCellElement;
  };

  interface HTMLGxTableElement extends Components.GxTable, HTMLStencilElement {}
  var HTMLGxTableElement: {
    prototype: HTMLGxTableElement;
    new (): HTMLGxTableElement;
  };

  interface HTMLGxTextblockElement
    extends Components.GxTextblock,
      HTMLStencilElement {}
  var HTMLGxTextblockElement: {
    prototype: HTMLGxTextblockElement;
    new (): HTMLGxTextblockElement;
  };

  interface HTMLElementTagNameMap {
    "gx-button": HTMLGxButtonElement;
    "gx-canvas-cell": HTMLGxCanvasCellElement;
    "gx-canvas": HTMLGxCanvasElement;
    "gx-card": HTMLGxCardElement;
    "gx-checkbox": HTMLGxCheckboxElement;
    "gx-chronometer": HTMLGxChronometerElement;
    "gx-edit": HTMLGxEditElement;
    "gx-form-field": HTMLGxFormFieldElement;
    "gx-grid-fs": HTMLGxGridFsElement;
    "gx-grid-infinite-scroll-content": HTMLGxGridInfiniteScrollContentElement;
    "gx-grid-infinite-scroll": HTMLGxGridInfiniteScrollElement;
    "gx-grid-smart": HTMLGxGridSmartElement;
    "gx-group": HTMLGxGroupElement;
    "gx-image": HTMLGxImageElement;
    "gx-loading": HTMLGxLoadingElement;
    "gx-lottie": HTMLGxLottieElement;
    "gx-map-marker": HTMLGxMapMarkerElement;
    "gx-map": HTMLGxMapElement;
    "gx-message": HTMLGxMessageElement;
    "gx-modal": HTMLGxModalElement;
    "gx-navbar-link": HTMLGxNavbarLinkElement;
    "gx-navbar": HTMLGxNavbarElement;
    "gx-password-edit": HTMLGxPasswordEditElement;
    "gx-progress-bar": HTMLGxProgressBarElement;
    "gx-radio-group": HTMLGxRadioGroupElement;
    "gx-radio-option": HTMLGxRadioOptionElement;
    "gx-rating": HTMLGxRatingElement;
    "gx-bootstrap": HTMLGxBootstrapElement;
    "gx-select-option": HTMLGxSelectOptionElement;
    "gx-select": HTMLGxSelectElement;
    "gx-switch": HTMLGxSwitchElement;
    "gx-tab-caption": HTMLGxTabCaptionElement;
    "gx-tab-page": HTMLGxTabPageElement;
    "gx-tab": HTMLGxTabElement;
    "gx-table-cell": HTMLGxTableCellElement;
    "gx-table": HTMLGxTableElement;
    "gx-textblock": HTMLGxTextblockElement;
  }

  interface ElementTagNameMap {
    "gx-button": HTMLGxButtonElement;
    "gx-canvas-cell": HTMLGxCanvasCellElement;
    "gx-canvas": HTMLGxCanvasElement;
    "gx-card": HTMLGxCardElement;
    "gx-checkbox": HTMLGxCheckboxElement;
    "gx-chronometer": HTMLGxChronometerElement;
    "gx-edit": HTMLGxEditElement;
    "gx-form-field": HTMLGxFormFieldElement;
    "gx-grid-fs": HTMLGxGridFsElement;
    "gx-grid-infinite-scroll-content": HTMLGxGridInfiniteScrollContentElement;
    "gx-grid-infinite-scroll": HTMLGxGridInfiniteScrollElement;
    "gx-grid-smart": HTMLGxGridSmartElement;
    "gx-group": HTMLGxGroupElement;
    "gx-image": HTMLGxImageElement;
    "gx-loading": HTMLGxLoadingElement;
    "gx-lottie": HTMLGxLottieElement;
    "gx-map-marker": HTMLGxMapMarkerElement;
    "gx-map": HTMLGxMapElement;
    "gx-message": HTMLGxMessageElement;
    "gx-modal": HTMLGxModalElement;
    "gx-navbar-link": HTMLGxNavbarLinkElement;
    "gx-navbar": HTMLGxNavbarElement;
    "gx-password-edit": HTMLGxPasswordEditElement;
    "gx-progress-bar": HTMLGxProgressBarElement;
    "gx-radio-group": HTMLGxRadioGroupElement;
    "gx-radio-option": HTMLGxRadioOptionElement;
    "gx-rating": HTMLGxRatingElement;
    "gx-bootstrap": HTMLGxBootstrapElement;
    "gx-select-option": HTMLGxSelectOptionElement;
    "gx-select": HTMLGxSelectElement;
    "gx-switch": HTMLGxSwitchElement;
    "gx-tab-caption": HTMLGxTabCaptionElement;
    "gx-tab-page": HTMLGxTabPageElement;
    "gx-tab": HTMLGxTabElement;
    "gx-table-cell": HTMLGxTableCellElement;
    "gx-table": HTMLGxTableElement;
    "gx-textblock": HTMLGxTextblockElement;
  }

  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}
}
