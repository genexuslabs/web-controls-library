/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { TimerState } from "./components/chronometer/chronometer-timer-state";
import {
  EditType,
  FlexDirection,
  FlexWrap,
  FontCategory
} from "./common/types";
import { SwiperOptions } from "swiper";
import {
  AnnotationsChangeEvent,
  ImageAnnotationLine,
  ImageAnnotationText
} from "./components/image-annotations/image-annotations";
import { GridMapElement, LayoutSize } from "./components/common/interfaces";
export namespace Components {
  interface GxActionSheet {
    /**
     * This attribute lets you specify the label for the close button. Important for accessibility.
     */
    closeButtonLabel: string;
    /**
     * This attribute lets you specify if the action sheet is opened or closed.
     */
    opened: boolean;
  }
  interface GxActionSheetItem {
    /**
     * This attribute lets you specify the type of action. `"cancel"` and `"destructive"` are styled differently
     */
    actionType: "default" | "destructive";
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, gxClick event).
     */
    disabled: false;
  }
  interface GxAudio {
    /**
     * This attribute lets you specify if the element is disabled.
     */
    disabled: false;
    /**
     * This attribute is for specifies the src of the audio.
     */
    src: string;
  }
  interface GxButton {
    /**
     * A CSS class to set as the `gx-button` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event). If a disabled image has been specified, it will be shown, hiding the base image (if specified).
     */
    disabled: false;
    /**
     * This attribute lets you specify the height.
     */
    height: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: true;
    /**
     * This attribute lets you specify the relative location of the image to the text.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `above`  | The image is located above the text.                    | | `before` | The image is located before the text, in the same line. | | `after`  | The image is located after the text, in the same line.  | | `below`  | The image is located below the text.                    | | `behind` | The image is located behind the text.                   |
     */
    imagePosition: "above" | "before" | "after" | "below" | "behind";
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute lets you specify the width.
     */
    width: string;
  }
  interface GxCanvas {
    /**
     * A CSS class to set as the `gx-canvas` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: boolean;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute defines when the layout has been fully loaded. Useful for determining if the canvas control can set the auto-grow mechanism
     */
    layoutIsReady: boolean;
    /**
     * This attribute defines the minimum height of the cell when its contents are visible.
     */
    minHeight: string;
    /**
     * This attribute lets you specify the width of the control.
     */
    width: string;
  }
  interface GxCanvasCell {
    /**
     * Defines the horizontal alignment of the content of the cell.
     */
    align: "left" | "right" | "center";
    /**
     * Defines the left position of the control which is relative to the position of its `gx-canvas` container. This attribute maps directly to the `left` CSS property.
     */
    left: string;
    /**
     * This attribute defines the maximum height of the cell.
     */
    maxHeight: string;
    /**
     * This attribute defines the minimum height of the cell.
     */
    minHeight: string;
    /**
     * Defines the top position of the control which is relative to the position of its `gx-canvas` container. This attribute maps directly to the `top` CSS property.
     */
    top: string;
    /**
     * Defines the vertical alignment of the content of the cell.
     */
    valign: "top" | "bottom" | "middle";
    /**
     * This attribute lets you specify the width of the control.
     */
    width: string;
  }
  interface GxCard {
    /**
     * True to show the card header. False to hide it.
     */
    showHeader: true;
  }
  interface GxCardHeader {
    /**
     * This attribute lets you specify the label for the low priority actions toggle button. Important for accessibility.
     */
    actionToggleButtonLabel: string;
    /**
     * A CSS class to set for the header and footer element classes of the `gx-card` control.
     */
    cssClass: string;
  }
  interface GxCheckbox {
    /**
     * Specifies the label of the checkbox.
     */
    caption: string;
    /**
     * Indicates that the control is selected by default.
     */
    checked: boolean;
    /**
     * The value when the checkbox is 'on'
     */
    checkedValue: string;
    /**
     * A CSS class to set as the `gx-checkbox` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<string>;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly: false;
    /**
     * The value when the checkbox is 'off'
     */
    unCheckedValue: string;
    /**
     * The value of the control.
     */
    value: string;
  }
  interface GxChronometer {
    /**
     * A CSS class to set as the `gx-chronometer` element class.
     */
    cssClass: string;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<HTMLGxChronometerElement>;
    /**
     * Defines the interval that the function onTick will be called.
     */
    interval: number;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * When the chronometer reaches this value, MaxValueText will be shown instead of the Chronometer value.
     */
    maxValue: number;
    /**
     * Text to be displayed when chronometer value reaches maxValue.
     */
    maxValueText: string;
    /**
     * Stops and set to 0 the Chronometer.
     */
    reset: () => Promise<void>;
    /**
     * Starts the Chronometer
     */
    start: () => Promise<void>;
    /**
     * State of the Chronometer.
     */
    state: TimerState;
    /**
     * Stops the Chronometer
     */
    stop: () => Promise<void>;
    /**
     * Time unit: (s) seconds or (ms) milliseconds for every time control Property.
     */
    unit: "s" | "ms";
    /**
     * The value of the control.
     */
    value: number;
  }
  interface GxDynamicForm {
    /**
     * This attribute let you specify the elements, rules and conditions of the dynamic form. Must be a JSON string, based on DynamicForm SDT
     */
    elements: string;
    /**
     * A css class to set to attributes when a error occurs
     */
    errorCssClass: string;
    /**
     * A css class to set to attributes
     */
    inputCssClass: string;
    /**
     * This attribute let you specify if the dynamic form is readonly
     */
    readonly: boolean;
    /**
     * This attribute let you specify if this dynamic form is a subgroup of another dynamic form
     */
    subgroup: boolean;
    /**
     * A css class to set to attributes when a warning occurs
     */
    warningCssClass: string;
  }
  interface GxEdit {
    /**
     * Allows to specify the role of the element when inside a `gx-form-field` element
     */
    area: "field";
    /**
     * Specifies the auto-capitalization behavior. Same as [autocapitalize](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#//apple_ref/doc/uid/TP40008058-autocapitalize) attribute for `input` elements. Only supported by Safari and Chrome.
     */
    autocapitalize: string;
    /**
     * This attribute indicates whether the value of the control can be automatically completed by the browser. Same as [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete) attribute for `input` elements.
     */
    autocomplete: "on" | "off";
    /**
     * Used to control whether autocorrection should be enabled when the user is entering/editing the text value. Sames as [autocorrect](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocorrect) attribute for `input` elements.
     */
    autocorrect: string;
    /**
     * A CSS class to set as the `gx-edit` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * Used to define the semantic of the element when `readonly="true"`.
     */
    fontCategory: FontCategory;
    /**
     * It specifies the format that will have the edit control.  If `format` = `HTML`, the edit control works as an HTML div and the innerHTML will be the same as the `inner` property specifies. Also, it does not allow any input/editable UI since it works as an HTML div.  If `format` = `Text`, the edit control works as a normal input control and it is affected by most of the defined properties.
     */
    format: "Text" | "HTML";
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<string>;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: boolean;
    /**
     * The text to set as the label of the gx-edit control.
     */
    labelCaption: string;
    /**
     * True to cut text when it overflows, showing an ellipsis (only applies when readonly)
     */
    lineClamp: false;
    /**
     * Controls if the element accepts multiline text.
     */
    multiline: boolean;
    /**
     * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
     */
    placeholder: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly: boolean;
    /**
     * If true, a trigger button is shown next to the edit field. The button can be customized adding a child element with `slot="trigger-content"` attribute to specify the content inside the trigger button.
     */
    showTrigger: boolean;
    /**
     * This attribute lets you specify the label for the trigger button. Important for accessibility.
     */
    triggerButtonLabel: string;
    /**
     * The type of control to render. A subset of the types supported by the `input` element is supported:  * `"date"` * `"datetime-local"` * `"email"` * `"file"` * `"number"` * `"password"` * `"search"` * `"tel"` * `"text"` * `"url"`
     */
    type: EditType;
    /**
     * The initial value of the control.
     */
    value: string;
  }
  interface GxFormField {
    /**
     * A CSS class to set as the `gx-form-field` label element class. This property must match with the `cssClass` used by the inner control. Therefore, to style the `gx-form-field` label, the control applies some transformations to the label to get the appropriate classes.
     */
    cssClass: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * The text to set as the label of the field.
     */
    labelCaption: string;
    /**
     * The position where the label will be located, relative to the edit control. The supported values are:  * `"top"`: The label is located above the edit control. * `"right"`: The label is located at the right side of the edit control. * `"bottom"`: The label is located below the edit control. * `"left"`: The label is located at the left side of the edit control. * `"float"`: The label is shown as a placeholder when the edit control's value is empty. When the value is not empty, the label floats and locates above the edit control. * `"none"`: The label is rendered, but hidden.
     */
    labelPosition: "none" | "top" | "right" | "bottom" | "left" | "float";
  }
  interface GxGauge {
    /**
     * A CSS class to set as the `gx-gauge` element class.
     */
    cssClass: string;
    /**
     * The maximum value of the gauge. This prop allows specify the maximum value that the gauge will handle. If there is no value specified it will be calculated by the sum of all gx-ranges values
     */
    maxValue: number;
    /**
     * The minimum value of the gauge 0 by Default
     */
    minValue: number;
    /**
     * Set `true` to display the minimum and maximum value. Default is `false`.
     */
    showMinMax: boolean;
    /**
     * Set `true` to display the current value. Default is `false`.
     */
    showValue: boolean;
    /**
     * Allows specify the width of the circumference _(When gauge is circle type)_ or the width of the bar _(When gauge is Line type)_ in % relative the component size.
     */
    thickness: number;
    /**
     * This property allows selecting the gauge type. The allowed values are `circle` or `line` (defautl).
     */
    type: "line" | "circle";
    /**
     * The current value of the gauge
     */
    value: number;
  }
  interface GxGaugeRange {
    /**
     * The range length.
     */
    amount: number;
    /**
     * Color property defines the color of range background. Color value can be any valid CSS color.
     */
    color: string;
    /**
     * The name of the range.
     */
    name: string;
  }
  interface GxGridEmptyIndicator {
    /**
     * This attribute lets you specify the `src` of the image to be shown.
     */
    image: "";
    /**
     * A CSS class to set as the inner `image` element class.
     */
    imageClass: "";
    /**
     * This attribute lets you specify the `srcset` of the image to be shown.
     */
    imageSet: "";
    /**
     * Text to be displayed
     */
    text: "";
    /**
     * A CSS class to set as the inner `text` element class.
     */
    textClass: "";
  }
  interface GxGridFlex {
    /**
     * This aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how justify-content aligns individual items within the main-axis.  | Value           | Details                                                                                  | | --------------- | ---------------------------------------------------------------------------------------- | | `center`        | Lines are packed toward the center of the flex container.                                | | `flex-end`      | Lines are packed toward the start of the flex container.                                 | | `flex-start`    | Lines are packed toward the end of the flex container.                                   | | `space-around`  | Lines are evenly distributed in the flex container, with half-size spaces on either end. | | `space-between` | Lines are evenly distributed in the flex container.                                      | | `stretch`       | Lines stretch to take up the remaining space.                                            |
     */
    alignContent:
      | "center"
      | "flex-end"
      | "flex-start"
      | "space-around"
      | "space-between"
      | "stretch";
    /**
     * This attribute lets you define the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the justify-content version for the cross-axis (perpendicular to the main-axis).  | Value           | Details                                                                                                                                                            | | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ | | `baseline`      | Controls are aligned such as their baselines align. This is useful to have several texts from different controls aligned taking into account different font sizes. | | `center`        | Controls are positioned at the center of the container.                                                                                                            | | `flex-end`      | Controls are positioned at the end of the container.                                                                                                               | | `flex-start`    | Controls are positioned at the beginning of the container.                                                                                                         | | `stretch`       | Controls are stretched to fit the container. In other words, children match the size of their container in the cross axis.                                         |
     */
    alignItems: "baseline" | "center" | "flex-end" | "flex-start" | "stretch";
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow: false;
    /**
     * This method must be called after new grid data was fetched by the infinite scroller.
     */
    complete: () => Promise<void>;
    /**
     * A CSS class to set as the `gx-grid-flex` element class.
     */
    cssClass: string;
    /**
     * Determines the direction of the main-axis (and the cross-axis, perpendicular to the main-axis). The direction children items are placed inside the Flexbox layout.  | Value            | Details                                                                                | | ---------------- | -------------------------------------------------------------------------------------- | | `column`         | Controls are displayed vertically, as a column (from top to bottom).                   | | `column-reverse` | Controls are displayed vertically, as a column, in reverse order (from bottom to top). | | `row`            | Controls are displayed horizontally, as a row (from left to right).                    | | `row-reverse`    | Controls are displayed horizontally, as a row, in reverse order (from right to left).  |
     */
    flexDirection: FlexDirection;
    /**
     * Determine whether the flex container is single-line or multi-line, and the direction of the cross axis. This attribute specifies what happens when children overflow the size of the container along the main-axis of the layout container. By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this attribute.  | Value          | Details                                                       | | -------------- | ------------------------------------------------------------- | | `nowrap`       | All flex items will be on one line                            | | `wrap`         | Flex items will wrap onto multiple lines, from top to bottom. | | `wrap-reverse` | Flex items will wrap onto multiple lines from bottom to top.  |
     */
    flexWrap: FlexWrap;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute lets you define the alignment along the main axis. It helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.  | Value           | Details                                                                  | | --------------- | ------------------------------------------------------------------------ | | `center`        | Controls are positioned at the center of the container.                  | | `flex-end`      | Controls are positioned at the end of the container.                     | | `flex-start`    | Controls are positioned at the beginning of the container.               | | `space-around`  | Controls are positioned with space before, between, and after the lines. | | `space-between` | Controls are positioned with space between the lines.                    | | `space-evenly`  | Controls are positioned with space evenly around them.                   |
     */
    justifyContent:
      | "center"
      | "flex-end"
      | "flex-start"
      | "space-around"
      | "space-between"
      | "space-evenly";
    /**
     * Grid loading State. It's purpose is to know rather the Grid Loading animation or the Grid Empty placeholder should be shown.  | Value      | Details                                                                                          | | ---------- | ------------------------------------------------------------------------------------------------ | | `loading`  | The grid is waiting the server for the grid data. Grid loading mask will be shown.               | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState: "loading" | "loaded";
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders may not work correctly.
     */
    recordCount: number;
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold: string;
  }
  interface GxGridFs {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow: false;
    /**
     * This method must be called after new grid data was fetched by the infinite scroller.
     */
    complete: () => Promise<void>;
    /**
     * A CSS class to set as the `gx-grid-fs` element class.
     */
    cssClass: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Grid loading State. It's purpose is to know rather the Grid Loading animation or the Grid Empty placeholder should be shown.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState: "loading" | "loaded";
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders will not work correctly.
     */
    recordCount: number;
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold: string;
  }
  interface GxGridHorizontal {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow: boolean;
    /**
     * Number of items per column (items visible at the same time on slider's container).
     */
    columns: number | "auto";
    /**
     * A CSS class to set as the `gx-grid-horizontal` element class.
     */
    cssClass: string;
    /**
     * 1-Indexed number of currently active page
     */
    currentPage: number;
    /**
     * Items layout direction: Could be 'horizontal' or 'vertical' (for vertical slider).
     */
    direction: "horizontal" | "vertical";
    /**
     * Get the index of the current active slide.
     */
    getActiveIndex: () => Promise<number>;
    /**
     * Get the index of the previous slide.
     */
    getPreviousIndex: () => Promise<number>;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Get whether or not the current slide is the last slide.
     */
    isLast: () => Promise<boolean>;
    /**
     * Get whether or not the current slide is the first slide.
     */
    isStart: () => Promise<boolean>;
    /**
     * Set numbers of items to define and enable group sliding. Useful to use with rowsPerPage > 1
     */
    itemsPerGroup: 1;
    /**
     * Get the total number of slides.
     */
    length: () => Promise<number>;
    /**
     * Grid loading state. It's purpose is to know whether the grid loading animation or the grid empty placeholder should be shown.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState: "loading" | "loaded";
    /**
     * Logging level. For troubleshooting component update and initialization.
     */
    logLevel: "debug" | "off";
    /**
     * Advanced options to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options
     */
    options: SwiperOptions;
    /**
     * Specifies the orientation mode.
     */
    orientation: "portrait" | "landscape";
    /**
     * A CSS class to set as the  Page Controller element class when `showPageController = "true"`.
     */
    pageControllerClass: string;
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders will not work correctly.
     */
    recordCount: number;
    /**
     * Specifies the number of rows that will be displayed in the portrait mode.
     */
    rows: number;
    /**
     * Specifies the number of rows that will be displayed in the landscape mode.
     */
    rowsLandscape: number;
    /**
     * If `true`, show the scrollbar.
     */
    scrollbar: false;
    /**
     * If `true`, show the pagination buttons (page controller).
     */
    showPageController: true;
    /**
     * Transition to the next slide.
     * @param speed The transition duration (in ms).
     * @param runCallbacks If true, the transition will produce [Transition/SlideChange][Start/End] transition events.
     */
    slideNext: (speed?: number, runCallbacks?: boolean) => Promise<void>;
    /**
     * Transition to the previous slide.
     * @param speed The transition duration (in ms).
     * @param runCallbacks If true, the transition will produce the [Transition/SlideChange][Start/End] transition events.
     */
    slidePrev: (speed?: number, runCallbacks?: boolean) => Promise<void>;
    /**
     * Transition to the specified slide.
     * @param index The index of the slide to transition to.
     * @param speed The transition duration (in ms).
     * @param runCallbacks If true, the transition will produce [Transition/SlideChange][Start/End] transition events.
     */
    slideTo: (
      index: number,
      speed?: number,
      runCallbacks?: boolean
    ) => Promise<void>;
    /**
     * Set to false to enable slides in free mode position.
     */
    snapToGrid: true;
    /**
     * Start auto play.
     */
    startAutoplay: () => Promise<void>;
    /**
     * Stop auto play.
     */
    stopAutoplay: () => Promise<void>;
    /**
     * Lock or unlock the ability to slide to the next slide.
     * @param lock If `true`, disable swiping to the next slide.
     */
    toggleLockSwipeToNext: (lock: boolean) => Promise<void>;
    /**
     * Lock or unlock the ability to slide to the previous slide.
     * @param lock If `true`, disable swiping to the previous slide.
     */
    toggleLockSwipeToPrev: (lock: boolean) => Promise<void>;
    /**
     * Lock or unlock the ability to slide to the next or previous slide.
     * @param lock If `true`, disable swiping to the next and previous slide.
     */
    toggleLockSwipes: (lock: boolean) => Promise<void>;
    /**
     * Update the underlying slider implementation. Call this if you've added or removed child slides.
     */
    update: () => Promise<void>;
    /**
     * Force swiper to update its height (when autoHeight is enabled) for the duration equal to 'speed' parameter.
     * @param speed The transition duration (in ms).
     */
    updateAutoHeight: (speed?: number) => Promise<void>;
  }
  interface GxGridImageMap {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows. This property is not currently supported in the gx-image-map control.
     */
    autoGrow: false;
    /**
     * A CSS class to set as the `gx-grid-image-map` element class.
     */
    cssClass: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: boolean;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Grid loading State. It's purpose is to know rather the Grid Loading animation or the Grid Empty placeholder should be shown.  | Value        | Details                                                                                          | | ------------ | ------------------------------------------------------------------------------------------------ | | `loading`    | The grid is waiting the server for the grid data. Grid loading mask will be shown.               | | `loaded`     | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState: "loading" | "loaded";
    /**
     * True if the control should implement and emit longPress event.
     */
    longPressable: boolean;
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders may not work correctly.
     */
    recordCount: number;
    /**
     * This attribute lets you specify the src of the background image.
     */
    src: string;
    /**
     * This attribute lets you specify the srcset of the background image.
     */
    srcset: string;
    /**
     * This property lets you specify a user tip that will be displayed as a message on the image map when the mouse is over it. This hint is used to indicate the image map can be zoomed.  When the user zooms into the image map for the first time, this hint will no longer be displayed.
     */
    tooltipText: string;
  }
  interface GxGridImageMapItem {
    /**
     * A CSS class to set as the `gx-grid-image-map-item` element class.
     */
    cssClass: string;
    /**
     * This attributes lets you specify the item's height. This attribute maps directly to the `height` CSS property.
     */
    height: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: boolean;
    /**
     * Defines the left position of the control which is relative to the position of its `gx-grid-image-map` container. This attribute maps directly to the `left` CSS property.
     */
    left: string;
    /**
     * This attributes lets you specify the item's rotation. This attribute maps directly to the `rotation` CSS property.
     */
    rotation: string;
    /**
     * Defines the top position of the control which is relative to the position of its `gx-grid-image-map` container. This attribute maps directly to the `top` CSS property.
     */
    top: string;
    /**
     * This attributes lets you specify the item's width. This attribute maps directly to the `width` CSS property.
     */
    width: string;
  }
  interface GxGridInfiniteScroll {
    /**
     * Call `complete()` within the `gxInfinite` output event handler when your async operation has completed. For example, the `loading` state is while the app is performing an asynchronous operation, such as receiving more data from an AJAX request to add more items to a data list. Once the data has been received and UI updated, you then call this method to signify that the loading has completed. This method will change the infinite scroll's state from `loading` to `enabled`.
     */
    complete: () => Promise<void>;
    /**
     * If `true`, the infinite scroll will be hidden and scroll event listeners will be removed.  Set this to true to disable the infinite scroll from actively trying to receive new data while scrolling. This is useful when it is known that there is no more data that can be added, and the infinite scroll is no longer needed.
     */
    disabled: boolean;
    /**
     * This property must be bounded to grid item count property. It's unique purpose is to trigger gxInfinite as many times as needed to fullfill the Container space when the initial batch does not overflow the main container
     */
    itemCount: number;
    /**
     * The main layout selector where the infinite scroll is contained.
     */
    layoutSelector: string;
    /**
     * The position of the infinite scroll element. The value can be either `top` or `bottom`.
     */
    position: "top" | "bottom";
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold: string;
    /**
     * The View Port parent element selector where the infinite component would be attached to and listening to Scroll Events.
     */
    viewportSelector: string;
  }
  interface GxGridInfiniteScrollContent {}
  interface GxGridSmartCell {
    /**
     * The CSS class of gx-grid parent element.
     */
    cssClass: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify the index of the cell. Useful when Inverse Loading is enabled on the grid.
     */
    index: number;
    /**
     * Whether this row is even position or not. This is specially required in Virtual scroll scenarios where the position in the DOM is not the real position in the collection.
     */
    isRowEven: false;
    /**
     * Number of Columns to be shown in the grid. Useful when Inverse Loading is enabled on the grid.
     */
    itemsPerRow: number;
    /**
     * True to show horizontal line.
     */
    showHorizontalLine: false;
  }
  interface GxGridSmartCss {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow: false;
    /**
     * This method must be called after new grid data was fetched by the infinite scroller.
     */
    complete: () => Promise<void>;
    /**
     * A CSS class to set as the `gx-grid-smart-css` element class.
     */
    cssClass: string;
    /**
     * Specifies the direction of the flexible items.
     */
    direction: "vertical" | "horizontal";
    /**
     * When set to `true`, the grid items will be loaded in inverse order, with the first element at the bottom and the "Loading" message (infinite-scroll) at the top. Inverse Loading is currently supported when:  - `direction = "vertical"`  - `itemLayoutMode = "single" | "mbyq"`
     */
    inverseLoading: boolean;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Grid Item Layout Mode: Single, Multiple by quantity, multiple by size.
     */
    itemLayoutMode: "single" | "mbyq" | "mbys";
    /**
     * Grid loading State. It's purpose is to know rather the Grid Loading animation or the Grid Empty placeholder should be shown.  | Value        | Details                                                                                          | | ------------ | ------------------------------------------------------------------------------------------------ | | `loading`    | The grid is waiting the server for the grid data. Grid loading mask will be shown.               | | `loaded`     | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState: "loading" | "loaded";
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders may not work correctly.
     */
    recordCount: number;
    /**
     * Scroll snapping allows to lock the viewport to certain elements or locations after a user has finished scrolling
     */
    snapToGrid: false;
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold: string;
  }
  interface GxGroup {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow: boolean;
    /**
     * Attribute that provides the caption to the <legend> tag
     */
    caption: string;
    /**
     * A CSS class to set as the `gx-group` element class.
     */
    cssClass: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
  }
  interface GxHeaderRowPatternMarker {}
  interface GxIcon {
    /**
     * The color of the icon.
     */
    color: string;
    /**
     * A label for the icon, for screen readers to use.
     */
    label: string;
    /**
     * If enabled, the icon will be loaded lazily when it's visible in the viewport.
     */
    lazy: boolean;
    /**
     * The type of icon. Possible values: the name each of the icons in /assets.
     */
    type: string;
  }
  interface GxImage {
    /**
     * This attribute lets you specify the alternative text.
     */
    alt: string;
    /**
     * If true, the component will be sized to match the image's intrinsic size when not constrained via CSS dimension properties (for example, height or width). If false, the component will never force its height to match the image's intrinsic size. The width, however, will match the intrinsic width. In GeneXus terms, it will auto grow horizontally, but not vertically.
     */
    autoGrow: true;
    /**
     * A CSS class to set as the `gx-image` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * True to lazy load the image, when it enters the viewport.
     */
    lazyLoad: true;
    /**
     * This attribute allows specifing how the image is sized according to its container. `contain`, `cover`, `fill` and `none` map directly to the values of the CSS `object-fit` property. The `tile` value repeats the image, both vertically and horizontally, creating a tile effect.
     */
    scaleType: "contain" | "cover" | "fill" | "none" | "tile";
    /**
     * True to show the image picker button.
     */
    showImagePickerButton: boolean;
    /**
     * This attribute lets you specify the `src` of the `img`.
     */
    src: string;
    /**
     * This attribute lets you specify the `srcset` of the `img`. The `srcset` attribute defines the set of images we will allow the browser to choose between, and what size each image is. Each set of image information is separated from the previous one by a comma.
     */
    srcset: string;
  }
  interface GxImageAnnotations {
    /**
     * If the annotations are activated or not.
     */
    disabled: false;
    /**
     * Specifies the `fontFamily` for the texts
     */
    fontFamily: string;
    /**
     * Specifies the `fontSize` for the texts
     */
    fontSize: number;
    /**
     * The source of the background image.
     */
    imageLabel: "Image to be annotated";
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Specifies the lines that will be drawn on the gx-image-annotations control
     */
    lines: ImageAnnotationLine[];
    /**
     * Specifies the texts that will be drawn on the gx-image-annotations control
     */
    texts: ImageAnnotationText[];
    /**
     * Drawing color.
     */
    traceColor: string;
    /**
     * Property used for change the traceInd state and go forward or backward.
     */
    traceIndex: number;
    /**
     * Drawing thickness.
     */
    traceThickness: number;
    /**
     * The source of the background image.
     */
    value: string;
  }
  interface GxImagePicker {
    /**
     * This attribute lets you specify the alternative text.
     */
    alt: string;
    /**
     * If true, the component will be sized to match the image's intrinsic size when not constrained via CSS dimension properties (for example, height or width). If false, the component will never force its height to match the image's intrinsic size. The width, however, will match the intrinsic width. In GeneXus terms, it will auto grow horizontally, but not vertically.
     */
    autoGrow: true;
    /**
     * This attribute lets you specify the description of the cancel action button in the modal.
     */
    cancelButtonText: "CANCEL";
    /**
     * This attribute lets you specify the description of the change image button in the modal.
     */
    changeButtonText: "Change image";
    /**
     * A CSS class to set as the `gx-image-picker` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * True to lazy load the image, when it enters the viewport.
     */
    lazyLoad: true;
    /**
     * This attribute lets you specify the modal title.
     */
    modalTitle: string;
    /**
     * This attribute lets you specify if the image is readonly. If readonly, it will not allow to use the edit button. In fact, the edit button will not be shown.
     */
    readonly: false;
    /**
     * This attribute lets you specify the description of the remove image button in the modal.
     */
    removeButtonText: "Remove image";
    /**
     * This attribute allows specifing how the image is sized according to its container. `contain`, `cover`, `fill` and `none` map directly to the values of the CSS `object-fit` property. The `tile` value repeats the image, both vertically and horizontally, creating a tile effect.
     */
    scaleType: "contain" | "cover" | "fill" | "none" | "tile";
    /**
     * This attribute lets you specify the `src` of the `img`.
     */
    src: string;
    /**
     * This attribute lets you specify the `srcset` of the `img`. The `srcset` attribute defines the set of images we will allow the browser to choose between, and what size each image is. Each set of image information is separated from the previous one by a comma.
     */
    srcset: string;
    /**
     * This attribute lets you specify the current state of the gx-image-picker.  | Value               | Details                                                                                   | | ------------------- | ----------------------------------------------------------------------------------------- | | `readyToUse`        | Allows you to choose, change or remove an image.                                          | | `uploadingFile`     | It is set by the gx-image-picker control when the `reader` is loading the selected image. |  `uploadingFile` will not allow you to change or remove the current image.
     */
    state: "readyToUse" | "uploadingFile";
  }
  interface GxInteractiveImage {
    /**
     * True/False. If this property is true, the user can zoom in/out on the image.
     */
    enableZoom: boolean;
    /**
     * Lets you specify the image URL. *Requiered*
     */
    src: string;
    /**
     * Indicates how much you can enlarge an image. (Percentage) _Note: 100% = Normal size_.
     */
    zoom: number;
  }
  interface GxLayout {
    /**
     * `true` if the bottom navbar is visible in the application. This property can only be true if `layoutSize` == `"small"`
     */
    bottomNavbarVisible: boolean;
    /**
     * `false` to hide the bottom target
     */
    bottomVisible: false;
    /**
     * This attribute lets you specify if the header row pattern is enabled in the top navbar.
     */
    enableHeaderRowPattern: boolean;
    /**
     * This attribute lets you specify the layout size of the application. Each layout size will set different behaviors in the gx-layout control.
     */
    layoutSize: LayoutSize;
    /**
     * `false` to hide the left target
     */
    leftVisible: boolean;
    /**
     * `false` to hide the right target
     */
    rightVisible: boolean;
    /**
     * `true` if the top navbar is visible in the application.
     */
    topNavbarVisible: boolean;
    /**
     * `false` to hide the top target.
     */
    topVisible: false;
  }
  interface GxLoading {
    /**
     * A CSS class to set as the `gx-loading` element class.
     */
    cssClass: string;
    /**
     * `true` if the `componentDidLoad()` method was called. This property is not used as a state due to the following issue: https://github.com/ionic-team/stencil/issues/3158
     */
    didLoad: boolean;
    /**
     * This attribute lets you specify the lottie path to use for the lottie animation. This property is not used as a state due to the following issue: https://github.com/ionic-team/stencil/issues/3158
     */
    lottiePath: string;
    /**
     * This attribute lets you specify if the loading is presented.
     */
    presented: boolean;
    /**
     * `true` to display the animation defined in the default `<slot>` instead the native (default) animation.
     */
    showSlotAnimation: boolean;
  }
  interface GxLottie {
    /**
     * This attribute lets you specify a Lottie animation object
     */
    animationData: any;
    /**
     * This attribute lets you specify if the animation will start playing as soon as it is ready
     */
    autoPlay: boolean;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute lets you specify if the animation will loop
     */
    loop: boolean;
    /**
     * This attribute lets you specify  the relative path to the animation object. (`animationData` and `path` are mutually exclusive)
     */
    path: string;
    /**
     * Pause the animation
     */
    pause: () => Promise<void>;
    /**
     * Start playing the animation
     */
    play: (from?: number, to?: number) => Promise<void>;
    /**
     * Set the progress of the animation to any point
     * @param progress : Value from 0 to 1 indicating the percentage of progress where the animation will start.
     */
    setProgress: (progress: number) => Promise<void>;
    /**
     * Stop the animation
     */
    stop: () => Promise<void>;
  }
  interface GxMap {
    /**
     * The coord of initial center of the map.
     */
    center: string;
    /**
     * This attribute determines whether map markers should be grouped. When `true`, the markers will be grouped depending on their proximity.
     */
    clusteringPoints: boolean;
    /**
     * Enables the possibility to draw the route between two points on the map.
     */
    directionLayer: boolean;
    /**
     * WKT format string containing the response of Google Maps Directions API call
     */
    directionLayerWKTString: string;
    /**
     * If `true` allows drawing geometries on the map.
     */
    editableGeographies: boolean;
    /**
     * Enable the High Accuracy in user location. _Note: This property applies when ```watchPosition = true```._
     */
    highAccuracyLocator: boolean;
    /**
     * Indicates how the map will be displayed at startup.  | Value           | Details                                                                                                                                       | | --------------- | --------------------------------------------------------------------------------------------------------------------------------------------- | | `showAll`       | (Default value) the map is adjusted to display all the loaded points (and the current device location if Show My Location is set to True).    | | `nearestPoint`  | The map is adjusted to display the current device location and shows my location and the nearest point.                                       | | `radius`        | The map is adjusted to display a fixed radius, from the specified center. The radius value is specified using the initialZoomRadius property. | | `noInitialZoom` | No specific action is taken regarding the initial zoom.                                                                                       |
     */
    initialZoom: "showAll" | "nearestPoint" | "radius" | "noInitialZoom";
    /**
     * The radius value if `initialZoom` = `"radius"`.
     */
    initialZoomRadius: number;
    /**
     * The map provider. _Note: Currently, this property is for setting a custom map provider using an URL._
     */
    mapProvider: string;
    /**
     * Map type to be used. _Note: If you set a map provider, the selected map type will be ignored._  | Value       | Details                                                                     | | ----------- | --------------------------------------------------------------------------- | | `standard`  | Shows streets.                                                              | | `satellite` | Shows satellite images of the Earth.                                        | | `hybrid`    | Shows streets over the satellite images.                                    |
     */
    mapType: "standard" | "satellite" | "hybrid";
    /**
     * A CSS class to set as the `showMyLocation` icon class.
     */
    pinImageCssClass: string;
    /**
     * This attribute lets you specify the srcset attribute for the `showMyLocation` icon when the `pinShowMyLocationSrcset` property is not specified.
     */
    pinImageSrcset: string;
    /**
     * This attribute lets you specify the srcset attribute for the `showMyLocation` icon. If not set the `pinImageSrcset` property will be used to specify the srcset attribute for the icon. If none of the properties are specified, a default icon will be used when `showMyLocation = true`
     */
    pinShowMyLocationSrcset: string;
    /**
     * Whether the map can be zoomed by using the mouse wheel.
     */
    scrollWheelZoom: boolean;
    /**
     * Enables the possibility to navigate the map and select a location point using the map center.
     */
    selectionLayer: boolean;
    /**
     * A CSS class to set as the `selectionLayer` icon class.
     */
    selectionTargetImageCssClass: string;
    /**
     * This attribute lets you specify the srcset attribute for the `selectionLayer` icon. If not set the `pinImageSrcset` property will be used to specify the srcset attribute for the icon. If none of the properties are specified, a default icon will be used when `selectionLayer = true`
     */
    selectionTargetImageSrcset: string;
    /**
     * Indicates if the current location of the device is displayed on the map.
     */
    showMyLocation: boolean;
    /**
     * The initial zoom level in the map.
     */
    zoom: number;
  }
  interface GxMapCircle {
    /**
     * The coordinates where the circle will appear in the map.
     */
    coords: string;
    /**
     * The radius that the circle will have in the map. It's expressed in meters.
     */
    radius: number;
  }
  interface GxMapLine {
    /**
     * The coordinates where the line/polyline will appear in the map.
     */
    coords: string;
  }
  interface GxMapMarker {
    /**
     * This attribute lets you specify the alternative text of the marker image.
     */
    alt: string;
    /**
     * The coordinates where the marker will appear in the map.
     */
    coords: string;
    /**
     * The class that the marker will have.
     */
    cssClass: string;
    /**
     * Whether the gx-map-marker's popUp can be shown.
     */
    showPopup: boolean;
    /**
     * This attribute lets you specify the src of the marker image.
     */
    src: string;
    /**
     * This attribute lets you specify the srcset of the marker image.
     */
    srcset: string;
    /**
     * The tooltip caption of the marker.
     */
    tooltipCaption: string;
    /**
     * This attribute lets you specify the marker type. Each marker type has different images and sizes depending on its use.
     */
    type: "default" | "selection-layer" | "user-location";
  }
  interface GxMapPolygon {
    /**
     * The coordinates where the polygon will appear in the map.
     */
    coords: string;
    /**
     * A CSS class to set as the `gx-map-polygon` element class.
     */
    cssClass: string;
  }
  interface GxMessage {
    /**
     * A CSS class to set as the `gx-message` element class.
     */
    cssClass: string;
    /**
     * The time in seconds before the message is automatically dismissed. If no duration is specified, the message will not be automatically dismissed.
     */
    duration: number;
    /**
     * This attribute lets you identify the message. If `messageId == null`, the message will not be presented.
     */
    messageId: string;
    /**
     * This attribute lets you specify the text of the message.
     */
    messageText: string;
  }
  interface GxModal {
    /**
     * This attribute lets you specify if the modal dialog is automatically closed when an action is clicked.
     */
    autoClose: boolean;
    /**
     * This attribute lets you specify the label for the close button. Important for accessibility.
     */
    closeButtonLabel: string;
    /**
     * This attribute lets you specify the height of the control.
     */
    height: string;
    /**
     * This attribute lets you specify if the modal dialog is opened or closed.
     */
    opened: boolean;
    /**
     * This attribute lets you specify if a body is rendered in the middle of the modal dialog.
     */
    showBody: boolean;
    /**
     * This attribute lets you specify if a footer is rendered at the bottom of the modal dialog.
     */
    showFooter: boolean;
    /**
     * This attribute lets you specify if a header is rendered on top of the modal dialog.
     */
    showHeader: boolean;
    /**
     * If `type != "popup"`, the modal dialog will render with more advanced styling, including `box-shadow`, `border-radius` and `padding`.
     */
    type: "alert" | "dialog" | "popup";
    /**
     * This attribute lets you specify the width of the control.
     */
    width: string;
  }
  interface GxNavbar {
    /**
     * This attribute lets you specify the label for the low priority actions toggle button. Important for accessibility.
     */
    actionToggleButtonLabel: string;
    /**
     * This attribute lets you specify the label for the back button.
     */
    backButtonLabel: string;
    /**
     * This attribute lets you specify an optional title for the navigation bar
     */
    caption: string;
    /**
     * A CSS class to set as the `gx-navbar` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the header row pattern is enabled. If enabled, the control will switch between the `cssClass` and `headerRowPatternCssClass` classes depending on the value of the `showHeaderRowPatternClass` property. This property only works when `position="top"`.
     */
    enableHeaderRowPattern: boolean;
    /**
     * A CSS class to set as the `gx-navbar` element class when using the header row pattern.
     */
    headerRowPatternCssClass: string;
    /**
     * This attribute lets you specify the layout size of the application. Each layout size will set different behaviors in the gx-layout control.
     */
    layoutSize: LayoutSize;
    /**
     * `true` if the left target of the gx-layout is visible in the application.
     */
    leftTargetVisible: boolean;
    /**
     * This attribute lets you specify the position of the navbar in the viewport. If `position = "top"` the navbar will be placed normally at the top of the viewport. If `position = "bottom"` the navbar will be placed at the bottom of the viewport. This position of navbar is used to show navigation links.
     */
    position: "top" | "bottom";
    /**
     * `true` if the right target of the gx-layout is visible in the application.
     */
    rightTargetVisible: boolean;
    /**
     * True to show the back button
     */
    showBackButton: boolean;
    /**
     * True to use the `headerRowPatternCssClass` property as the `gx-navbar` element class. False to use the `cssClass` property instead.
     */
    showHeaderRowPatternClass: boolean;
    /**
     * True to show the left target toggle button (a burger icon)
     */
    showToggleButton: false;
    /**
     * This attribute lets you specify if one or two lines will be used to render the navigation bar. Useful when there are links and also actions, to have links in the first line, and actions in the second
     */
    singleLine: true;
    /**
     * This attribute lets you specify the label for the left target toggle button. Important for accessibility.
     */
    toggleButtonLabel: string;
  }
  interface GxNavbarItem {
    /**
     * Indicates if the navbar item is the active one (for example, when the item represents the current page)
     */
    active: false;
    /**
     * A CSS class to set as the `gx-navbar-item` element class.
     */
    cssClass: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: true;
    /**
     * This attribute lets you specify the URL of the navbar item.
     */
    href: "";
    /**
     * This attribute lets you specify the alternate text for the image specified in iconSrc.
     */
    iconAltText: "";
    /**
     * This attribute lets you specify the src attribute of an icon for the navbar item.
     */
    iconSrc: string;
    /**
     * This attribute lets you specify the srcset attribute of an icon for the navbar item.
     */
    iconSrcset: string;
    /**
     * This attribute lets you specify the layout size of the application. Each layout size will set different behaviors in the gx-navbar-item control.
     */
    layoutSize: LayoutSize;
  }
  interface GxPasswordEdit {
    /**
     * A CSS class to set as the `gx-password-edit` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<string>;
    /**
     * The text to set as the label of the gx-password-edit control.
     */
    labelCaption: string;
    /**
     * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
     */
    placeholder: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly: boolean;
    /**
     * Text of the reveal button to offer hiding the password.
     */
    revealButtonTextOff: string;
    /**
     * Text of the reveal button to offer revealing the password.
     */
    revealButtonTextOn: string;
    /**
     * If true, a reveal password button is shown next to the password input. Pressing the reveal button toggles the password mask, allowing the user to view the password text.
     */
    showRevealButton: boolean;
    /**
     * The initial value of the control.
     */
    value: string;
  }
  interface GxProgressBar {
    /**
     * It specifies the main text that is shown on the dialog.
     */
    caption: string;
    /**
     * A CSS class to set as the `gx-progress-bar` element class.
     */
    cssClass: string;
    /**
     * It specifies more information that is shown on the dialog.
     */
    description: string;
    /**
     * This attribute lets you specify maximum value when type is `"determinate"`.
     */
    maxValue: number;
    /**
     * This attribute lets you specify if the progress dialog is presented.
     */
    presented: boolean;
    /**
     * It specifies the type of progress indicator. Determinate indicators show the progress of the processing, while indeterminate ones don't inform you about the status during the process.
     */
    type: "determinate" | "indeterminate";
    /**
     * This attribute lets you specify the value when type is `"determinate"`.
     */
    value: number;
  }
  interface GxRadioGroup {
    /**
     * A CSS class to set as the `gx-radio-group` element class.
     */
    cssClass: string;
    /**
     * Specifies how the child `gx-radio-option` will be layed out. It supports two values:  * `horizontal` * `vertical` (default)
     */
    direction: "horizontal" | "vertical";
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * The name that will be set to all the inner inputs of type radio
     */
    name: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly: boolean;
    /**
     * The initial value of the control. Setting the value automatically selects the corresponding radio option.
     */
    value: string;
  }
  interface GxRadioOption {
    /**
     * Specifies the label of the radio.
     */
    caption: string;
    /**
     * Indicates that the control is selected by default.
     */
    checked: boolean;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * The name of the inner input of type radio
     */
    name: string;
    /**
     * The initial value of the control.
     */
    value: string;
  }
  interface GxRating {
    /**
     * A CSS class to set as the `gx-rating` element class.
     */
    cssClass: string;
    /**
     * This attribute allows you specify if the element is disabled. If disabled, it will not trigger any user interaction related event (for example, click event).
     */
    disabled: boolean;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<string>;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * This property determine the number of stars displayed.
     */
    maxValue: number;
    /**
     * The current value displayed by the component.
     */
    value: number;
  }
  interface GxSelect {
    /**
     * A CSS class to set as the `gx-select` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<string>;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Text that appears in the form control when it has no value set
     */
    placeholder: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly: boolean;
    /**
     * Render a text input showing a list of suggested elements.
     */
    suggest: boolean;
    /**
     * The initial value of the control. Setting the value automatically selects the corresponding option.
     */
    value: string;
  }
  interface GxSelectOption {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * Indicates that the control is selected by default.
     */
    selected: boolean;
    /**
     * The initial value of the control.
     */
    value: string;
  }
  interface GxSwitch {
    /**
     * Caption displayed when the switch is 'on'
     */
    checkedCaption: string;
    /**
     * The value when the switch is 'on'
     */
    checkedValue: string;
    /**
     * A CSS class to set as the `gx-switch` element class.
     */
    cssClass: string;
    /**
     * This attribute allows you specify if the element is disabled. If disabled, it will not trigger any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId: () => Promise<string>;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Caption displayed when the switch is 'off'
     */
    unCheckedCaption: string;
    /**
     * The value when the switch is 'off'
     */
    unCheckedValue: string;
    /**
     * The value of the control.
     */
    value: string;
  }
  interface GxTab {
    /**
     * A CSS class to set as the `gx-tab` element class.
     */
    cssClass: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * Defines how the tabs will be distributed in the Strip.  | Value        | Details                                                                            | | ------------ | ---------------------------------------------------------------------------------- | | `scoll`      | Allows scrolling the tab control when the number of tabs exceeds the screen width. | | `fixed-size` | Tabs are fixed size. Used with any amount of tabs.                                 |
     */
    tabsDistribution: "scroll" | "fixed-size";
  }
  interface GxTabCaption {
    /**
     * A CSS class to set as the `gx-tab-caption` element class when `selected = false`.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the tab page is disabled.
     */
    disabled: boolean;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: boolean;
    /**
     * This attribute lets you specify the relative location of the image to the text.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `above`  | The image is located above the text.                    | | `before` | The image is located before the text, in the same line. | | `after`  | The image is located after the text, in the same line.  | | `below`  | The image is located below the text.                    | | `behind` | The image is located behind the text.                   |
     */
    imagePosition: "above" | "before" | "after" | "below" | "behind";
    /**
     * This attribute lets you specify if the tab page corresponding to this caption is selected
     */
    selected: boolean;
    /**
     * A CSS class to set as the `gx-tab-caption` element class when `selected = true`.
     */
    selectedCssClass: string;
    /**
     * A CSS class that is used by the `gx-tab` parent container.
     */
    tabCssClass: string;
  }
  interface GxTabPage {
    /**
     * This attribute lets you specify if the tab page is selected.
     */
    selected: boolean;
  }
  interface GxTable {
    /**
     * Like the `grid-templates-areas` CSS property, this attribute defines a grid template by referencing the names of the areas which are specified with the cells [area attribute](../table-cell/readme.md#area). Repeating the name of an area causes the content to span those cells. A period signifies an empty cell. The syntax itself provides a visualization of the structure of the grid.
     */
    areasTemplate: string;
    /**
     * Like the `grid-templates-columns` CSS property, this attribute defines the columns of the grid with a space-separated list of values. The values represent the width of column.
     */
    columnsTemplate: string;
    /**
     * A CSS class to set as the `gx-table` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute lets you determine whether the gx-table control has a scroll or not.  | Value    | Details                                                                                                           | | -------- | ----------------------------------------------------------------------------------------------------------------- | | `scroll` | The table provides scrollable behavior. When the table height exceeds the space available, a scroll bar is shown. | | `clip`   | The table doesn't provide scroll in any case; content is clipped at the bottom.                                   |
     */
    overflowBehavior: "scroll" | "clip";
    /**
     * Like the `grid-templates-rows` CSS property, this attribute defines the rows of the grid with a space-separated list of values. The values represent the height of each row.
     */
    rowsTemplate: string;
  }
  interface GxTableCell {
    /**
     * Defines the horizontal alignment of the content of the cell.
     */
    align: "left" | "right" | "center";
    /**
     * Like the `grid-area` CSS property, this attribute gives a name to the item, so it can be used from the [areas-template attributes](../table/readme.md#areas-template) of the gx-table element.
     */
    area: string;
    /**
     * This attribute defines the maximum height of the cell.
     */
    maxHeight: string;
    /**
     * This attribute defines the minimum height of the cell when its contents are visible. Ignored if its content has `invisible-mode="collapse"` and is hidden.
     */
    minHeight: string;
    /**
     * Defines the vertical alignment of the content of the cell.
     */
    valign: "top" | "bottom" | "middle";
  }
  interface GxTextblock {
    /**
     * A CSS class to set as the `gx-textblock` element class.
     */
    cssClass: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * It specifies the format that will have the textblock control.   - If `format` = `HTML`, the textblock control works as an HTML div and    the innerHTML will be taken from the default slot.   - If `format` = `Text`, the control works as a normal textblock control    and it is affected by most of the defined properties.
     */
    format: "Text" | "HTML";
    /**
     * True to highlight control when an action is fired.
     */
    highlightable: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * True to cut text when it overflows, showing an ellipsis.
     */
    lineClamp: false;
  }
  interface GxVideo {
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled: false;
    /**
     * This attribute is for specifies the src of the video.
     */
    src: string;
  }
}
export interface GxActionSheetCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxActionSheetElement;
}
export interface GxActionSheetItemCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxActionSheetItemElement;
}
export interface GxButtonCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxButtonElement;
}
export interface GxCanvasCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxCanvasElement;
}
export interface GxCheckboxCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxCheckboxElement;
}
export interface GxChronometerCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxChronometerElement;
}
export interface GxDynamicFormCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxDynamicFormElement;
}
export interface GxEditCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxEditElement;
}
export interface GxGaugeCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxGaugeElement;
}
export interface GxGaugeRangeCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxGaugeRangeElement;
}
export interface GxGridFlexCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxGridFlexElement;
}
export interface GxGridFsCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxGridFsElement;
}
export interface GxGridHorizontalCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxGridHorizontalElement;
}
export interface GxGridImageMapCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxGridImageMapElement;
}
export interface GxGridImageMapItemCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxGridImageMapItemElement;
}
export interface GxGridInfiniteScrollCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxGridInfiniteScrollElement;
}
export interface GxGridSmartCssCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxGridSmartCssElement;
}
export interface GxHeaderRowPatternMarkerCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxHeaderRowPatternMarkerElement;
}
export interface GxImageAnnotationsCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxImageAnnotationsElement;
}
export interface GxImagePickerCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxImagePickerElement;
}
export interface GxLayoutCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxLayoutElement;
}
export interface GxLottieCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxLottieElement;
}
export interface GxMapCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxMapElement;
}
export interface GxMapCircleCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxMapCircleElement;
}
export interface GxMapLineCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxMapLineElement;
}
export interface GxMapMarkerCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxMapMarkerElement;
}
export interface GxMapPolygonCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxMapPolygonElement;
}
export interface GxModalCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxModalElement;
}
export interface GxNavbarCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxNavbarElement;
}
export interface GxPasswordEditCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxPasswordEditElement;
}
export interface GxRadioGroupCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxRadioGroupElement;
}
export interface GxRadioOptionCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxRadioOptionElement;
}
export interface GxRatingCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxRatingElement;
}
export interface GxSelectCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxSelectElement;
}
export interface GxSelectOptionCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxSelectOptionElement;
}
export interface GxSwitchCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxSwitchElement;
}
export interface GxTabCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxTabElement;
}
export interface GxTabCaptionCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxTabCaptionElement;
}
export interface GxTableCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLGxTableElement;
}
declare global {
  interface HTMLGxActionSheetElement
    extends Components.GxActionSheet,
      HTMLStencilElement {}
  var HTMLGxActionSheetElement: {
    prototype: HTMLGxActionSheetElement;
    new (): HTMLGxActionSheetElement;
  };
  interface HTMLGxActionSheetItemElement
    extends Components.GxActionSheetItem,
      HTMLStencilElement {}
  var HTMLGxActionSheetItemElement: {
    prototype: HTMLGxActionSheetItemElement;
    new (): HTMLGxActionSheetItemElement;
  };
  interface HTMLGxAudioElement extends Components.GxAudio, HTMLStencilElement {}
  var HTMLGxAudioElement: {
    prototype: HTMLGxAudioElement;
    new (): HTMLGxAudioElement;
  };
  interface HTMLGxButtonElement
    extends Components.GxButton,
      HTMLStencilElement {}
  var HTMLGxButtonElement: {
    prototype: HTMLGxButtonElement;
    new (): HTMLGxButtonElement;
  };
  interface HTMLGxCanvasElement
    extends Components.GxCanvas,
      HTMLStencilElement {}
  var HTMLGxCanvasElement: {
    prototype: HTMLGxCanvasElement;
    new (): HTMLGxCanvasElement;
  };
  interface HTMLGxCanvasCellElement
    extends Components.GxCanvasCell,
      HTMLStencilElement {}
  var HTMLGxCanvasCellElement: {
    prototype: HTMLGxCanvasCellElement;
    new (): HTMLGxCanvasCellElement;
  };
  interface HTMLGxCardElement extends Components.GxCard, HTMLStencilElement {}
  var HTMLGxCardElement: {
    prototype: HTMLGxCardElement;
    new (): HTMLGxCardElement;
  };
  interface HTMLGxCardHeaderElement
    extends Components.GxCardHeader,
      HTMLStencilElement {}
  var HTMLGxCardHeaderElement: {
    prototype: HTMLGxCardHeaderElement;
    new (): HTMLGxCardHeaderElement;
  };
  interface HTMLGxCheckboxElement
    extends Components.GxCheckbox,
      HTMLStencilElement {}
  var HTMLGxCheckboxElement: {
    prototype: HTMLGxCheckboxElement;
    new (): HTMLGxCheckboxElement;
  };
  interface HTMLGxChronometerElement
    extends Components.GxChronometer,
      HTMLStencilElement {}
  var HTMLGxChronometerElement: {
    prototype: HTMLGxChronometerElement;
    new (): HTMLGxChronometerElement;
  };
  interface HTMLGxDynamicFormElement
    extends Components.GxDynamicForm,
      HTMLStencilElement {}
  var HTMLGxDynamicFormElement: {
    prototype: HTMLGxDynamicFormElement;
    new (): HTMLGxDynamicFormElement;
  };
  interface HTMLGxEditElement extends Components.GxEdit, HTMLStencilElement {}
  var HTMLGxEditElement: {
    prototype: HTMLGxEditElement;
    new (): HTMLGxEditElement;
  };
  interface HTMLGxFormFieldElement
    extends Components.GxFormField,
      HTMLStencilElement {}
  var HTMLGxFormFieldElement: {
    prototype: HTMLGxFormFieldElement;
    new (): HTMLGxFormFieldElement;
  };
  interface HTMLGxGaugeElement extends Components.GxGauge, HTMLStencilElement {}
  var HTMLGxGaugeElement: {
    prototype: HTMLGxGaugeElement;
    new (): HTMLGxGaugeElement;
  };
  interface HTMLGxGaugeRangeElement
    extends Components.GxGaugeRange,
      HTMLStencilElement {}
  var HTMLGxGaugeRangeElement: {
    prototype: HTMLGxGaugeRangeElement;
    new (): HTMLGxGaugeRangeElement;
  };
  interface HTMLGxGridEmptyIndicatorElement
    extends Components.GxGridEmptyIndicator,
      HTMLStencilElement {}
  var HTMLGxGridEmptyIndicatorElement: {
    prototype: HTMLGxGridEmptyIndicatorElement;
    new (): HTMLGxGridEmptyIndicatorElement;
  };
  interface HTMLGxGridFlexElement
    extends Components.GxGridFlex,
      HTMLStencilElement {}
  var HTMLGxGridFlexElement: {
    prototype: HTMLGxGridFlexElement;
    new (): HTMLGxGridFlexElement;
  };
  interface HTMLGxGridFsElement
    extends Components.GxGridFs,
      HTMLStencilElement {}
  var HTMLGxGridFsElement: {
    prototype: HTMLGxGridFsElement;
    new (): HTMLGxGridFsElement;
  };
  interface HTMLGxGridHorizontalElement
    extends Components.GxGridHorizontal,
      HTMLStencilElement {}
  var HTMLGxGridHorizontalElement: {
    prototype: HTMLGxGridHorizontalElement;
    new (): HTMLGxGridHorizontalElement;
  };
  interface HTMLGxGridImageMapElement
    extends Components.GxGridImageMap,
      HTMLStencilElement {}
  var HTMLGxGridImageMapElement: {
    prototype: HTMLGxGridImageMapElement;
    new (): HTMLGxGridImageMapElement;
  };
  interface HTMLGxGridImageMapItemElement
    extends Components.GxGridImageMapItem,
      HTMLStencilElement {}
  var HTMLGxGridImageMapItemElement: {
    prototype: HTMLGxGridImageMapItemElement;
    new (): HTMLGxGridImageMapItemElement;
  };
  interface HTMLGxGridInfiniteScrollElement
    extends Components.GxGridInfiniteScroll,
      HTMLStencilElement {}
  var HTMLGxGridInfiniteScrollElement: {
    prototype: HTMLGxGridInfiniteScrollElement;
    new (): HTMLGxGridInfiniteScrollElement;
  };
  interface HTMLGxGridInfiniteScrollContentElement
    extends Components.GxGridInfiniteScrollContent,
      HTMLStencilElement {}
  var HTMLGxGridInfiniteScrollContentElement: {
    prototype: HTMLGxGridInfiniteScrollContentElement;
    new (): HTMLGxGridInfiniteScrollContentElement;
  };
  interface HTMLGxGridSmartCellElement
    extends Components.GxGridSmartCell,
      HTMLStencilElement {}
  var HTMLGxGridSmartCellElement: {
    prototype: HTMLGxGridSmartCellElement;
    new (): HTMLGxGridSmartCellElement;
  };
  interface HTMLGxGridSmartCssElement
    extends Components.GxGridSmartCss,
      HTMLStencilElement {}
  var HTMLGxGridSmartCssElement: {
    prototype: HTMLGxGridSmartCssElement;
    new (): HTMLGxGridSmartCssElement;
  };
  interface HTMLGxGroupElement extends Components.GxGroup, HTMLStencilElement {}
  var HTMLGxGroupElement: {
    prototype: HTMLGxGroupElement;
    new (): HTMLGxGroupElement;
  };
  interface HTMLGxHeaderRowPatternMarkerElement
    extends Components.GxHeaderRowPatternMarker,
      HTMLStencilElement {}
  var HTMLGxHeaderRowPatternMarkerElement: {
    prototype: HTMLGxHeaderRowPatternMarkerElement;
    new (): HTMLGxHeaderRowPatternMarkerElement;
  };
  interface HTMLGxIconElement extends Components.GxIcon, HTMLStencilElement {}
  var HTMLGxIconElement: {
    prototype: HTMLGxIconElement;
    new (): HTMLGxIconElement;
  };
  interface HTMLGxImageElement extends Components.GxImage, HTMLStencilElement {}
  var HTMLGxImageElement: {
    prototype: HTMLGxImageElement;
    new (): HTMLGxImageElement;
  };
  interface HTMLGxImageAnnotationsElement
    extends Components.GxImageAnnotations,
      HTMLStencilElement {}
  var HTMLGxImageAnnotationsElement: {
    prototype: HTMLGxImageAnnotationsElement;
    new (): HTMLGxImageAnnotationsElement;
  };
  interface HTMLGxImagePickerElement
    extends Components.GxImagePicker,
      HTMLStencilElement {}
  var HTMLGxImagePickerElement: {
    prototype: HTMLGxImagePickerElement;
    new (): HTMLGxImagePickerElement;
  };
  interface HTMLGxInteractiveImageElement
    extends Components.GxInteractiveImage,
      HTMLStencilElement {}
  var HTMLGxInteractiveImageElement: {
    prototype: HTMLGxInteractiveImageElement;
    new (): HTMLGxInteractiveImageElement;
  };
  interface HTMLGxLayoutElement
    extends Components.GxLayout,
      HTMLStencilElement {}
  var HTMLGxLayoutElement: {
    prototype: HTMLGxLayoutElement;
    new (): HTMLGxLayoutElement;
  };
  interface HTMLGxLoadingElement
    extends Components.GxLoading,
      HTMLStencilElement {}
  var HTMLGxLoadingElement: {
    prototype: HTMLGxLoadingElement;
    new (): HTMLGxLoadingElement;
  };
  interface HTMLGxLottieElement
    extends Components.GxLottie,
      HTMLStencilElement {}
  var HTMLGxLottieElement: {
    prototype: HTMLGxLottieElement;
    new (): HTMLGxLottieElement;
  };
  interface HTMLGxMapElement extends Components.GxMap, HTMLStencilElement {}
  var HTMLGxMapElement: {
    prototype: HTMLGxMapElement;
    new (): HTMLGxMapElement;
  };
  interface HTMLGxMapCircleElement
    extends Components.GxMapCircle,
      HTMLStencilElement {}
  var HTMLGxMapCircleElement: {
    prototype: HTMLGxMapCircleElement;
    new (): HTMLGxMapCircleElement;
  };
  interface HTMLGxMapLineElement
    extends Components.GxMapLine,
      HTMLStencilElement {}
  var HTMLGxMapLineElement: {
    prototype: HTMLGxMapLineElement;
    new (): HTMLGxMapLineElement;
  };
  interface HTMLGxMapMarkerElement
    extends Components.GxMapMarker,
      HTMLStencilElement {}
  var HTMLGxMapMarkerElement: {
    prototype: HTMLGxMapMarkerElement;
    new (): HTMLGxMapMarkerElement;
  };
  interface HTMLGxMapPolygonElement
    extends Components.GxMapPolygon,
      HTMLStencilElement {}
  var HTMLGxMapPolygonElement: {
    prototype: HTMLGxMapPolygonElement;
    new (): HTMLGxMapPolygonElement;
  };
  interface HTMLGxMessageElement
    extends Components.GxMessage,
      HTMLStencilElement {}
  var HTMLGxMessageElement: {
    prototype: HTMLGxMessageElement;
    new (): HTMLGxMessageElement;
  };
  interface HTMLGxModalElement extends Components.GxModal, HTMLStencilElement {}
  var HTMLGxModalElement: {
    prototype: HTMLGxModalElement;
    new (): HTMLGxModalElement;
  };
  interface HTMLGxNavbarElement
    extends Components.GxNavbar,
      HTMLStencilElement {}
  var HTMLGxNavbarElement: {
    prototype: HTMLGxNavbarElement;
    new (): HTMLGxNavbarElement;
  };
  interface HTMLGxNavbarItemElement
    extends Components.GxNavbarItem,
      HTMLStencilElement {}
  var HTMLGxNavbarItemElement: {
    prototype: HTMLGxNavbarItemElement;
    new (): HTMLGxNavbarItemElement;
  };
  interface HTMLGxPasswordEditElement
    extends Components.GxPasswordEdit,
      HTMLStencilElement {}
  var HTMLGxPasswordEditElement: {
    prototype: HTMLGxPasswordEditElement;
    new (): HTMLGxPasswordEditElement;
  };
  interface HTMLGxProgressBarElement
    extends Components.GxProgressBar,
      HTMLStencilElement {}
  var HTMLGxProgressBarElement: {
    prototype: HTMLGxProgressBarElement;
    new (): HTMLGxProgressBarElement;
  };
  interface HTMLGxRadioGroupElement
    extends Components.GxRadioGroup,
      HTMLStencilElement {}
  var HTMLGxRadioGroupElement: {
    prototype: HTMLGxRadioGroupElement;
    new (): HTMLGxRadioGroupElement;
  };
  interface HTMLGxRadioOptionElement
    extends Components.GxRadioOption,
      HTMLStencilElement {}
  var HTMLGxRadioOptionElement: {
    prototype: HTMLGxRadioOptionElement;
    new (): HTMLGxRadioOptionElement;
  };
  interface HTMLGxRatingElement
    extends Components.GxRating,
      HTMLStencilElement {}
  var HTMLGxRatingElement: {
    prototype: HTMLGxRatingElement;
    new (): HTMLGxRatingElement;
  };
  interface HTMLGxSelectElement
    extends Components.GxSelect,
      HTMLStencilElement {}
  var HTMLGxSelectElement: {
    prototype: HTMLGxSelectElement;
    new (): HTMLGxSelectElement;
  };
  interface HTMLGxSelectOptionElement
    extends Components.GxSelectOption,
      HTMLStencilElement {}
  var HTMLGxSelectOptionElement: {
    prototype: HTMLGxSelectOptionElement;
    new (): HTMLGxSelectOptionElement;
  };
  interface HTMLGxSwitchElement
    extends Components.GxSwitch,
      HTMLStencilElement {}
  var HTMLGxSwitchElement: {
    prototype: HTMLGxSwitchElement;
    new (): HTMLGxSwitchElement;
  };
  interface HTMLGxTabElement extends Components.GxTab, HTMLStencilElement {}
  var HTMLGxTabElement: {
    prototype: HTMLGxTabElement;
    new (): HTMLGxTabElement;
  };
  interface HTMLGxTabCaptionElement
    extends Components.GxTabCaption,
      HTMLStencilElement {}
  var HTMLGxTabCaptionElement: {
    prototype: HTMLGxTabCaptionElement;
    new (): HTMLGxTabCaptionElement;
  };
  interface HTMLGxTabPageElement
    extends Components.GxTabPage,
      HTMLStencilElement {}
  var HTMLGxTabPageElement: {
    prototype: HTMLGxTabPageElement;
    new (): HTMLGxTabPageElement;
  };
  interface HTMLGxTableElement extends Components.GxTable, HTMLStencilElement {}
  var HTMLGxTableElement: {
    prototype: HTMLGxTableElement;
    new (): HTMLGxTableElement;
  };
  interface HTMLGxTableCellElement
    extends Components.GxTableCell,
      HTMLStencilElement {}
  var HTMLGxTableCellElement: {
    prototype: HTMLGxTableCellElement;
    new (): HTMLGxTableCellElement;
  };
  interface HTMLGxTextblockElement
    extends Components.GxTextblock,
      HTMLStencilElement {}
  var HTMLGxTextblockElement: {
    prototype: HTMLGxTextblockElement;
    new (): HTMLGxTextblockElement;
  };
  interface HTMLGxVideoElement extends Components.GxVideo, HTMLStencilElement {}
  var HTMLGxVideoElement: {
    prototype: HTMLGxVideoElement;
    new (): HTMLGxVideoElement;
  };
  interface HTMLElementTagNameMap {
    "gx-action-sheet": HTMLGxActionSheetElement;
    "gx-action-sheet-item": HTMLGxActionSheetItemElement;
    "gx-audio": HTMLGxAudioElement;
    "gx-button": HTMLGxButtonElement;
    "gx-canvas": HTMLGxCanvasElement;
    "gx-canvas-cell": HTMLGxCanvasCellElement;
    "gx-card": HTMLGxCardElement;
    "gx-card-header": HTMLGxCardHeaderElement;
    "gx-checkbox": HTMLGxCheckboxElement;
    "gx-chronometer": HTMLGxChronometerElement;
    "gx-dynamic-form": HTMLGxDynamicFormElement;
    "gx-edit": HTMLGxEditElement;
    "gx-form-field": HTMLGxFormFieldElement;
    "gx-gauge": HTMLGxGaugeElement;
    "gx-gauge-range": HTMLGxGaugeRangeElement;
    "gx-grid-empty-indicator": HTMLGxGridEmptyIndicatorElement;
    "gx-grid-flex": HTMLGxGridFlexElement;
    "gx-grid-fs": HTMLGxGridFsElement;
    "gx-grid-horizontal": HTMLGxGridHorizontalElement;
    "gx-grid-image-map": HTMLGxGridImageMapElement;
    "gx-grid-image-map-item": HTMLGxGridImageMapItemElement;
    "gx-grid-infinite-scroll": HTMLGxGridInfiniteScrollElement;
    "gx-grid-infinite-scroll-content": HTMLGxGridInfiniteScrollContentElement;
    "gx-grid-smart-cell": HTMLGxGridSmartCellElement;
    "gx-grid-smart-css": HTMLGxGridSmartCssElement;
    "gx-group": HTMLGxGroupElement;
    "gx-header-row-pattern-marker": HTMLGxHeaderRowPatternMarkerElement;
    "gx-icon": HTMLGxIconElement;
    "gx-image": HTMLGxImageElement;
    "gx-image-annotations": HTMLGxImageAnnotationsElement;
    "gx-image-picker": HTMLGxImagePickerElement;
    "gx-interactive-image": HTMLGxInteractiveImageElement;
    "gx-layout": HTMLGxLayoutElement;
    "gx-loading": HTMLGxLoadingElement;
    "gx-lottie": HTMLGxLottieElement;
    "gx-map": HTMLGxMapElement;
    "gx-map-circle": HTMLGxMapCircleElement;
    "gx-map-line": HTMLGxMapLineElement;
    "gx-map-marker": HTMLGxMapMarkerElement;
    "gx-map-polygon": HTMLGxMapPolygonElement;
    "gx-message": HTMLGxMessageElement;
    "gx-modal": HTMLGxModalElement;
    "gx-navbar": HTMLGxNavbarElement;
    "gx-navbar-item": HTMLGxNavbarItemElement;
    "gx-password-edit": HTMLGxPasswordEditElement;
    "gx-progress-bar": HTMLGxProgressBarElement;
    "gx-radio-group": HTMLGxRadioGroupElement;
    "gx-radio-option": HTMLGxRadioOptionElement;
    "gx-rating": HTMLGxRatingElement;
    "gx-select": HTMLGxSelectElement;
    "gx-select-option": HTMLGxSelectOptionElement;
    "gx-switch": HTMLGxSwitchElement;
    "gx-tab": HTMLGxTabElement;
    "gx-tab-caption": HTMLGxTabCaptionElement;
    "gx-tab-page": HTMLGxTabPageElement;
    "gx-table": HTMLGxTableElement;
    "gx-table-cell": HTMLGxTableCellElement;
    "gx-textblock": HTMLGxTextblockElement;
    "gx-video": HTMLGxVideoElement;
  }
}
declare namespace LocalJSX {
  interface GxActionSheet {
    /**
     * This attribute lets you specify the label for the close button. Important for accessibility.
     */
    closeButtonLabel?: string;
    /**
     * Fired when the action sheet is closed
     */
    onClose?: (event: GxActionSheetCustomEvent<any>) => void;
    /**
     * Fired when the action sheet is opened
     */
    onOpen?: (event: GxActionSheetCustomEvent<any>) => void;
    /**
     * This attribute lets you specify if the action sheet is opened or closed.
     */
    opened?: boolean;
  }
  interface GxActionSheetItem {
    /**
     * This attribute lets you specify the type of action. `"cancel"` and `"destructive"` are styled differently
     */
    actionType?: "default" | "destructive";
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, gxClick event).
     */
    disabled?: false;
    /**
     * Fired when the action sheet item is clicked
     */
    onActionSheetItemClick?: (event: GxActionSheetItemCustomEvent<any>) => void;
  }
  interface GxAudio {
    /**
     * This attribute lets you specify if the element is disabled.
     */
    disabled?: false;
    /**
     * This attribute is for specifies the src of the audio.
     */
    src?: string;
  }
  interface GxButton {
    /**
     * A CSS class to set as the `gx-button` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event). If a disabled image has been specified, it will be shown, hiding the base image (if specified).
     */
    disabled?: false;
    /**
     * This attribute lets you specify the height.
     */
    height?: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: true;
    /**
     * This attribute lets you specify the relative location of the image to the text.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `above`  | The image is located above the text.                    | | `before` | The image is located before the text, in the same line. | | `after`  | The image is located after the text, in the same line.  | | `below`  | The image is located below the text.                    | | `behind` | The image is located behind the text.                   |
     */
    imagePosition?: "above" | "before" | "after" | "below" | "behind";
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Emitted when the element is clicked, the enter key is pressed or the space key is pressed and released.
     */
    onClick?: (event: GxButtonCustomEvent<any>) => void;
    /**
     * This attribute lets you specify the width.
     */
    width?: string;
  }
  interface GxCanvas {
    /**
     * A CSS class to set as the `gx-canvas` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: boolean;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * This attribute defines when the layout has been fully loaded. Useful for determining if the canvas control can set the auto-grow mechanism
     */
    layoutIsReady?: boolean;
    /**
     * This attribute defines the minimum height of the cell when its contents are visible.
     */
    minHeight?: string;
    /**
     * Emitted when the element is clicked.
     */
    onGxClick?: (event: GxCanvasCustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped.
     */
    onSwipe?: (event: GxCanvasCustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped downward direction.
     */
    onSwipeDown?: (event: GxCanvasCustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped left direction.
     */
    onSwipeLeft?: (event: GxCanvasCustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped right direction.
     */
    onSwipeRight?: (event: GxCanvasCustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped in upward direction.
     */
    onSwipeUp?: (event: GxCanvasCustomEvent<any>) => void;
    /**
     * This attribute lets you specify the width of the control.
     */
    width?: string;
  }
  interface GxCanvasCell {
    /**
     * Defines the horizontal alignment of the content of the cell.
     */
    align?: "left" | "right" | "center";
    /**
     * Defines the left position of the control which is relative to the position of its `gx-canvas` container. This attribute maps directly to the `left` CSS property.
     */
    left?: string;
    /**
     * This attribute defines the maximum height of the cell.
     */
    maxHeight?: string;
    /**
     * This attribute defines the minimum height of the cell.
     */
    minHeight?: string;
    /**
     * Defines the top position of the control which is relative to the position of its `gx-canvas` container. This attribute maps directly to the `top` CSS property.
     */
    top?: string;
    /**
     * Defines the vertical alignment of the content of the cell.
     */
    valign?: "top" | "bottom" | "middle";
    /**
     * This attribute lets you specify the width of the control.
     */
    width?: string;
  }
  interface GxCard {
    /**
     * True to show the card header. False to hide it.
     */
    showHeader?: true;
  }
  interface GxCardHeader {
    /**
     * This attribute lets you specify the label for the low priority actions toggle button. Important for accessibility.
     */
    actionToggleButtonLabel?: string;
    /**
     * A CSS class to set for the header and footer element classes of the `gx-card` control.
     */
    cssClass?: string;
  }
  interface GxCheckbox {
    /**
     * Specifies the label of the checkbox.
     */
    caption?: string;
    /**
     * Indicates that the control is selected by default.
     */
    checked?: boolean;
    /**
     * The value when the checkbox is 'on'
     */
    checkedValue?: string;
    /**
     * A CSS class to set as the `gx-checkbox` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The `input` event is emitted when a change to the element's value is committed by the user.
     */
    onInput?: (event: GxCheckboxCustomEvent<any>) => void;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly?: false;
    /**
     * The value when the checkbox is 'off'
     */
    unCheckedValue?: string;
    /**
     * The value of the control.
     */
    value?: string;
  }
  interface GxChronometer {
    /**
     * A CSS class to set as the `gx-chronometer` element class.
     */
    cssClass?: string;
    /**
     * Defines the interval that the function onTick will be called.
     */
    interval?: number;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * When the chronometer reaches this value, MaxValueText will be shown instead of the Chronometer value.
     */
    maxValue?: number;
    /**
     * Text to be displayed when chronometer value reaches maxValue.
     */
    maxValueText?: string;
    /**
     * The `change` event is emitted every time the chronometer changes
     */
    onChange?: (event: GxChronometerCustomEvent<any>) => void;
    /**
     * Event to emit after max time is consumed.
     */
    onEnd?: (event: GxChronometerCustomEvent<any>) => void;
    /**
     * The `input` event is emitted every time the chronometer changes (every 1 second)
     */
    onInput?: (event: GxChronometerCustomEvent<any>) => void;
    /**
     * Event to emit After elapsed time (tickInterval).
     */
    onTick?: (event: GxChronometerCustomEvent<any>) => void;
    /**
     * State of the Chronometer.
     */
    state?: TimerState;
    /**
     * Time unit: (s) seconds or (ms) milliseconds for every time control Property.
     */
    unit?: "s" | "ms";
    /**
     * The value of the control.
     */
    value?: number;
  }
  interface GxDynamicForm {
    /**
     * This attribute let you specify the elements, rules and conditions of the dynamic form. Must be a JSON string, based on DynamicForm SDT
     */
    elements?: string;
    /**
     * A css class to set to attributes when a error occurs
     */
    errorCssClass?: string;
    /**
     * A css class to set to attributes
     */
    inputCssClass?: string;
    /**
     * Emitted when a message is shown
     */
    onOnMessage?: (event: GxDynamicFormCustomEvent<any>) => void;
    /**
     * Emitted when the form is submitted
     */
    onOnSubmitForm?: (event: GxDynamicFormCustomEvent<any>) => void;
    /**
     * This attribute let you specify if the dynamic form is readonly
     */
    readonly?: boolean;
    /**
     * This attribute let you specify if this dynamic form is a subgroup of another dynamic form
     */
    subgroup?: boolean;
    /**
     * A css class to set to attributes when a warning occurs
     */
    warningCssClass?: string;
  }
  interface GxEdit {
    /**
     * Allows to specify the role of the element when inside a `gx-form-field` element
     */
    area?: "field";
    /**
     * Specifies the auto-capitalization behavior. Same as [autocapitalize](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#//apple_ref/doc/uid/TP40008058-autocapitalize) attribute for `input` elements. Only supported by Safari and Chrome.
     */
    autocapitalize?: string;
    /**
     * This attribute indicates whether the value of the control can be automatically completed by the browser. Same as [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete) attribute for `input` elements.
     */
    autocomplete?: "on" | "off";
    /**
     * Used to control whether autocorrection should be enabled when the user is entering/editing the text value. Sames as [autocorrect](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocorrect) attribute for `input` elements.
     */
    autocorrect?: string;
    /**
     * A CSS class to set as the `gx-edit` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * Used to define the semantic of the element when `readonly="true"`.
     */
    fontCategory?: FontCategory;
    /**
     * It specifies the format that will have the edit control.  If `format` = `HTML`, the edit control works as an HTML div and the innerHTML will be the same as the `inner` property specifies. Also, it does not allow any input/editable UI since it works as an HTML div.  If `format` = `Text`, the edit control works as a normal input control and it is affected by most of the defined properties.
     */
    format?: "Text" | "HTML";
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: boolean;
    /**
     * The text to set as the label of the gx-edit control.
     */
    labelCaption?: string;
    /**
     * True to cut text when it overflows, showing an ellipsis (only applies when readonly)
     */
    lineClamp?: false;
    /**
     * Controls if the element accepts multiline text.
     */
    multiline?: boolean;
    /**
     * The `change` event is emitted when a change to the element's value is committed by the user. Unlike the `input` event, the `change` event is not necessarily fired for each change to an element's value but when the control loses focus.
     */
    onChange?: (event: GxEditCustomEvent<any>) => void;
    /**
     * The `gxTriggerClick` event is fired when the trigger button is clicked.
     */
    onGxTriggerClick?: (event: GxEditCustomEvent<any>) => void;
    /**
     * The `input` event is fired synchronously when the value is changed.
     */
    onInput?: (event: GxEditCustomEvent<any>) => void;
    /**
     * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
     */
    placeholder?: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly?: boolean;
    /**
     * If true, a trigger button is shown next to the edit field. The button can be customized adding a child element with `slot="trigger-content"` attribute to specify the content inside the trigger button.
     */
    showTrigger?: boolean;
    /**
     * This attribute lets you specify the label for the trigger button. Important for accessibility.
     */
    triggerButtonLabel?: string;
    /**
     * The type of control to render. A subset of the types supported by the `input` element is supported:  * `"date"` * `"datetime-local"` * `"email"` * `"file"` * `"number"` * `"password"` * `"search"` * `"tel"` * `"text"` * `"url"`
     */
    type?: EditType;
    /**
     * The initial value of the control.
     */
    value?: string;
  }
  interface GxFormField {
    /**
     * A CSS class to set as the `gx-form-field` label element class. This property must match with the `cssClass` used by the inner control. Therefore, to style the `gx-form-field` label, the control applies some transformations to the label to get the appropriate classes.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The text to set as the label of the field.
     */
    labelCaption?: string;
    /**
     * The position where the label will be located, relative to the edit control. The supported values are:  * `"top"`: The label is located above the edit control. * `"right"`: The label is located at the right side of the edit control. * `"bottom"`: The label is located below the edit control. * `"left"`: The label is located at the left side of the edit control. * `"float"`: The label is shown as a placeholder when the edit control's value is empty. When the value is not empty, the label floats and locates above the edit control. * `"none"`: The label is rendered, but hidden.
     */
    labelPosition?: "none" | "top" | "right" | "bottom" | "left" | "float";
  }
  interface GxGauge {
    /**
     * A CSS class to set as the `gx-gauge` element class.
     */
    cssClass?: string;
    /**
     * The maximum value of the gauge. This prop allows specify the maximum value that the gauge will handle. If there is no value specified it will be calculated by the sum of all gx-ranges values
     */
    maxValue?: number;
    /**
     * The minimum value of the gauge 0 by Default
     */
    minValue?: number;
    /**
     * The `gxGaugeDidLoad` event is triggered when the component has been rendered completely.
     */
    onGxGaugeDidLoad?: (event: GxGaugeCustomEvent<any>) => void;
    /**
     * Set `true` to display the minimum and maximum value. Default is `false`.
     */
    showMinMax?: boolean;
    /**
     * Set `true` to display the current value. Default is `false`.
     */
    showValue?: boolean;
    /**
     * Allows specify the width of the circumference _(When gauge is circle type)_ or the width of the bar _(When gauge is Line type)_ in % relative the component size.
     */
    thickness?: number;
    /**
     * This property allows selecting the gauge type. The allowed values are `circle` or `line` (defautl).
     */
    type?: "line" | "circle";
    /**
     * The current value of the gauge
     */
    value?: number;
  }
  interface GxGaugeRange {
    /**
     * The range length.
     */
    amount?: number;
    /**
     * Color property defines the color of range background. Color value can be any valid CSS color.
     */
    color?: string;
    /**
     * The name of the range.
     */
    name?: string;
    /**
     * The gxGaugeRangeDidLoad is triggered when the component has been added and its render completely ran.
     */
    onGxGaugeRangeDidLoad?: (event: GxGaugeRangeCustomEvent<any>) => void;
    /**
     * The gxGaugeRangeDidUnload is triggered when the component has been deleted
     */
    onGxGaugeRangeDidUnload?: (event: GxGaugeRangeCustomEvent<any>) => void;
    /**
     * The gxGaugeRangeDidUpdate is triggered when a property of the component has been changed.
     */
    onGxGaugeRangeDidUpdate?: (event: GxGaugeRangeCustomEvent<any>) => void;
  }
  interface GxGridEmptyIndicator {
    /**
     * This attribute lets you specify the `src` of the image to be shown.
     */
    image?: "";
    /**
     * A CSS class to set as the inner `image` element class.
     */
    imageClass?: "";
    /**
     * This attribute lets you specify the `srcset` of the image to be shown.
     */
    imageSet?: "";
    /**
     * Text to be displayed
     */
    text?: "";
    /**
     * A CSS class to set as the inner `text` element class.
     */
    textClass?: "";
  }
  interface GxGridFlex {
    /**
     * This aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how justify-content aligns individual items within the main-axis.  | Value           | Details                                                                                  | | --------------- | ---------------------------------------------------------------------------------------- | | `center`        | Lines are packed toward the center of the flex container.                                | | `flex-end`      | Lines are packed toward the start of the flex container.                                 | | `flex-start`    | Lines are packed toward the end of the flex container.                                   | | `space-around`  | Lines are evenly distributed in the flex container, with half-size spaces on either end. | | `space-between` | Lines are evenly distributed in the flex container.                                      | | `stretch`       | Lines stretch to take up the remaining space.                                            |
     */
    alignContent?:
      | "center"
      | "flex-end"
      | "flex-start"
      | "space-around"
      | "space-between"
      | "stretch";
    /**
     * This attribute lets you define the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the justify-content version for the cross-axis (perpendicular to the main-axis).  | Value           | Details                                                                                                                                                            | | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ | | `baseline`      | Controls are aligned such as their baselines align. This is useful to have several texts from different controls aligned taking into account different font sizes. | | `center`        | Controls are positioned at the center of the container.                                                                                                            | | `flex-end`      | Controls are positioned at the end of the container.                                                                                                               | | `flex-start`    | Controls are positioned at the beginning of the container.                                                                                                         | | `stretch`       | Controls are stretched to fit the container. In other words, children match the size of their container in the cross axis.                                         |
     */
    alignItems?: "baseline" | "center" | "flex-end" | "flex-start" | "stretch";
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow?: false;
    /**
     * A CSS class to set as the `gx-grid-flex` element class.
     */
    cssClass?: string;
    /**
     * Determines the direction of the main-axis (and the cross-axis, perpendicular to the main-axis). The direction children items are placed inside the Flexbox layout.  | Value            | Details                                                                                | | ---------------- | -------------------------------------------------------------------------------------- | | `column`         | Controls are displayed vertically, as a column (from top to bottom).                   | | `column-reverse` | Controls are displayed vertically, as a column, in reverse order (from bottom to top). | | `row`            | Controls are displayed horizontally, as a row (from left to right).                    | | `row-reverse`    | Controls are displayed horizontally, as a row, in reverse order (from right to left).  |
     */
    flexDirection?: FlexDirection;
    /**
     * Determine whether the flex container is single-line or multi-line, and the direction of the cross axis. This attribute specifies what happens when children overflow the size of the container along the main-axis of the layout container. By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this attribute.  | Value          | Details                                                       | | -------------- | ------------------------------------------------------------- | | `nowrap`       | All flex items will be on one line                            | | `wrap`         | Flex items will wrap onto multiple lines, from top to bottom. | | `wrap-reverse` | Flex items will wrap onto multiple lines from bottom to top.  |
     */
    flexWrap?: FlexWrap;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * This attribute lets you define the alignment along the main axis. It helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.  | Value           | Details                                                                  | | --------------- | ------------------------------------------------------------------------ | | `center`        | Controls are positioned at the center of the container.                  | | `flex-end`      | Controls are positioned at the end of the container.                     | | `flex-start`    | Controls are positioned at the beginning of the container.               | | `space-around`  | Controls are positioned with space before, between, and after the lines. | | `space-between` | Controls are positioned with space between the lines.                    | | `space-evenly`  | Controls are positioned with space evenly around them.                   |
     */
    justifyContent?:
      | "center"
      | "flex-end"
      | "flex-start"
      | "space-around"
      | "space-between"
      | "space-evenly";
    /**
     * Grid loading State. It's purpose is to know rather the Grid Loading animation or the Grid Empty placeholder should be shown.  | Value      | Details                                                                                          | | ---------- | ------------------------------------------------------------------------------------------------ | | `loading`  | The grid is waiting the server for the grid data. Grid loading mask will be shown.               | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState?: "loading" | "loaded";
    /**
     * This Handler will be called every time grid threshold is reached. Needed for infinite scrolling grids.
     */
    onGxInfiniteThresholdReached?: (event: GxGridFlexCustomEvent<void>) => void;
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders may not work correctly.
     */
    recordCount?: number;
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold?: string;
  }
  interface GxGridFs {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow?: false;
    /**
     * A CSS class to set as the `gx-grid-fs` element class.
     */
    cssClass?: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Grid loading State. It's purpose is to know rather the Grid Loading animation or the Grid Empty placeholder should be shown.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState?: "loading" | "loaded";
    /**
     * This Handler will be called every time grid threshold is reached. Needed for infinite scrolling grids.
     */
    onGxInfiniteThresholdReached?: (event: GxGridFsCustomEvent<void>) => void;
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders will not work correctly.
     */
    recordCount?: number;
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold?: string;
  }
  interface GxGridHorizontal {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow?: boolean;
    /**
     * Number of items per column (items visible at the same time on slider's container).
     */
    columns?: number | "auto";
    /**
     * A CSS class to set as the `gx-grid-horizontal` element class.
     */
    cssClass?: string;
    /**
     * 1-Indexed number of currently active page
     */
    currentPage?: number;
    /**
     * Items layout direction: Could be 'horizontal' or 'vertical' (for vertical slider).
     */
    direction?: "horizontal" | "vertical";
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Set numbers of items to define and enable group sliding. Useful to use with rowsPerPage > 1
     */
    itemsPerGroup?: 1;
    /**
     * Grid loading state. It's purpose is to know whether the grid loading animation or the grid empty placeholder should be shown.  | Value        | Details                                                                                        | | ------------ | ---------------------------------------------------------------------------------------------- | | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                | | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState?: "loading" | "loaded";
    /**
     * Logging level. For troubleshooting component update and initialization.
     */
    logLevel?: "debug" | "off";
    /**
     * Emitted when the user taps/clicks on the slide's container.
     */
    onGxGridClick?: (event: GxGridHorizontalCustomEvent<any>) => void;
    /**
     * Emitted after the active slide has changed.
     */
    onGxGridDidChange?: (event: GxGridHorizontalCustomEvent<number>) => void;
    /**
     * Emitted after Swiper initialization
     */
    onGxGridDidLoad?: (event: GxGridHorizontalCustomEvent<void>) => void;
    /**
     * Emitted when the user double taps on the slide's container.
     */
    onGxGridDoubleClick?: (event: GxGridHorizontalCustomEvent<any>) => void;
    /**
     * Emitted when the slider is actively being moved.
     */
    onGxGridDrag?: (event: GxGridHorizontalCustomEvent<any>) => void;
    /**
     * Emitted when the next slide has ended.
     */
    onGxGridNextEnd?: (event: GxGridHorizontalCustomEvent<any>) => void;
    /**
     * Emitted when the next slide has started.
     */
    onGxGridNextStart?: (event: GxGridHorizontalCustomEvent<any>) => void;
    /**
     * Emitted when the previous slide has ended.
     */
    onGxGridPrevEnd?: (event: GxGridHorizontalCustomEvent<any>) => void;
    /**
     * Emitted when the previous slide has started.
     */
    onGxGridPrevStart?: (event: GxGridHorizontalCustomEvent<any>) => void;
    /**
     * Emitted when the slider is at the last slide.
     */
    onGxGridReachEnd?: (event: GxGridHorizontalCustomEvent<void>) => void;
    /**
     * Emitted when the slider is at its initial position.
     */
    onGxGridReachStart?: (event: GxGridHorizontalCustomEvent<any>) => void;
    /**
     * Emitted when the user releases the touch.
     */
    onGxGridTouchEnd?: (event: GxGridHorizontalCustomEvent<any>) => void;
    /**
     * Emitted when the user first touches the slider.
     */
    onGxGridTouchStart?: (event: GxGridHorizontalCustomEvent<any>) => void;
    /**
     * Emitted when the slide transition has ended.
     */
    onGxGridTransitionEnd?: (event: GxGridHorizontalCustomEvent<any>) => void;
    /**
     * Emitted when the slide transition has started.
     */
    onGxGridTransitionStart?: (event: GxGridHorizontalCustomEvent<any>) => void;
    /**
     * Emitted before the active slide has changed.
     */
    onGxGridWillChange?: (event: GxGridHorizontalCustomEvent<any>) => void;
    /**
     * This Handler will be called every time grid threshold is reached. Needed for infinite scrolling grids.
     */
    onGxInfiniteThresholdReached?: (
      event: GxGridHorizontalCustomEvent<void>
    ) => void;
    /**
     * Advanced options to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options
     */
    options?: SwiperOptions;
    /**
     * Specifies the orientation mode.
     */
    orientation?: "portrait" | "landscape";
    /**
     * A CSS class to set as the  Page Controller element class when `showPageController = "true"`.
     */
    pageControllerClass?: string;
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders will not work correctly.
     */
    recordCount?: number;
    /**
     * Specifies the number of rows that will be displayed in the portrait mode.
     */
    rows?: number;
    /**
     * Specifies the number of rows that will be displayed in the landscape mode.
     */
    rowsLandscape?: number;
    /**
     * If `true`, show the scrollbar.
     */
    scrollbar?: false;
    /**
     * If `true`, show the pagination buttons (page controller).
     */
    showPageController?: true;
    /**
     * Set to false to enable slides in free mode position.
     */
    snapToGrid?: true;
  }
  interface GxGridImageMap {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows. This property is not currently supported in the gx-image-map control.
     */
    autoGrow?: false;
    /**
     * A CSS class to set as the `gx-grid-image-map` element class.
     */
    cssClass?: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: boolean;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Grid loading State. It's purpose is to know rather the Grid Loading animation or the Grid Empty placeholder should be shown.  | Value        | Details                                                                                          | | ------------ | ------------------------------------------------------------------------------------------------ | | `loading`    | The grid is waiting the server for the grid data. Grid loading mask will be shown.               | | `loaded`     | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState?: "loading" | "loaded";
    /**
     * True if the control should implement and emit longPress event.
     */
    longPressable?: boolean;
    /**
     * This Handler will be called every time grid threshold is reached. Needed for infinite scrolling grids.
     */
    onGxInfiniteThresholdReached?: (
      event: GxGridImageMapCustomEvent<void>
    ) => void;
    /**
     * Emitted when the element is zoomed in or out.
     */
    onGxZoom?: (event: GxGridImageMapCustomEvent<any>) => void;
    /**
     * Emitted when the element is long pressed.
     */
    onLongPress?: (event: GxGridImageMapCustomEvent<any>) => void;
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders may not work correctly.
     */
    recordCount?: number;
    /**
     * This attribute lets you specify the src of the background image.
     */
    src?: string;
    /**
     * This attribute lets you specify the srcset of the background image.
     */
    srcset?: string;
    /**
     * This property lets you specify a user tip that will be displayed as a message on the image map when the mouse is over it. This hint is used to indicate the image map can be zoomed.  When the user zooms into the image map for the first time, this hint will no longer be displayed.
     */
    tooltipText?: string;
  }
  interface GxGridImageMapItem {
    /**
     * A CSS class to set as the `gx-grid-image-map-item` element class.
     */
    cssClass?: string;
    /**
     * This attributes lets you specify the item's height. This attribute maps directly to the `height` CSS property.
     */
    height?: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: boolean;
    /**
     * Defines the left position of the control which is relative to the position of its `gx-grid-image-map` container. This attribute maps directly to the `left` CSS property.
     */
    left?: string;
    /**
     * Emitted when the element is clicked.
     */
    onGxClick?: (event: GxGridImageMapItemCustomEvent<any>) => void;
    /**
     * This attributes lets you specify the item's rotation. This attribute maps directly to the `rotation` CSS property.
     */
    rotation?: string;
    /**
     * Defines the top position of the control which is relative to the position of its `gx-grid-image-map` container. This attribute maps directly to the `top` CSS property.
     */
    top?: string;
    /**
     * This attributes lets you specify the item's width. This attribute maps directly to the `width` CSS property.
     */
    width?: string;
  }
  interface GxGridInfiniteScroll {
    /**
     * If `true`, the infinite scroll will be hidden and scroll event listeners will be removed.  Set this to true to disable the infinite scroll from actively trying to receive new data while scrolling. This is useful when it is known that there is no more data that can be added, and the infinite scroll is no longer needed.
     */
    disabled?: boolean;
    /**
     * This property must be bounded to grid item count property. It's unique purpose is to trigger gxInfinite as many times as needed to fullfill the Container space when the initial batch does not overflow the main container
     */
    itemCount?: number;
    /**
     * The main layout selector where the infinite scroll is contained.
     */
    layoutSelector?: string;
    /**
     * Emitted when the scroll reaches the threshold distance. From within your infinite handler, you must call the infinite scroll's `complete()` method when your async operation has completed.
     */
    onGxInfinite?: (event: GxGridInfiniteScrollCustomEvent<void>) => void;
    /**
     * The position of the infinite scroll element. The value can be either `top` or `bottom`.
     */
    position?: "top" | "bottom";
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold?: string;
    /**
     * The View Port parent element selector where the infinite component would be attached to and listening to Scroll Events.
     */
    viewportSelector?: string;
  }
  interface GxGridInfiniteScrollContent {}
  interface GxGridSmartCell {
    /**
     * The CSS class of gx-grid parent element.
     */
    cssClass?: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify the index of the cell. Useful when Inverse Loading is enabled on the grid.
     */
    index?: number;
    /**
     * Whether this row is even position or not. This is specially required in Virtual scroll scenarios where the position in the DOM is not the real position in the collection.
     */
    isRowEven?: false;
    /**
     * Number of Columns to be shown in the grid. Useful when Inverse Loading is enabled on the grid.
     */
    itemsPerRow?: number;
    /**
     * True to show horizontal line.
     */
    showHorizontalLine?: false;
  }
  interface GxGridSmartCss {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow?: false;
    /**
     * A CSS class to set as the `gx-grid-smart-css` element class.
     */
    cssClass?: string;
    /**
     * Specifies the direction of the flexible items.
     */
    direction?: "vertical" | "horizontal";
    /**
     * When set to `true`, the grid items will be loaded in inverse order, with the first element at the bottom and the "Loading" message (infinite-scroll) at the top. Inverse Loading is currently supported when:  - `direction = "vertical"`  - `itemLayoutMode = "single" | "mbyq"`
     */
    inverseLoading?: boolean;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Grid Item Layout Mode: Single, Multiple by quantity, multiple by size.
     */
    itemLayoutMode?: "single" | "mbyq" | "mbys";
    /**
     * Grid loading State. It's purpose is to know rather the Grid Loading animation or the Grid Empty placeholder should be shown.  | Value        | Details                                                                                          | | ------------ | ------------------------------------------------------------------------------------------------ | | `loading`    | The grid is waiting the server for the grid data. Grid loading mask will be shown.               | | `loaded`     | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    loadingState?: "loading" | "loaded";
    /**
     * This Handler will be called every time grid threshold is reached. Needed for infinite scrolling grids.
     */
    onGxInfiniteThresholdReached?: (
      event: GxGridSmartCssCustomEvent<void>
    ) => void;
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes. If not specified, then grid empty and loading placeholders may not work correctly.
     */
    recordCount?: number;
    /**
     * Scroll snapping allows to lock the viewport to certain elements or locations after a user has finished scrolling
     */
    snapToGrid?: false;
    /**
     * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
     */
    threshold?: string;
  }
  interface GxGroup {
    /**
     * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
     */
    autoGrow?: boolean;
    /**
     * Attribute that provides the caption to the <legend> tag
     */
    caption?: string;
    /**
     * A CSS class to set as the `gx-group` element class.
     */
    cssClass?: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
  }
  interface GxHeaderRowPatternMarker {
    /**
     * The `headerRowPatternBreakpoint` event is fired synchronously when the control changes its visibility in the viewport.
     */
    onHeaderRowPatternBreakpoint?: (
      event: GxHeaderRowPatternMarkerCustomEvent<boolean>
    ) => void;
  }
  interface GxIcon {
    /**
     * The color of the icon.
     */
    color?: string;
    /**
     * A label for the icon, for screen readers to use.
     */
    label?: string;
    /**
     * If enabled, the icon will be loaded lazily when it's visible in the viewport.
     */
    lazy?: boolean;
    /**
     * The type of icon. Possible values: the name each of the icons in /assets.
     */
    type?: string;
  }
  interface GxImage {
    /**
     * This attribute lets you specify the alternative text.
     */
    alt?: string;
    /**
     * If true, the component will be sized to match the image's intrinsic size when not constrained via CSS dimension properties (for example, height or width). If false, the component will never force its height to match the image's intrinsic size. The width, however, will match the intrinsic width. In GeneXus terms, it will auto grow horizontally, but not vertically.
     */
    autoGrow?: true;
    /**
     * A CSS class to set as the `gx-image` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * True to lazy load the image, when it enters the viewport.
     */
    lazyLoad?: true;
    /**
     * This attribute allows specifing how the image is sized according to its container. `contain`, `cover`, `fill` and `none` map directly to the values of the CSS `object-fit` property. The `tile` value repeats the image, both vertically and horizontally, creating a tile effect.
     */
    scaleType?: "contain" | "cover" | "fill" | "none" | "tile";
    /**
     * True to show the image picker button.
     */
    showImagePickerButton?: boolean;
    /**
     * This attribute lets you specify the `src` of the `img`.
     */
    src?: string;
    /**
     * This attribute lets you specify the `srcset` of the `img`. The `srcset` attribute defines the set of images we will allow the browser to choose between, and what size each image is. Each set of image information is separated from the previous one by a comma.
     */
    srcset?: string;
  }
  interface GxImageAnnotations {
    /**
     * If the annotations are activated or not.
     */
    disabled?: false;
    /**
     * Specifies the `fontFamily` for the texts
     */
    fontFamily?: string;
    /**
     * Specifies the `fontSize` for the texts
     */
    fontSize?: number;
    /**
     * The source of the background image.
     */
    imageLabel?: "Image to be annotated";
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Specifies the lines that will be drawn on the gx-image-annotations control
     */
    lines?: ImageAnnotationLine[];
    /**
     * Fired when the annotations change.
     */
    onAnnotationsChange?: (
      event: GxImageAnnotationsCustomEvent<AnnotationsChangeEvent>
    ) => void;
    /**
     * Fired when the traceIndex property value is changed.
     */
    onTraceIndexChange?: (event: GxImageAnnotationsCustomEvent<number>) => void;
    /**
     * Specifies the texts that will be drawn on the gx-image-annotations control
     */
    texts?: ImageAnnotationText[];
    /**
     * Drawing color.
     */
    traceColor?: string;
    /**
     * Property used for change the traceInd state and go forward or backward.
     */
    traceIndex?: number;
    /**
     * Drawing thickness.
     */
    traceThickness?: number;
    /**
     * The source of the background image.
     */
    value?: string;
  }
  interface GxImagePicker {
    /**
     * This attribute lets you specify the alternative text.
     */
    alt?: string;
    /**
     * If true, the component will be sized to match the image's intrinsic size when not constrained via CSS dimension properties (for example, height or width). If false, the component will never force its height to match the image's intrinsic size. The width, however, will match the intrinsic width. In GeneXus terms, it will auto grow horizontally, but not vertically.
     */
    autoGrow?: true;
    /**
     * This attribute lets you specify the description of the cancel action button in the modal.
     */
    cancelButtonText?: "CANCEL";
    /**
     * This attribute lets you specify the description of the change image button in the modal.
     */
    changeButtonText?: "Change image";
    /**
     * A CSS class to set as the `gx-image-picker` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * True to lazy load the image, when it enters the viewport.
     */
    lazyLoad?: true;
    /**
     * This attribute lets you specify the modal title.
     */
    modalTitle?: string;
    /**
     * Fired when the image is clicked
     */
    onClick?: (event: GxImagePickerCustomEvent<any>) => void;
    /**
     * Fired when the image is changed
     */
    onOnImageChanged?: (event: GxImagePickerCustomEvent<File>) => void;
    /**
     * This attribute lets you specify if the image is readonly. If readonly, it will not allow to use the edit button. In fact, the edit button will not be shown.
     */
    readonly?: false;
    /**
     * This attribute lets you specify the description of the remove image button in the modal.
     */
    removeButtonText?: "Remove image";
    /**
     * This attribute allows specifing how the image is sized according to its container. `contain`, `cover`, `fill` and `none` map directly to the values of the CSS `object-fit` property. The `tile` value repeats the image, both vertically and horizontally, creating a tile effect.
     */
    scaleType?: "contain" | "cover" | "fill" | "none" | "tile";
    /**
     * This attribute lets you specify the `src` of the `img`.
     */
    src?: string;
    /**
     * This attribute lets you specify the `srcset` of the `img`. The `srcset` attribute defines the set of images we will allow the browser to choose between, and what size each image is. Each set of image information is separated from the previous one by a comma.
     */
    srcset?: string;
    /**
     * This attribute lets you specify the current state of the gx-image-picker.  | Value               | Details                                                                                   | | ------------------- | ----------------------------------------------------------------------------------------- | | `readyToUse`        | Allows you to choose, change or remove an image.                                          | | `uploadingFile`     | It is set by the gx-image-picker control when the `reader` is loading the selected image. |  `uploadingFile` will not allow you to change or remove the current image.
     */
    state?: "readyToUse" | "uploadingFile";
  }
  interface GxInteractiveImage {
    /**
     * True/False. If this property is true, the user can zoom in/out on the image.
     */
    enableZoom?: boolean;
    /**
     * Lets you specify the image URL. *Requiered*
     */
    src?: string;
    /**
     * Indicates how much you can enlarge an image. (Percentage) _Note: 100% = Normal size_.
     */
    zoom?: number;
  }
  interface GxLayout {
    /**
     * `true` if the bottom navbar is visible in the application. This property can only be true if `layoutSize` == `"small"`
     */
    bottomNavbarVisible?: boolean;
    /**
     * `false` to hide the bottom target
     */
    bottomVisible?: false;
    /**
     * This attribute lets you specify if the header row pattern is enabled in the top navbar.
     */
    enableHeaderRowPattern?: boolean;
    /**
     * This attribute lets you specify the layout size of the application. Each layout size will set different behaviors in the gx-layout control.
     */
    layoutSize?: LayoutSize;
    /**
     * `false` to hide the left target
     */
    leftVisible?: boolean;
    /**
     * Fired when the leftVisible property is changed
     */
    onLeftHiddenChange?: (event: GxLayoutCustomEvent<any>) => void;
    /**
     * Fired when the rightVisible property is changed
     */
    onRightHiddenChange?: (event: GxLayoutCustomEvent<any>) => void;
    /**
     * `false` to hide the right target
     */
    rightVisible?: boolean;
    /**
     * `true` if the top navbar is visible in the application.
     */
    topNavbarVisible?: boolean;
    /**
     * `false` to hide the top target.
     */
    topVisible?: false;
  }
  interface GxLoading {
    /**
     * A CSS class to set as the `gx-loading` element class.
     */
    cssClass?: string;
    /**
     * `true` if the `componentDidLoad()` method was called. This property is not used as a state due to the following issue: https://github.com/ionic-team/stencil/issues/3158
     */
    didLoad?: boolean;
    /**
     * This attribute lets you specify the lottie path to use for the lottie animation. This property is not used as a state due to the following issue: https://github.com/ionic-team/stencil/issues/3158
     */
    lottiePath?: string;
    /**
     * This attribute lets you specify if the loading is presented.
     */
    presented?: boolean;
    /**
     * `true` to display the animation defined in the default `<slot>` instead the native (default) animation.
     */
    showSlotAnimation?: boolean;
  }
  interface GxLottie {
    /**
     * This attribute lets you specify a Lottie animation object
     */
    animationData?: any;
    /**
     * This attribute lets you specify if the animation will start playing as soon as it is ready
     */
    autoPlay?: boolean;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * This attribute lets you specify if the animation will loop
     */
    loop?: boolean;
    /**
     * Emitted when the animation is loaded in the DOM.
     */
    onAnimationLoad?: (event: GxLottieCustomEvent<any>) => void;
    /**
     * Emitted when the element is clicked.
     */
    onGxClick?: (event: GxLottieCustomEvent<any>) => void;
    /**
     * This attribute lets you specify  the relative path to the animation object. (`animationData` and `path` are mutually exclusive)
     */
    path?: string;
  }
  interface GxMap {
    /**
     * The coord of initial center of the map.
     */
    center?: string;
    /**
     * This attribute determines whether map markers should be grouped. When `true`, the markers will be grouped depending on their proximity.
     */
    clusteringPoints?: boolean;
    /**
     * Enables the possibility to draw the route between two points on the map.
     */
    directionLayer?: boolean;
    /**
     * WKT format string containing the response of Google Maps Directions API call
     */
    directionLayerWKTString?: string;
    /**
     * If `true` allows drawing geometries on the map.
     */
    editableGeographies?: boolean;
    /**
     * Enable the High Accuracy in user location. _Note: This property applies when ```watchPosition = true```._
     */
    highAccuracyLocator?: boolean;
    /**
     * Indicates how the map will be displayed at startup.  | Value           | Details                                                                                                                                       | | --------------- | --------------------------------------------------------------------------------------------------------------------------------------------- | | `showAll`       | (Default value) the map is adjusted to display all the loaded points (and the current device location if Show My Location is set to True).    | | `nearestPoint`  | The map is adjusted to display the current device location and shows my location and the nearest point.                                       | | `radius`        | The map is adjusted to display a fixed radius, from the specified center. The radius value is specified using the initialZoomRadius property. | | `noInitialZoom` | No specific action is taken regarding the initial zoom.                                                                                       |
     */
    initialZoom?: "showAll" | "nearestPoint" | "radius" | "noInitialZoom";
    /**
     * The radius value if `initialZoom` = `"radius"`.
     */
    initialZoomRadius?: number;
    /**
     * The map provider. _Note: Currently, this property is for setting a custom map provider using an URL._
     */
    mapProvider?: string;
    /**
     * Map type to be used. _Note: If you set a map provider, the selected map type will be ignored._  | Value       | Details                                                                     | | ----------- | --------------------------------------------------------------------------- | | `standard`  | Shows streets.                                                              | | `satellite` | Shows satellite images of the Earth.                                        | | `hybrid`    | Shows streets over the satellite images.                                    |
     */
    mapType?: "standard" | "satellite" | "hybrid";
    /**
     * Emitted when the map is loaded.
     */
    onGxMapDidLoad?: (event: GxMapCustomEvent<any>) => void;
    /**
     * Emitted when the map is clicked and return click coords.
     */
    onMapClick?: (event: GxMapCustomEvent<any>) => void;
    /**
     * Emitted when the map stops from being moved, if selection layer is active.
     */
    onSelectionChange?: (event: GxMapCustomEvent<any>) => void;
    /**
     * Emitted when the map is being moved, if selection layer is active.
     */
    onSelectionInput?: (event: GxMapCustomEvent<any>) => void;
    /**
     * Emitted when the user location coords change.
     */
    onUserLocationChange?: (event: GxMapCustomEvent<any>) => void;
    /**
     * A CSS class to set as the `showMyLocation` icon class.
     */
    pinImageCssClass?: string;
    /**
     * This attribute lets you specify the srcset attribute for the `showMyLocation` icon when the `pinShowMyLocationSrcset` property is not specified.
     */
    pinImageSrcset?: string;
    /**
     * This attribute lets you specify the srcset attribute for the `showMyLocation` icon. If not set the `pinImageSrcset` property will be used to specify the srcset attribute for the icon. If none of the properties are specified, a default icon will be used when `showMyLocation = true`
     */
    pinShowMyLocationSrcset?: string;
    /**
     * Whether the map can be zoomed by using the mouse wheel.
     */
    scrollWheelZoom?: boolean;
    /**
     * Enables the possibility to navigate the map and select a location point using the map center.
     */
    selectionLayer?: boolean;
    /**
     * A CSS class to set as the `selectionLayer` icon class.
     */
    selectionTargetImageCssClass?: string;
    /**
     * This attribute lets you specify the srcset attribute for the `selectionLayer` icon. If not set the `pinImageSrcset` property will be used to specify the srcset attribute for the icon. If none of the properties are specified, a default icon will be used when `selectionLayer = true`
     */
    selectionTargetImageSrcset?: string;
    /**
     * Indicates if the current location of the device is displayed on the map.
     */
    showMyLocation?: boolean;
    /**
     * The initial zoom level in the map.
     */
    zoom?: number;
  }
  interface GxMapCircle {
    /**
     * The coordinates where the circle will appear in the map.
     */
    coords?: string;
    /**
     * Emits when the element is deleted from a `<gx-map>`.
     */
    onGxMapCircleDeleted?: (event: GxMapCircleCustomEvent<any>) => void;
    /**
     * Emits when the element is added to a `<gx-map>`.
     */
    onGxMapCircleDidLoad?: (
      event: GxMapCircleCustomEvent<GridMapElement>
    ) => void;
    /**
     * The radius that the circle will have in the map. It's expressed in meters.
     */
    radius?: number;
  }
  interface GxMapLine {
    /**
     * The coordinates where the line/polyline will appear in the map.
     */
    coords?: string;
    /**
     * Emits when the element is deleted from a `<gx-map>`.
     */
    onGxMapLineDeleted?: (event: GxMapLineCustomEvent<any>) => void;
    /**
     * Emits when the element is added to a `<gx-map>`.
     */
    onGxMapLineDidLoad?: (event: GxMapLineCustomEvent<GridMapElement>) => void;
  }
  interface GxMapMarker {
    /**
     * This attribute lets you specify the alternative text of the marker image.
     */
    alt?: string;
    /**
     * The coordinates where the marker will appear in the map.
     */
    coords?: string;
    /**
     * The class that the marker will have.
     */
    cssClass?: string;
    /**
     * Emitted when the element is deleted from a `<gx-map>`.
     */
    onGxMapMarkerDeleted?: (event: GxMapMarkerCustomEvent<any>) => void;
    /**
     * Emitted when the element is added to a `<gx-map>`.
     */
    onGxMapMarkerDidLoad?: (event: GxMapMarkerCustomEvent<any>) => void;
    /**
     * Emitted when the element update its data.
     */
    onGxMapMarkerUpdate?: (event: GxMapMarkerCustomEvent<any>) => void;
    /**
     * Whether the gx-map-marker's popUp can be shown.
     */
    showPopup?: boolean;
    /**
     * This attribute lets you specify the src of the marker image.
     */
    src?: string;
    /**
     * This attribute lets you specify the srcset of the marker image.
     */
    srcset?: string;
    /**
     * The tooltip caption of the marker.
     */
    tooltipCaption?: string;
    /**
     * This attribute lets you specify the marker type. Each marker type has different images and sizes depending on its use.
     */
    type?: "default" | "selection-layer" | "user-location";
  }
  interface GxMapPolygon {
    /**
     * The coordinates where the polygon will appear in the map.
     */
    coords?: string;
    /**
     * A CSS class to set as the `gx-map-polygon` element class.
     */
    cssClass?: string;
    /**
     * Emitted when the element is deleted from a `<gx-map>`.
     */
    onGxMapPolygonDeleted?: (event: GxMapPolygonCustomEvent<any>) => void;
    /**
     * Emitted when the element is added to a `<gx-map>`.
     */
    onGxMapPolygonDidLoad?: (
      event: GxMapPolygonCustomEvent<GridMapElement>
    ) => void;
  }
  interface GxMessage {
    /**
     * A CSS class to set as the `gx-message` element class.
     */
    cssClass?: string;
    /**
     * The time in seconds before the message is automatically dismissed. If no duration is specified, the message will not be automatically dismissed.
     */
    duration?: number;
    /**
     * This attribute lets you identify the message. If `messageId == null`, the message will not be presented.
     */
    messageId?: string;
    /**
     * This attribute lets you specify the text of the message.
     */
    messageText?: string;
  }
  interface GxModal {
    /**
     * This attribute lets you specify if the modal dialog is automatically closed when an action is clicked.
     */
    autoClose?: boolean;
    /**
     * This attribute lets you specify the label for the close button. Important for accessibility.
     */
    closeButtonLabel?: string;
    /**
     * This attribute lets you specify the height of the control.
     */
    height?: string;
    /**
     * Fired when the modal dialog is closed
     */
    onClose?: (event: GxModalCustomEvent<any>) => void;
    /**
     * Fired when the modal dialog is opened
     */
    onOpen?: (event: GxModalCustomEvent<any>) => void;
    /**
     * This attribute lets you specify if the modal dialog is opened or closed.
     */
    opened?: boolean;
    /**
     * This attribute lets you specify if a body is rendered in the middle of the modal dialog.
     */
    showBody?: boolean;
    /**
     * This attribute lets you specify if a footer is rendered at the bottom of the modal dialog.
     */
    showFooter?: boolean;
    /**
     * This attribute lets you specify if a header is rendered on top of the modal dialog.
     */
    showHeader?: boolean;
    /**
     * If `type != "popup"`, the modal dialog will render with more advanced styling, including `box-shadow`, `border-radius` and `padding`.
     */
    type?: "alert" | "dialog" | "popup";
    /**
     * This attribute lets you specify the width of the control.
     */
    width?: string;
  }
  interface GxNavbar {
    /**
     * This attribute lets you specify the label for the low priority actions toggle button. Important for accessibility.
     */
    actionToggleButtonLabel?: string;
    /**
     * This attribute lets you specify the label for the back button.
     */
    backButtonLabel?: string;
    /**
     * This attribute lets you specify an optional title for the navigation bar
     */
    caption?: string;
    /**
     * A CSS class to set as the `gx-navbar` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the header row pattern is enabled. If enabled, the control will switch between the `cssClass` and `headerRowPatternCssClass` classes depending on the value of the `showHeaderRowPatternClass` property. This property only works when `position="top"`.
     */
    enableHeaderRowPattern?: boolean;
    /**
     * A CSS class to set as the `gx-navbar` element class when using the header row pattern.
     */
    headerRowPatternCssClass?: string;
    /**
     * This attribute lets you specify the layout size of the application. Each layout size will set different behaviors in the gx-layout control.
     */
    layoutSize?: LayoutSize;
    /**
     * `true` if the left target of the gx-layout is visible in the application.
     */
    leftTargetVisible?: boolean;
    /**
     * Fired when the back button is clicked
     */
    onBackButtonClick?: (event: GxNavbarCustomEvent<any>) => void;
    /**
     * Fired when the toggle button is clicked
     */
    onToggleButtonClick?: (event: GxNavbarCustomEvent<any>) => void;
    /**
     * This attribute lets you specify the position of the navbar in the viewport. If `position = "top"` the navbar will be placed normally at the top of the viewport. If `position = "bottom"` the navbar will be placed at the bottom of the viewport. This position of navbar is used to show navigation links.
     */
    position?: "top" | "bottom";
    /**
     * `true` if the right target of the gx-layout is visible in the application.
     */
    rightTargetVisible?: boolean;
    /**
     * True to show the back button
     */
    showBackButton?: boolean;
    /**
     * True to use the `headerRowPatternCssClass` property as the `gx-navbar` element class. False to use the `cssClass` property instead.
     */
    showHeaderRowPatternClass?: boolean;
    /**
     * True to show the left target toggle button (a burger icon)
     */
    showToggleButton?: false;
    /**
     * This attribute lets you specify if one or two lines will be used to render the navigation bar. Useful when there are links and also actions, to have links in the first line, and actions in the second
     */
    singleLine?: true;
    /**
     * This attribute lets you specify the label for the left target toggle button. Important for accessibility.
     */
    toggleButtonLabel?: string;
  }
  interface GxNavbarItem {
    /**
     * Indicates if the navbar item is the active one (for example, when the item represents the current page)
     */
    active?: false;
    /**
     * A CSS class to set as the `gx-navbar-item` element class.
     */
    cssClass?: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: true;
    /**
     * This attribute lets you specify the URL of the navbar item.
     */
    href?: "";
    /**
     * This attribute lets you specify the alternate text for the image specified in iconSrc.
     */
    iconAltText?: "";
    /**
     * This attribute lets you specify the src attribute of an icon for the navbar item.
     */
    iconSrc?: string;
    /**
     * This attribute lets you specify the srcset attribute of an icon for the navbar item.
     */
    iconSrcset?: string;
    /**
     * This attribute lets you specify the layout size of the application. Each layout size will set different behaviors in the gx-navbar-item control.
     */
    layoutSize?: LayoutSize;
  }
  interface GxPasswordEdit {
    /**
     * A CSS class to set as the `gx-password-edit` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * The text to set as the label of the gx-password-edit control.
     */
    labelCaption?: string;
    /**
     * The `change` event is emitted when a change to the element's value is committed by the user. Unlike the `input` event, the `change` event is not necessarily fired for each change to an element's value but when the control loses focus.
     */
    onChange?: (event: GxPasswordEditCustomEvent<any>) => void;
    /**
     * The `input` event is fired synchronously when the value is changed.
     */
    onInput?: (event: GxPasswordEditCustomEvent<any>) => void;
    /**
     * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
     */
    placeholder?: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly?: boolean;
    /**
     * Text of the reveal button to offer hiding the password.
     */
    revealButtonTextOff?: string;
    /**
     * Text of the reveal button to offer revealing the password.
     */
    revealButtonTextOn?: string;
    /**
     * If true, a reveal password button is shown next to the password input. Pressing the reveal button toggles the password mask, allowing the user to view the password text.
     */
    showRevealButton?: boolean;
    /**
     * The initial value of the control.
     */
    value?: string;
  }
  interface GxProgressBar {
    /**
     * It specifies the main text that is shown on the dialog.
     */
    caption?: string;
    /**
     * A CSS class to set as the `gx-progress-bar` element class.
     */
    cssClass?: string;
    /**
     * It specifies more information that is shown on the dialog.
     */
    description?: string;
    /**
     * This attribute lets you specify maximum value when type is `"determinate"`.
     */
    maxValue?: number;
    /**
     * This attribute lets you specify if the progress dialog is presented.
     */
    presented?: boolean;
    /**
     * It specifies the type of progress indicator. Determinate indicators show the progress of the processing, while indeterminate ones don't inform you about the status during the process.
     */
    type?: "determinate" | "indeterminate";
    /**
     * This attribute lets you specify the value when type is `"determinate"`.
     */
    value?: number;
  }
  interface GxRadioGroup {
    /**
     * A CSS class to set as the `gx-radio-group` element class.
     */
    cssClass?: string;
    /**
     * Specifies how the child `gx-radio-option` will be layed out. It supports two values:  * `horizontal` * `vertical` (default)
     */
    direction?: "horizontal" | "vertical";
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The name that will be set to all the inner inputs of type radio
     */
    name?: string;
    /**
     * The `change` event is emitted when a change to the element's value is committed by the user.
     */
    onChange?: (event: GxRadioGroupCustomEvent<any>) => void;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly?: boolean;
    /**
     * The initial value of the control. Setting the value automatically selects the corresponding radio option.
     */
    value?: string;
  }
  interface GxRadioOption {
    /**
     * Specifies the label of the radio.
     */
    caption?: string;
    /**
     * Indicates that the control is selected by default.
     */
    checked?: boolean;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The name of the inner input of type radio
     */
    name?: string;
    /**
     * The `change` event is emitted when a change to the element's value is committed by the user.
     */
    onChange?: (event: GxRadioOptionCustomEvent<any>) => void;
    /**
     * Emitted when the radio loads.
     */
    onGxRadioDidLoad?: (event: GxRadioOptionCustomEvent<any>) => void;
    /**
     * Emitted when the radio unloads.
     */
    onGxRadioDidUnload?: (event: GxRadioOptionCustomEvent<any>) => void;
    /**
     * Emitted when the radio button is selected.
     */
    onGxSelect?: (event: GxRadioOptionCustomEvent<any>) => void;
    /**
     * The initial value of the control.
     */
    value?: string;
  }
  interface GxRating {
    /**
     * A CSS class to set as the `gx-rating` element class.
     */
    cssClass?: string;
    /**
     * This attribute allows you specify if the element is disabled. If disabled, it will not trigger any user interaction related event (for example, click event).
     */
    disabled?: boolean;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * This property determine the number of stars displayed.
     */
    maxValue?: number;
    /**
     * The 'input' event is emitted when a change to the element's value is committed by the user.
     */
    onInput?: (event: GxRatingCustomEvent<any>) => void;
    /**
     * The current value displayed by the component.
     */
    value?: number;
  }
  interface GxSelect {
    /**
     * A CSS class to set as the `gx-select` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The `input` event is emitted when a change to the element's value is committed by the user.
     */
    onInput?: (event: GxSelectCustomEvent<any>) => void;
    /**
     * Text that appears in the form control when it has no value set
     */
    placeholder?: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
     */
    readonly?: boolean;
    /**
     * Render a text input showing a list of suggested elements.
     */
    suggest?: boolean;
    /**
     * The initial value of the control. Setting the value automatically selects the corresponding option.
     */
    value?: string;
  }
  interface GxSelectOption {
    /**
     * A CSS class to set as the inner `input` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * The `change` event is emitted when a change to the element's value is committed by the user.
     */
    onChange?: (event: GxSelectOptionCustomEvent<any>) => void;
    /**
     * Emitted when the option is disabled.
     */
    onGxDisable?: (event: GxSelectOptionCustomEvent<any>) => void;
    /**
     * Emitted when the option is selected.
     */
    onGxSelect?: (event: GxSelectOptionCustomEvent<any>) => void;
    /**
     * Emitted when the option loads.
     */
    onGxSelectDidLoad?: (event: GxSelectOptionCustomEvent<any>) => void;
    /**
     * Emitted when the option unloads.
     */
    onGxSelectDidUnload?: (event: GxSelectOptionCustomEvent<any>) => void;
    /**
     * Indicates that the control is selected by default.
     */
    selected?: boolean;
    /**
     * The initial value of the control.
     */
    value?: string;
  }
  interface GxSwitch {
    /**
     * Caption displayed when the switch is 'on'
     */
    checkedCaption?: string;
    /**
     * The value when the switch is 'on'
     */
    checkedValue?: string;
    /**
     * A CSS class to set as the `gx-switch` element class.
     */
    cssClass?: string;
    /**
     * This attribute allows you specify if the element is disabled. If disabled, it will not trigger any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * The 'input' event is emitted when a change to the element's value is committed by the user.
     */
    onInput?: (event: GxSwitchCustomEvent<any>) => void;
    /**
     * Caption displayed when the switch is 'off'
     */
    unCheckedCaption?: string;
    /**
     * The value when the switch is 'off'
     */
    unCheckedValue?: string;
    /**
     * The value of the control.
     */
    value?: string;
  }
  interface GxTab {
    /**
     * A CSS class to set as the `gx-tab` element class.
     */
    cssClass?: string;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Fired when the active tab is changed
     */
    onTabChange?: (event: GxTabCustomEvent<any>) => void;
    /**
     * Defines how the tabs will be distributed in the Strip.  | Value        | Details                                                                            | | ------------ | ---------------------------------------------------------------------------------- | | `scoll`      | Allows scrolling the tab control when the number of tabs exceeds the screen width. | | `fixed-size` | Tabs are fixed size. Used with any amount of tabs.                                 |
     */
    tabsDistribution?: "scroll" | "fixed-size";
  }
  interface GxTabCaption {
    /**
     * A CSS class to set as the `gx-tab-caption` element class when `selected = false`.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the tab page is disabled.
     */
    disabled?: boolean;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: boolean;
    /**
     * This attribute lets you specify the relative location of the image to the text.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `above`  | The image is located above the text.                    | | `before` | The image is located before the text, in the same line. | | `after`  | The image is located after the text, in the same line.  | | `below`  | The image is located below the text.                    | | `behind` | The image is located behind the text.                   |
     */
    imagePosition?: "above" | "before" | "after" | "below" | "behind";
    /**
     * Fired when the tab caption is selected.
     */
    onTabSelect?: (event: GxTabCaptionCustomEvent<any>) => void;
    /**
     * This attribute lets you specify if the tab page corresponding to this caption is selected
     */
    selected?: boolean;
    /**
     * A CSS class to set as the `gx-tab-caption` element class when `selected = true`.
     */
    selectedCssClass?: string;
    /**
     * A CSS class that is used by the `gx-tab` parent container.
     */
    tabCssClass?: string;
  }
  interface GxTabPage {
    /**
     * This attribute lets you specify if the tab page is selected.
     */
    selected?: boolean;
  }
  interface GxTable {
    /**
     * Like the `grid-templates-areas` CSS property, this attribute defines a grid template by referencing the names of the areas which are specified with the cells [area attribute](../table-cell/readme.md#area). Repeating the name of an area causes the content to span those cells. A period signifies an empty cell. The syntax itself provides a visualization of the structure of the grid.
     */
    areasTemplate?: string;
    /**
     * Like the `grid-templates-columns` CSS property, this attribute defines the columns of the grid with a space-separated list of values. The values represent the width of column.
     */
    columnsTemplate?: string;
    /**
     * A CSS class to set as the `gx-table` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * Emitted when the element is swiped.
     */
    onSwipe?: (event: GxTableCustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped downward direction.
     */
    onSwipeDown?: (event: GxTableCustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped left direction..
     */
    onSwipeLeft?: (event: GxTableCustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped right direction.
     */
    onSwipeRight?: (event: GxTableCustomEvent<any>) => void;
    /**
     * Emitted when the element is swiped in upward direction.
     */
    onSwipeUp?: (event: GxTableCustomEvent<any>) => void;
    /**
     * This attribute lets you determine whether the gx-table control has a scroll or not.  | Value    | Details                                                                                                           | | -------- | ----------------------------------------------------------------------------------------------------------------- | | `scroll` | The table provides scrollable behavior. When the table height exceeds the space available, a scroll bar is shown. | | `clip`   | The table doesn't provide scroll in any case; content is clipped at the bottom.                                   |
     */
    overflowBehavior?: "scroll" | "clip";
    /**
     * Like the `grid-templates-rows` CSS property, this attribute defines the rows of the grid with a space-separated list of values. The values represent the height of each row.
     */
    rowsTemplate?: string;
  }
  interface GxTableCell {
    /**
     * Defines the horizontal alignment of the content of the cell.
     */
    align?: "left" | "right" | "center";
    /**
     * Like the `grid-area` CSS property, this attribute gives a name to the item, so it can be used from the [areas-template attributes](../table/readme.md#areas-template) of the gx-table element.
     */
    area?: string;
    /**
     * This attribute defines the maximum height of the cell.
     */
    maxHeight?: string;
    /**
     * This attribute defines the minimum height of the cell when its contents are visible. Ignored if its content has `invisible-mode="collapse"` and is hidden.
     */
    minHeight?: string;
    /**
     * Defines the vertical alignment of the content of the cell.
     */
    valign?: "top" | "bottom" | "middle";
  }
  interface GxTextblock {
    /**
     * A CSS class to set as the `gx-textblock` element class.
     */
    cssClass?: string;
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * It specifies the format that will have the textblock control.   - If `format` = `HTML`, the textblock control works as an HTML div and    the innerHTML will be taken from the default slot.   - If `format` = `Text`, the control works as a normal textblock control    and it is affected by most of the defined properties.
     */
    format?: "Text" | "HTML";
    /**
     * True to highlight control when an action is fired.
     */
    highlightable?: false;
    /**
     * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode?: "collapse" | "keep-space";
    /**
     * True to cut text when it overflows, showing an ellipsis.
     */
    lineClamp?: false;
  }
  interface GxVideo {
    /**
     * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
     */
    disabled?: false;
    /**
     * This attribute is for specifies the src of the video.
     */
    src?: string;
  }
  interface IntrinsicElements {
    "gx-action-sheet": GxActionSheet;
    "gx-action-sheet-item": GxActionSheetItem;
    "gx-audio": GxAudio;
    "gx-button": GxButton;
    "gx-canvas": GxCanvas;
    "gx-canvas-cell": GxCanvasCell;
    "gx-card": GxCard;
    "gx-card-header": GxCardHeader;
    "gx-checkbox": GxCheckbox;
    "gx-chronometer": GxChronometer;
    "gx-dynamic-form": GxDynamicForm;
    "gx-edit": GxEdit;
    "gx-form-field": GxFormField;
    "gx-gauge": GxGauge;
    "gx-gauge-range": GxGaugeRange;
    "gx-grid-empty-indicator": GxGridEmptyIndicator;
    "gx-grid-flex": GxGridFlex;
    "gx-grid-fs": GxGridFs;
    "gx-grid-horizontal": GxGridHorizontal;
    "gx-grid-image-map": GxGridImageMap;
    "gx-grid-image-map-item": GxGridImageMapItem;
    "gx-grid-infinite-scroll": GxGridInfiniteScroll;
    "gx-grid-infinite-scroll-content": GxGridInfiniteScrollContent;
    "gx-grid-smart-cell": GxGridSmartCell;
    "gx-grid-smart-css": GxGridSmartCss;
    "gx-group": GxGroup;
    "gx-header-row-pattern-marker": GxHeaderRowPatternMarker;
    "gx-icon": GxIcon;
    "gx-image": GxImage;
    "gx-image-annotations": GxImageAnnotations;
    "gx-image-picker": GxImagePicker;
    "gx-interactive-image": GxInteractiveImage;
    "gx-layout": GxLayout;
    "gx-loading": GxLoading;
    "gx-lottie": GxLottie;
    "gx-map": GxMap;
    "gx-map-circle": GxMapCircle;
    "gx-map-line": GxMapLine;
    "gx-map-marker": GxMapMarker;
    "gx-map-polygon": GxMapPolygon;
    "gx-message": GxMessage;
    "gx-modal": GxModal;
    "gx-navbar": GxNavbar;
    "gx-navbar-item": GxNavbarItem;
    "gx-password-edit": GxPasswordEdit;
    "gx-progress-bar": GxProgressBar;
    "gx-radio-group": GxRadioGroup;
    "gx-radio-option": GxRadioOption;
    "gx-rating": GxRating;
    "gx-select": GxSelect;
    "gx-select-option": GxSelectOption;
    "gx-switch": GxSwitch;
    "gx-tab": GxTab;
    "gx-tab-caption": GxTabCaption;
    "gx-tab-page": GxTabPage;
    "gx-table": GxTable;
    "gx-table-cell": GxTableCell;
    "gx-textblock": GxTextblock;
    "gx-video": GxVideo;
  }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      "gx-action-sheet": LocalJSX.GxActionSheet &
        JSXBase.HTMLAttributes<HTMLGxActionSheetElement>;
      "gx-action-sheet-item": LocalJSX.GxActionSheetItem &
        JSXBase.HTMLAttributes<HTMLGxActionSheetItemElement>;
      "gx-audio": LocalJSX.GxAudio & JSXBase.HTMLAttributes<HTMLGxAudioElement>;
      "gx-button": LocalJSX.GxButton &
        JSXBase.HTMLAttributes<HTMLGxButtonElement>;
      "gx-canvas": LocalJSX.GxCanvas &
        JSXBase.HTMLAttributes<HTMLGxCanvasElement>;
      "gx-canvas-cell": LocalJSX.GxCanvasCell &
        JSXBase.HTMLAttributes<HTMLGxCanvasCellElement>;
      "gx-card": LocalJSX.GxCard & JSXBase.HTMLAttributes<HTMLGxCardElement>;
      "gx-card-header": LocalJSX.GxCardHeader &
        JSXBase.HTMLAttributes<HTMLGxCardHeaderElement>;
      "gx-checkbox": LocalJSX.GxCheckbox &
        JSXBase.HTMLAttributes<HTMLGxCheckboxElement>;
      "gx-chronometer": LocalJSX.GxChronometer &
        JSXBase.HTMLAttributes<HTMLGxChronometerElement>;
      "gx-dynamic-form": LocalJSX.GxDynamicForm &
        JSXBase.HTMLAttributes<HTMLGxDynamicFormElement>;
      "gx-edit": LocalJSX.GxEdit & JSXBase.HTMLAttributes<HTMLGxEditElement>;
      "gx-form-field": LocalJSX.GxFormField &
        JSXBase.HTMLAttributes<HTMLGxFormFieldElement>;
      "gx-gauge": LocalJSX.GxGauge & JSXBase.HTMLAttributes<HTMLGxGaugeElement>;
      "gx-gauge-range": LocalJSX.GxGaugeRange &
        JSXBase.HTMLAttributes<HTMLGxGaugeRangeElement>;
      "gx-grid-empty-indicator": LocalJSX.GxGridEmptyIndicator &
        JSXBase.HTMLAttributes<HTMLGxGridEmptyIndicatorElement>;
      "gx-grid-flex": LocalJSX.GxGridFlex &
        JSXBase.HTMLAttributes<HTMLGxGridFlexElement>;
      "gx-grid-fs": LocalJSX.GxGridFs &
        JSXBase.HTMLAttributes<HTMLGxGridFsElement>;
      "gx-grid-horizontal": LocalJSX.GxGridHorizontal &
        JSXBase.HTMLAttributes<HTMLGxGridHorizontalElement>;
      "gx-grid-image-map": LocalJSX.GxGridImageMap &
        JSXBase.HTMLAttributes<HTMLGxGridImageMapElement>;
      "gx-grid-image-map-item": LocalJSX.GxGridImageMapItem &
        JSXBase.HTMLAttributes<HTMLGxGridImageMapItemElement>;
      "gx-grid-infinite-scroll": LocalJSX.GxGridInfiniteScroll &
        JSXBase.HTMLAttributes<HTMLGxGridInfiniteScrollElement>;
      "gx-grid-infinite-scroll-content": LocalJSX.GxGridInfiniteScrollContent &
        JSXBase.HTMLAttributes<HTMLGxGridInfiniteScrollContentElement>;
      "gx-grid-smart-cell": LocalJSX.GxGridSmartCell &
        JSXBase.HTMLAttributes<HTMLGxGridSmartCellElement>;
      "gx-grid-smart-css": LocalJSX.GxGridSmartCss &
        JSXBase.HTMLAttributes<HTMLGxGridSmartCssElement>;
      "gx-group": LocalJSX.GxGroup & JSXBase.HTMLAttributes<HTMLGxGroupElement>;
      "gx-header-row-pattern-marker": LocalJSX.GxHeaderRowPatternMarker &
        JSXBase.HTMLAttributes<HTMLGxHeaderRowPatternMarkerElement>;
      "gx-icon": LocalJSX.GxIcon & JSXBase.HTMLAttributes<HTMLGxIconElement>;
      "gx-image": LocalJSX.GxImage & JSXBase.HTMLAttributes<HTMLGxImageElement>;
      "gx-image-annotations": LocalJSX.GxImageAnnotations &
        JSXBase.HTMLAttributes<HTMLGxImageAnnotationsElement>;
      "gx-image-picker": LocalJSX.GxImagePicker &
        JSXBase.HTMLAttributes<HTMLGxImagePickerElement>;
      "gx-interactive-image": LocalJSX.GxInteractiveImage &
        JSXBase.HTMLAttributes<HTMLGxInteractiveImageElement>;
      "gx-layout": LocalJSX.GxLayout &
        JSXBase.HTMLAttributes<HTMLGxLayoutElement>;
      "gx-loading": LocalJSX.GxLoading &
        JSXBase.HTMLAttributes<HTMLGxLoadingElement>;
      "gx-lottie": LocalJSX.GxLottie &
        JSXBase.HTMLAttributes<HTMLGxLottieElement>;
      "gx-map": LocalJSX.GxMap & JSXBase.HTMLAttributes<HTMLGxMapElement>;
      "gx-map-circle": LocalJSX.GxMapCircle &
        JSXBase.HTMLAttributes<HTMLGxMapCircleElement>;
      "gx-map-line": LocalJSX.GxMapLine &
        JSXBase.HTMLAttributes<HTMLGxMapLineElement>;
      "gx-map-marker": LocalJSX.GxMapMarker &
        JSXBase.HTMLAttributes<HTMLGxMapMarkerElement>;
      "gx-map-polygon": LocalJSX.GxMapPolygon &
        JSXBase.HTMLAttributes<HTMLGxMapPolygonElement>;
      "gx-message": LocalJSX.GxMessage &
        JSXBase.HTMLAttributes<HTMLGxMessageElement>;
      "gx-modal": LocalJSX.GxModal & JSXBase.HTMLAttributes<HTMLGxModalElement>;
      "gx-navbar": LocalJSX.GxNavbar &
        JSXBase.HTMLAttributes<HTMLGxNavbarElement>;
      "gx-navbar-item": LocalJSX.GxNavbarItem &
        JSXBase.HTMLAttributes<HTMLGxNavbarItemElement>;
      "gx-password-edit": LocalJSX.GxPasswordEdit &
        JSXBase.HTMLAttributes<HTMLGxPasswordEditElement>;
      "gx-progress-bar": LocalJSX.GxProgressBar &
        JSXBase.HTMLAttributes<HTMLGxProgressBarElement>;
      "gx-radio-group": LocalJSX.GxRadioGroup &
        JSXBase.HTMLAttributes<HTMLGxRadioGroupElement>;
      "gx-radio-option": LocalJSX.GxRadioOption &
        JSXBase.HTMLAttributes<HTMLGxRadioOptionElement>;
      "gx-rating": LocalJSX.GxRating &
        JSXBase.HTMLAttributes<HTMLGxRatingElement>;
      "gx-select": LocalJSX.GxSelect &
        JSXBase.HTMLAttributes<HTMLGxSelectElement>;
      "gx-select-option": LocalJSX.GxSelectOption &
        JSXBase.HTMLAttributes<HTMLGxSelectOptionElement>;
      "gx-switch": LocalJSX.GxSwitch &
        JSXBase.HTMLAttributes<HTMLGxSwitchElement>;
      "gx-tab": LocalJSX.GxTab & JSXBase.HTMLAttributes<HTMLGxTabElement>;
      "gx-tab-caption": LocalJSX.GxTabCaption &
        JSXBase.HTMLAttributes<HTMLGxTabCaptionElement>;
      "gx-tab-page": LocalJSX.GxTabPage &
        JSXBase.HTMLAttributes<HTMLGxTabPageElement>;
      "gx-table": LocalJSX.GxTable & JSXBase.HTMLAttributes<HTMLGxTableElement>;
      "gx-table-cell": LocalJSX.GxTableCell &
        JSXBase.HTMLAttributes<HTMLGxTableCellElement>;
      "gx-textblock": LocalJSX.GxTextblock &
        JSXBase.HTMLAttributes<HTMLGxTextblockElement>;
      "gx-video": LocalJSX.GxVideo & JSXBase.HTMLAttributes<HTMLGxVideoElement>;
    }
  }
}
