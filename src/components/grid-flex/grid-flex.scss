@import "../common/base";
@import "../common/layout-styling-config";

// With "display: grid" we ensure that the layout doesn't break when using
// relative size columns in the parent gx-table
@include visibility-shadow-DOM(grid);

:host {
  /**
   * @prop --gx-grid-flex-align-content: This aligns a flex containerâ€™s lines
   * within when there is extra space in the cross-axis, similar to how
   * justify-content aligns individual items within the main-axis.
   *
   * | Value           | Details                                                                                  |
   * | --------------- | ---------------------------------------------------------------------------------------- |
   * | `center`        | Lines are packed toward the center of the flex container.                                |
   * | `flex-end`      | Lines are packed toward the start of the flex container.                                 |
   * | `flex-start`    | Lines are packed toward the end of the flex container.                                   |
   * | `space-around`  | Lines are evenly distributed in the flex container, with half-size spaces on either end. |
   * | `space-between` | Lines are evenly distributed in the flex container.                                      |
   * | `stretch`       | Lines stretch to take up the remaining space.                                            |
   */
  --gx-grid-flex-align-content: stretch;

  /**
   * @prop --gx-grid-flex-align-items: This defines lets you define the default
   * behavior for how flex items are laid out along the cross axis on the
   * current line.
   * Think of it as the justify-content version for the cross-axis
   * (perpendicular to the main-axis).
   *
   * | Value           | Details                                                                                                                                                            |
   * | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
   * | `baseline`      | Controls are aligned such as their baselines align. This is useful to have several texts from different controls aligned taking into account different font sizes. |
   * | `center`        | Controls are positioned at the center of the container.                                                                                                            |
   * | `flex-end`      | Controls are positioned at the end of the container.                                                                                                               |
   * | `flex-start`    | Controls are positioned at the beginning of the container.                                                                                                         |
   * | `stretch`       | Controls are stretched to fit the container. In other words, children match the size of their container in the cross axis.                                         |
   */
  --gx-grid-flex-align-items: stretch;

  /**
   * @prop --gx-grid-flex-flex-direction: Determines the direction of the
   * main-axis (and the cross-axis, perpendicular to the main-axis). The
   * direction children items are placed inside the Flexbox layout.
   *
   * | Value            | Details                                                                                |
   * | ---------------- | -------------------------------------------------------------------------------------- |
   * | `column`         | Controls are displayed vertically, as a column (from top to bottom).                   |
   * | `column-reverse` | Controls are displayed vertically, as a column, in reverse order (from bottom to top). |
   * | `row`            | Controls are displayed horizontally, as a row (from left to right).                    |
   * | `row-reverse`    | Controls are displayed horizontally, as a row, in reverse order (from right to left).  |
   */
  --gx-grid-flex-flex-direction: row;

  /**
   * @prop --gx-grid-flex-flex-wrap: Determine whether the flex container is
   * single-line or multi-line, and the direction of the cross axis.
   * This attribute specifies what happens when children overflow the size of
   * the container along the main-axis of the layout container.
   * By default, flex items will all try to fit onto one line. You can change
   * that and allow the items to wrap as needed with this attribute.
   *
   * | Value          | Details                                                       |
   * | -------------- | ------------------------------------------------------------- |
   * | `nowrap`       | All flex items will be on one line                            |
   * | `wrap`         | Flex items will wrap onto multiple lines, from top to bottom. |
   * | `wrap-reverse` | Flex items will wrap onto multiple lines from bottom to top.  |
   */
  --gx-grid-flex-flex-wrap: nowrap;

  /**
   * @prop --gx-grid-flex-justify-content: This defines lets you define the
   * alignment along the main axis. It helps distribute extra free space
   * leftover when either all the flex items on a line are inflexible, or are
   * flexible but have reached their maximum size.
   * It also exerts some control over the alignment of items when they overflow
   * the line.
   *
   * | Value           | Details                                                                  |
   * | --------------- | ------------------------------------------------------------------------ |
   * | `center`        | Controls are positioned at the center of the container.                  |
   * | `flex-end`      | Controls are positioned at the end of the container.                     |
   * | `flex-start`    | Controls are positioned at the beginning of the container.               |
   * | `space-around`  | Controls are positioned with space before, between, and after the lines. |
   * | `space-between` | Controls are positioned with space between the lines.                    |
   * | `space-evenly`  | Controls are positioned with space evenly around them.                   |
   */
  --gx-grid-flex-justify-content: flex-start;

  /**
   * @prop --gx-overflow-style: Determine if the overflow will be hidden or visible.
   * By default, the gx-grid-flex hide its content overflow.
   */
  --gx-overflow-style: #{$default-overflow-style};
}

// - - - - - - - - - - - - - - - -
//        Measure grid size
// - - - - - - - - - - - - - - - -
:host(.gx-grid-flex--vertical-scroll) {
  // Necessary to enforce that the "gx-measure-size" will not
  // occupy any available width
  grid-template-columns: 0 1fr;
}

:host(.gx-grid-flex--horizontal-scroll) {
  // Necessary to enforce that the "gx-measure-size" will not
  // occupy any available height
  grid-template-rows: 0 1fr;
}

.gx-measure-size {
  display: flex;
  height: 100%;
}

// - - - - - - - - - - - - - - - -
//          Grid content
// - - - - - - - - - - - - - - - -
// Applies when Auto Grow = False
.grid-absolute-content-container {
  display: flex;
  position: relative;
  align-self: stretch;

  & > ::slotted([slot="grid-content"]) {
    position: absolute;
    width: 100%;
    height: 100%;
  }
}

::slotted([slot="grid-content"]) {
  display: flex;
  flex-direction: var(--gx-grid-flex-flex-direction);
  flex-wrap: var(--gx-grid-flex-flex-wrap);
  align-items: var(--gx-grid-flex-align-items);
  align-content: var(--gx-grid-flex-align-content);
  justify-content: var(--gx-grid-flex-justify-content);

  // Implements directional scroll depending on the flex-direction and flex-wrap
  overflow: auto;
}
