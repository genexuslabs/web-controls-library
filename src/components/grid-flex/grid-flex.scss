@import "../grid-base/grid-base.scss";

gx-grid-flex {
  /**
   * @prop --gx-grid-flex-wrap: By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.
   *
   * | Value        | Details                                                                                        |
   * | ------------ | ---------------------------------------------------------------------------------------------- |
   * | `nowrap` | all flex items will be on one line
   * | `wrap`   | flex items will wrap onto multiple lines, from top to bottom.
   * | `wrap-reverse`   | flex items will wrap onto multiple lines from bottom to top.
   */
  --gx-grid-flex-wrap: nowrap;

  /**
   * @prop --gx-grid-flex-justify-content: This defines the alignment along the main axis. It helps distribute extra free space leftover when either all the flex items 
      on a line are inflexible, or are flexible but have reached their maximum size. 
      It also exerts some control over the alignment of items when they overflow the line.
   */
  --gx-grid-flex-justify-content: flex-start;

  /**
   * @prop --gx-grid-flex-align-items: This defines the default behavior for how flex items are laid out along the cross axis on the current line. 
      Think of it as the justify-content version for the cross-axis (perpendicular to the main-axis).
   */
  --gx-grid-flex-align-items: stretch;

  /**
   * @prop --gx-grid-flex-align-content: This aligns a flex containerâ€™s lines within when there is extra space in the cross-axis, 
      similar to how justify-content aligns individual items within the main-axis.
   */
  --gx-grid-flex-align-content: normal;

  @include visibility(flex);

  > div {
    flex: 1;
  }

  #{$gridContentSelector} {
    @include visibility(flex);
    flex-direction: var(--gx-grid-flex-direction);
    flex-wrap: var(--gx-grid-flex-wrap);
    justify-content: var(--gx-grid-flex-justify-content);
    align-items: var(--gx-grid-flex-align-items);
    align-content: var(--gx-grid-flex-align-content);

    &[flex-direction="row"] {
      #{$gridContentSelector} {
        & > gx-grid-smart-cell[relative-size] {
          min-width: calc(
            var(--gx-grid-css-viewport-width) *
              var(--gx-grid-item-relative-size)
          );
        }
      }
    }
  }

  gx-grid-smart-cell {
    @include visibility(flex);
    & > * {
      flex: 1;
    }
  }
}
