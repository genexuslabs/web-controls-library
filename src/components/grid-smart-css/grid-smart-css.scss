@import "../grid-base/grid-base.scss";

gx-grid-smart-css {
  /**
   * @prop --gx-grid-css-items: Number of Columns or Rows to be shown in the Main axis direction.
   */
  --gx-grid-css-items: 1;

  /**
   * @prop --gx-grid-css-min-size: This attribute value is used to determine the number of columns to be shown
   * in a Smart Grid with Multiple by Size in Items Layout Mode.
   * The grid will fit as many columns as possible with at least this width, 0 means to use all width.
   */
  --gx-grid-css-min-size: 0;

  /**
   * @prop --gx-grid-css-max-size: This attribute value is used to determine the number of columns in a 
   * Smart Grid with Multiple by Size in Items Layout Mode and Vertical scroll direction. 
   * The width of the grid items cannot be greater than this maximum. 0 means no maximum.
   */
  --gx-grid-css-max-size: 0;

  @include visibility(flex);

  > div {
    flex: 1;
  }

  // - - - - - - - - - - - - - - - - - -
  //          Virtual Scroller
  // - - - - - - - - - - - - - - - - - -
  & > virtual-scroller {
    display: flex;
    width: 100%;

    // Virtual Scroll overrides these settings. This selector has high
    // Specificity to override the default settings
    &[slot="grid-content"] > .scrollable-content {
      height: auto;
      max-height: unset;
    }
  }

  #{$grid-content-selector} {
    @include visibility(grid);
  }

  &[snap-to-grid][direction="vertical"] {
    #{$grid-content-selector} {
      scroll-snap-type: y mandatory;
      & > gx-grid-smart-cell {
        scroll-snap-align: start;
      }
    }
  }

  &[direction="horizontal"] {
    #{$grid-content-selector} {
      max-width: var(--gx-grid-css-viewport-size);
      overflow-x: hidden;
    }
    @media (pointer: coarse) {
      #{$grid-content-selector} {
        overflow-x: auto; // Fix for Mozilla, because it only accepts: visible, hidden, auto or scroll
        overflow-x: overlay;
        scrollbar-width: none;

        &::-webkit-scrollbar {
          width: 0px;
          height: 0px;
        }
      }
    }
  }

  &[snap-to-grid][direction="horizontal"] {
    #{$grid-content-selector} {
      scroll-snap-type: x mandatory;
      & > gx-grid-smart-cell {
        scroll-snap-align: start;
      }
    }
    .gx-smart-cell-drag-active {
      scroll-snap-type: unset !important;
    }
  }
}

// - - - - - - - - - - - - - - - - - -
//        Vertical Orientation
// - - - - - - - - - - - - - - - - - -
gx-grid-smart-css[direction="vertical"] {
  // &:not([auto-grow]) {
  //   // max-height: var(--gx-grid-css-viewport-size);

  //   #{$grid-content-selector} {
  //     overflow-y: auto;
  //   }
  // }

  // This ensures that the rows will only set their height based on the height
  // of the content.
  #{$grid-content-selector} {
    grid-auto-rows: min-content;
  }

  #{$grid-content-selector} {
    & > gx-grid-smart-cell[relative-size] {
      min-height: calc(
        var(--gx-grid-css-viewport-size) * var(--gx-grid-item-relative-size)
      );
    }
  }

  // - - - - - Inverse Loading settings - - - - -
  &.gx-grid-inverse-loading {
    // Necessary to make work the "align-content" property when Inverse Loading
    // is enabled
    & > virtual-scroller > .scrollable-content {
      min-height: 100%;
    }

    #{$grid-content-selector} {
      align-content: flex-end;

      // "width: 100%" for the infinite scroll. Useful when
      // Item Layout Mode = Multiple By Quantity
      & > grid-infinite-scroll {
        grid-column-start: 1;
        grid-column-end: calc(var(--gx-grid-css-items) + 1);
      }
    }
  }

  // - - - - - - - - -  Single  - - - - - - - - -
  &[item-layout-mode="single"] {
    #{$grid-content-selector} {
      grid-template-columns: 1fr;
    }

    &.gx-grid-inverse-loading {
      #{$grid-content-selector} {
        & > gx-grid-smart-cell {
          grid-row-start: var(--gx-cell-index--single);
        }
      }
    }
  }

  // - - - - - - Multiple by Quantity - - - - - -
  &[item-layout-mode="mbyq"] {
    #{$grid-content-selector} {
      grid-template-columns: repeat(var(--gx-grid-css-items), 1fr);
    }

    &.gx-grid-inverse-loading {
      #{$grid-content-selector} {
        & > gx-grid-smart-cell {
          grid-row-start: var(--gx-cell-index--mbyq);
        }
      }
    }
  }

  // - - - - - - - Multiple by Size - - - - - - -
  &[item-layout-mode="mbys"] {
    #{$grid-content-selector} {
      grid-template-columns: repeat(
        auto-fill,
        minmax(var(--gx-grid-css-min-size), 1fr)
      );
    }
  }
}

// - - - - - - - - - - - - - - - - - -
//       Horizontal Orientation
// - - - - - - - - - - - - - - - - - -
gx-grid-smart-css[direction="horizontal"] {
  #{$grid-content-selector} {
    & > gx-grid-smart-cell[relative-size] {
      width: calc(
        var(--gx-grid-css-viewport-size) * var(--gx-grid-item-relative-size)
      );
    }
  }

  // - - - - - - - - -  Single  - - - - - - - - -
  &[item-layout-mode="single"] {
    #{$grid-content-selector} {
      grid-template-rows: 1fr;
      grid-auto-flow: column;
    }
  }

  // - - - - - - Multiple by Quantity - - - - - -
  &[item-layout-mode="mbyq"] {
    #{$grid-content-selector} {
      grid-template-rows: repeat(var(--gx-grid-css-items), 1fr);
      grid-auto-flow: column;
    }
  }

  // - - - - - - - Multiple by Size - - - - - - -
  &[item-layout-mode="mbys"] {
    #{$grid-content-selector} {
      grid-auto-flow: column;
      grid-template-rows: repeat(
        auto-fill,
        minmax(var(--gx-grid-css-min-size), 1fr)
      );
    }
  }
}
