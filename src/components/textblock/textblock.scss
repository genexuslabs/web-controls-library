@import "../common/_base";
@import "../common/_common-styling-config";

// Used to horizontally and vertically align the text
@mixin alignment($text-align: null, $align-items: null) {
  @if ($text-align != null) {
    text-align: $text-align;
  }

  @if ($align-items != null) {
    .gx-textblock-container {
      align-items: $align-items;
    }
  }
}

// Used when autoGrow = false to ensure the content does not overflows
gx-table-cell[max-height] {
  & > gx-textblock {
    .gx-textblock-content {
      position: absolute;
    }
  }
}

gx-textblock {
  --elevation: 0;

  // Default alignment which supports RTL
  @include alignment(start, flex-start);
  @include elevation();
  @include reset-variables();
  @include visibility(inline-flex);
  flex: 1;
  align-self: stretch;
  transition-property: background-color, border-color, box-shadow, color, filter,
    opacity;
  transition-duration: $transition-delay;

  &[disabled]:not([disabled="false"]) {
    pointer-events: none;
  }

  & > .gx-textblock-container {
    display: flex;
    flex: 1;
    position: relative;
    overflow: hidden;

    & > .gx-textblock-content {
      width: 100%;
    }
  }
}

// Alignments based on the direct parent control alignment
[align="center"] {
  & > gx-textblock {
    @include alignment(center);
  }
}

[align="right"] {
  & > gx-textblock {
    @include alignment(end);
  }
}

[valign="middle"] {
  & > gx-textblock {
    @include alignment($align-items: center);
  }
}

[valign="bottom"] {
  & > gx-textblock {
    @include alignment($align-items: flex-end);
  }
}
