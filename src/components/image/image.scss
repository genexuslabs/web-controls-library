@import "../common/base";
@import "../common/common-styling-config";

gx-image {
  --elevation: 0;
  @include elevation();
  @include visibility(flex);
  // It emulates "flex: 1" when the --width variable is not defined
  --width: 1;

  // It emulates "align-self: stretch" when the --height variable is not defined
  --height: stretch;

  flex: 1;
  align-self: stretch;
  width: 100%;
  overflow-x: hidden; // Horizontal overflow is always hidden

  // Workaround to stop firing events when the gx-image clicked but not the
  // inner img
  pointer-events: none;

  &:not(.disabled) {
    > .gx-image-container {
      pointer-events: all;
    }
  }

  // gx-image with auto-grow = FALSE
  &.gx-img-no-auto-grow {
    overflow-y: hidden; // Vertical overflow is hidden if auto-grow = False

    & > .gx-image-container > .gx-image-no-auto-grow-container {
      position: relative;
      width: 100%;
      height: 100%;

      > .inner-image {
        position: absolute;
        inset-inline-start: 0;
      }
    }
  }

  > .gx-image-container {
    // To adjust the position of the image picker button
    position: relative;

    // Takes "flex: 1" value when the --width is not defined
    flex: var(--width);

    // Takes "align-self: stretch" value when the --height is not defined
    align-self: var(--height);

    height: var(--height);
    min-width: var(--width);
    max-width: var(--width);
    overflow: hidden;
    @include transition-properties();
  }

  .inner-image {
    width: 100%;
    height: 100%;

    // Default Scale Type = Fit
    object-fit: var(--image-scale-type, contain);
  }

  > .gx-image-container > .gx-image-tile {
    display: inline-block !important;
    padding-inline-start: 100% !important;
    box-sizing: border-box !important;
    background-position: 0 !important;
    background-repeat: repeat;
  }

  // - - - - - - - - - - - - - - - -
  //        Loading indicator
  // - - - - - - - - - - - - - - - -
  .gx-lazy-loading-image::before {
    $center-loading: calc(50% - 1em);

    content: "";
    display: var(--image-loading-indicator, inline-block);
    position: absolute;
    inset-block-start: $center-loading;
    inset-inline-start: $center-loading;
    width: 2em;
    height: 2em;
    border-radius: 50%;
    font-size: 0.625em; // Used to set the default size of the loading indicator
    border: 0.3em solid #00000033;
    border-inline-start-color: #aaa;
    transform: translateZ(0);
    animation: gx-image-loading 1.1s infinite linear;
  }
}

// Remove outline of the focus state. This selector must not have higher
// specificity, since it should be overridden by the class applied to the control
.gx-image-container {
  outline: none;
}

[align="left"] {
  & > gx-form-field gx-image,
  & > gx-image {
    justify-content: flex-start;
  }
}

// Default horizontal alignment
[align="center"],
:not([align]) {
  & > gx-form-field gx-image,
  & > gx-image {
    justify-content: center;
  }
}

[align="right"] {
  & > gx-form-field gx-image,
  & > gx-image {
    justify-content: flex-end;
  }
}

[valign="top"] {
  & > gx-form-field gx-image,
  & > gx-image {
    align-items: flex-start;
  }
}

// Default vertical alignment
[valign="middle"],
:not([valign]) {
  & > gx-form-field gx-image,
  & > gx-image {
    align-items: center;
  }
}

[valign="bottom"] {
  & > gx-form-field gx-image,
  & > gx-image {
    align-items: flex-end;
  }
}

// Allow inner image positioning even when auto-grow is enabled
@mixin inner-image-alignment($halign, $valign) {
  $inner-image-control-selector: "& > gx-image .inner-image";
  $inner-image-variable-selector: "& > gx-form-field .inner-image";

  $valign-value: if($valign == middle, center, $valign);

  // Default horizontal and vertical alignment
  @if $halign == null and $valign == null {
    :not([align]):not([valign]) {
      #{$inner-image-control-selector},
      #{$inner-image-variable-selector} {
        object-position: center center;
      }
    }
  }
  // Default horizontal alignment
  @else if $halign == null {
    [valign="#{$valign}"]:not([align]) {
      #{$inner-image-control-selector},
      #{$inner-image-variable-selector} {
        object-position: center $valign-value;
      }
    }
  }
  // Default vertical alignment
  @else if $valign == null {
    [align="#{$halign}"]:not([valign]) {
      #{$inner-image-control-selector},
      #{$inner-image-variable-selector} {
        object-position: $halign center;
      }
    }
  }
  // Horizontal and vertical alignment specified
  @else {
    [align="#{$halign}"][valign="#{$valign}"] {
      #{$inner-image-control-selector},
      #{$inner-image-variable-selector} {
        object-position: $halign $valign-value;
      }
    }
  }
}

// Alignment for the image inside the img tag
@include inner-image-alignment(null, null);
@include inner-image-alignment(null, top);
@include inner-image-alignment(null, middle);
@include inner-image-alignment(null, bottom);
@include inner-image-alignment(left, null);
@include inner-image-alignment(center, null);
@include inner-image-alignment(right, null);
@include inner-image-alignment(left, top);
@include inner-image-alignment(left, middle);
@include inner-image-alignment(left, bottom);
@include inner-image-alignment(center, top);
@include inner-image-alignment(center, middle);
@include inner-image-alignment(center, bottom);
@include inner-image-alignment(right, top);
@include inner-image-alignment(right, middle);
@include inner-image-alignment(right, bottom);

@keyframes gx-image-loading {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}
