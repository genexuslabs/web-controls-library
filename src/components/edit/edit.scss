@import "../common/_base";
@import "../common/common-styling-config";

// Used to change the placeholder color in the input controls
// Opacity property is necessary, because some browsers (e.g., mozilla) change this value
@mixin placeholder-color {
  color: var(--placeholder-text-color);
  opacity: 1;
}

@include box-sizing();

// This solution would not be needed if the gx-edit with format="HTML" puts its
// content as an slot, instead of rendering it in the shadow root
@include reset-browser-defaults();

@include line-clamp-2();

:host {
  /**
   * @prop --gx-edit-auto-fill-background-color:
   * Define the background color when the edit is auto filled.
   * (#e8f0fe by default)
   */
  --gx-edit-auto-fill-background-color: #e8f0fe;

  --gx-edit-trigger-button-width: #{$gx-icon-size};
  --placeholder-text-color: #757575c0;

  display: flex;
  align-items: stretch;
  position: relative;
  align-self: stretch;

  // Remove outline of the focus state. This selector must not have higher
  // specificity, since it should be overridden by the class applied to the control
  outline: unset;

  // Necessary to support line-clamp
  overflow: hidden;

  @include transition-properties();
}

// Disable styling for the gx-edit when Format = Text
:host(.gx-disabled-custom) {
  @include disabled-style();
  pointer-events: none;
}

:host(.gx-edit--cursor-text) {
  cursor: text;
}

:host(.gx-edit--readonly) {
  // Implements the newline() command in GeneXus
  white-space: break-spaces;
}

.gx-height-measuring {
  display: flex;
  width: 0;
  height: 100%;
  visibility: hidden;
}

.gx-edit-content {
  width: 100%;

  &::placeholder {
    @include placeholder-color();
  }
}

// - - - - - - - - - - - - - - - - - - - -
//           Multiline Auto Grow
// - - - - - - - - - - - - - - - - - - - -
// Hide textarea resize button
:host(.gx-edit--multiline) > .gx-edit-content {
  position: absolute;
  inset: 0;
  padding: inherit;
  resize: unset;
}

// Implements auto-grow when the gx-edit is multiline
.gx-edit__hidden-multiline {
  width: 100%;
  height: 100%;

  // Implement line breaks
  white-space: pre-wrap;

  // Break words that do not enter in a single line
  word-break: break-word;

  // Hide from the accessibility tree but take space in the layout
  visibility: hidden;
}

// - - - - - - - - - - - - - - - - - - - -
//                Date type
// - - - - - - - - - - - - - - - - - - - -
.readonly-date {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

:host(.gx-edit--editable-date),
:host(.gx-edit--editable-date) > .gx-edit-content {
  cursor: pointer;
}

// - - - - - - - - - - - - - - - - - - - -
//    Custom placeholder for date types
// - - - - - - - - - - - - - - - - - - - -
// Used when the gx-edit has type="datetime-local" | "date" | "time"
// and its value is not set
.gx-null-date {
  opacity: 0; // Hide the input by default
  transition: opacity $transition-duration;

  // When the gx-edit is focused, we hide the placeholder
  &:focus {
    opacity: 1; // Hide the input when focused

    & ~ .gx-edit-date-placeholder {
      opacity: 0;
    }
  }
}

// Implements a non-native placeholder for date types
.gx-edit-date-placeholder {
  display: flex;
  position: absolute;
  flex: 1;
  pointer-events: none;
  transition: opacity $transition-duration;

  @include placeholder-color();
}

// - - - - - - - - - - - - - - - - - - - -
//             Trigger button
// - - - - - - - - - - - - - - - - - - - -
:host(.gx-edit__trigger-button-space)::after {
  content: "";
  height: 100%;
  margin-inline-start: var(--gx-edit-trigger-button-width);
  padding-inline-start: inherit;
}

.gx-edit__trigger-button {
  display: flex;
  align-items: center;
  justify-items: center;
  position: absolute;
  inset-block: 0;
  inset-inline-end: 0;
  padding-inline: inherit;
  cursor: pointer;
  transition: filter $transition-duration;

  &:focus {
    filter: drop-shadow(0px 0px 4px currentColor);
  }
}

// - - - - - - - - - - - - - - - -
//            Auto Fill
// - - - - - - - - - - - - - - - -
.gx-edit-content {
  // Dummy animation to trigger the onAnimationStart event
  &:-webkit-autofill {
    animation: AutoFillStart 0.000001s;
    transition: background-color 99999999s 0s;
  }

  // Dummy animation to trigger the onAnimationStart event
  &:not(:-webkit-autofill) {
    animation: AutoFillCancel 0.000001s;
  }
}

@keyframes AutoFillStart {
  0% {
    visibility: inherit;
  }
}
@keyframes AutoFillCancel {
  0% {
    visibility: inherit;
  }
}

// The [area="field"] attribute is used for more specificity. Otherwise, the
// style would be removed when the control is focused or hovered
:host(.gx-edit--auto-fill),
:host([area="field"].gx-edit--auto-fill:focus-within),
:host([area="field"].gx-edit--auto-fill:hover) {
  background-color: var(--gx-edit-auto-fill-background-color);
}
